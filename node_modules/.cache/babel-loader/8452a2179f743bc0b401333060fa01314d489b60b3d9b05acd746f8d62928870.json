{"ast":null,"code":"var _jsxFileName = \"/Users/bartosz/Documents/react-dapps/dev4passion_eword_web3/client/src/EWordssss.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { ethers } from \"ethers\";\n\n// import Eword from './artifacts/contracts/Eword.sol/Eword.json'\n// import EwordContract from './utils/EWordContract.json'\nimport EWordContract from './utils/EWordContract.json';\nimport { Container, Form } from 'semantic-ui-react';\n\n//import { create as ipfsHttpClient } from 'ipfs-http-client';\n\nimport { Network, Alchemy } from 'alchemy-sdk';\n\n//import { loadEWord } from './interact';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst settings = {\n  apiKey: \"gDpJAQB45zHfsl9wQW3acVBU_dUOycJX\",\n  network: Network.MATIC_MAINNET\n};\nconst alchemy = new Alchemy(settings);\n\n// const projectId = \"2GXCN4RVu5oOwOwAw77zytYHevQ\";\n// // const projectSecret = \"73218477da4f55465286ea74021256f8\"\n// const projectSecret = \"e1c92e31182812e4b7a923ab54f586df\"\n// const auth = `Basic ${Buffer.from(`${projectId}:${projectSecret}`).toString('base64')}`;\n\n// const client = ipfsHttpClient({\n//   host: 'ipfs.infura.io',\n//   port: 5001,\n//   protocol: 'https',\n//   headers: {\n//     authorization: auth,\n//   },\n// });\n\n// 0x58Fc0f0421203218EA9Cb55C743Dd2A82f6218C5\n// 0x5FbDB2315678afecb367f032d93F642f64180aa3\n// const ewordAddress = \"0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512\"//\n// 0x5FC8d32690cc91D4c39d9d3abcBD16989F875707\n// const ewordAddress = \"0x5FbDB2315678afecb367f032d93F642f64180aa3\" ////\nconst ewordAddress = \"0x047F65031c8aBf370FDBfEf667B0b1fd702F09Ef\";\n//const ewordAddress = \"0x58Fc0f0421203218EA9Cb55C743Dd2A82f6218C5\"\n\nfunction EWordssss() {\n  _s();\n  const [engWord, setEngWord] = useState('');\n  const [plWord, setPlWord] = useState('');\n  // const [engW, setEngW] = useState('')\n  // const [plW, setplW] = useState('')\n  const [engW, setEngW] = useState([]);\n  const [plW, setplW] = useState([]);\n  const [engWToCheck, setEngWToCheck] = useState('');\n  // const [engWToCheck, setEngWToCheck] = useState([])\n  // const [data, setData] = useState('')\n  //const [data, setData] = useState(1)\n  const [data, setData] = useState([]);\n  const engw = {\n    data: setData\n  };\n\n  // useEffect(() => {\n  //     getRandomInt();\n  // },[data])\n\n  // useEffect({\n\n  // },[data])\n\n  // useEffect(() => {\n\n  //     fetchEngWord()\n\n  // },[data], [fetchEngWord])\n\n  useEffect(() => {\n    // setData(data)\n\n    // loadEWord();\n\n    getRandomInt();\n  }, []);\n\n  // async function loadEWord() {\n\n  //   const eword = await loadEWord();\n  //   console.log(eword);\n  // }\n\n  async function requestAccount() {\n    // await window.ethereum.request({ method: \"eth_requestAccounts\" })\n    const windw_eth = await window.ethereum.request({\n      method: \"eth_requestAccounts\"\n    });\n    console.log(\"window_eth\", windw_eth);\n  }\n  async function fetchEWords() {\n    if (typeof window.ethereum !== 'undefined') {\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      // const contract = new ethers.Contract(ewordAddress, Eword.abi, provider)\n      const contract = new ethers.Contract(ewordAddress, EWordContract.abi, provider);\n      try {\n        //   const data = await contract.greet()\n        // const data = await contract.fetchEWords() //\n        const data = await contract.getEWords();\n        // setGreetingValue(data)\n        console.log('data: ', data);\n        // console.log('data: ', data[0][1]) - kind\n\n        console.log('data: ', data[0][1]);\n        console.log('data: ', data[0][2]);\n        console.log('data: ', data[1][1]);\n        console.log('data: ', data[1][2]);\n        // console.log('data: ', data[0][0].engWord)\n      } catch (err) {\n        console.log('Error: ', err);\n      }\n    }\n  }\n\n  // async function fetchEngWord({data_random}) {\n\n  //     const data = data_random;\n\n  //     console.log(\"data_\", data);\n  // }\n\n  // const fetchEngWord = ({data_random}) => {\n\n  //     const data = data_random;\n\n  //      console.log(\"data_\", data);\n  // }\n\n  // const fetchEngWord = ({data_random}) => {\n\n  //     console.log(\"data_random\", data_random);\n\n  //    // setData(2);\n  //     console.log(\"fetchWord\", data);\n  // }\n\n  // function fetchEngWord() {\n  //    // console.log(\"data_random\", data_random);\n\n  //    // setData(2);\n  //     console.log(\"fetchWord\", data);\n  // }\n\n  //  const submitEWord = () => {\n  // async function submitEWord() {\n  //    submitEWord = async ()  => {\n\n  // async function saveEWordToIpfs() {\n  //     /* save post metadata to ipfs */\n  //     try {\n  //       console.log(\"ipfs\", eword.engword)\n  //       console.log(\"ipfs\", eword.plword)\n  //       const added = await client.add(JSON.stringify(eword))\n  //       console.log(\"addedd\", added.path)\n  //       console.log(\"addedd\", added.path)\n  //       return added.path\n  //     } catch (err) {\n  //       console.log('error: ', err)\n  //     }\n  //   }\n\n  // const handleSubmitEngWord = async (e) => {\n\n  //    const handleEngWord = () => {\n  const handleEngWord = async e => {\n    //  console.log(e.target.value);\n\n    setEngWToCheck(e.target.value);\n\n    // console.log(e.target.value);\n    // console.log(engWToCheck);\n\n    const plw = sessionStorage.getItem('plw');\n    console.log(\"s-plw\", plw);\n    const engw = sessionStorage.getItem('engw');\n    console.log(\"s-engw\", engw);\n    const engwtocheck = engWToCheck;\n    console.log(engwtocheck === engw);\n    if (engWToCheck === engw) {\n      console.log(\"Ok\");\n      getRandomInt();\n    } else {\n      console.log(\"No\");\n    }\n  };\n  const handleSubmitEngWord = e => {\n    e.preventDefault();\n\n    //  getRandomInt();\n    console.log(\"engW-----\", engW);\n    const engw = sessionStorage.getItem('engw');\n    console.log(\"s-engw\", engw);\n\n    // console.log(\"handleSubmitEngWord_engW\", engW);\n    // console.log(\"handleSubmitEngWord_plW\", plW);\n    // console.log(engWToCheck);\n    // const setengtocheck = console.log(e.target.value)\n    const setengtocheck = e.target.value;\n    console.log(\"setengtocheck\", setengtocheck);\n    // setEngWToCheck(setengtocheck)\n    // setEngWToCheck(e.target.value)\n\n    // console.log(\"setengtocheck-engWToCheck\", engWToCheck);\n\n    if (setengtocheck == engw) {\n      console.log(\"Ok\");\n    } else {\n      console.log(\"No\");\n    }\n\n    // if (engWToCheck == engW ) {\n    //     console.log(\"OK\");\n    // } else {\n    //     console.log(\"No\");\n    // }\n  };\n\n  const handleSubmit = async e => {\n    e.preventDefault();\n    console.log(engWord);\n    console.log(plWord);\n    const eword = {\n      engword: engWord,\n      plword: plWord\n    };\n\n    //  try {\n    //     console.log(\"ipfs\", eword.engword)\n    //     console.log(\"ipfs\", eword.plword)\n    //     const added = await client.add(JSON.stringify(eword))\n    //     console.log(\"addedd\", added.path)\n    //     console.log(\"addedd\", added.path)\n    //     console.log(\"ipfs\", added.path);\n    //   } catch (err) {\n    //     console.log('error: ', err)\n    //   }\n    // }\n\n    /////////\n    if (!typeof window.ethereum !== 'undefined') {\n      await requestAccount();\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const signer = provider.getSigner();\n      // const contract = new ethers.Contract(ewordAddress, Eword.abi, signer)\n      const contract = new ethers.Contract(ewordAddress, EWordContract.abi, signer);\n      // const transaction = await contract.createEWord(eword.engword, eword.plword, \"lkajsdlfkjasd\")\n      // const transaction = await contract.createEWord(eword.engword, eword.plword) //\n      const transaction = await contract.addEWord(eword.engword, eword.plword);\n\n      // console.log(\"transaction\", transaction);\n      console.log(\"transaction\", transaction.data);\n      fetchEWords();\n      fetchEngWord();\n    }\n    // ///////////\n\n    // try {\n\n    //     if (!typeof window.ethereum !== 'undefined') {\n    //         await requestAccount()\n    //         const provider = new ethers.providers.Web3Provider(window.ethereum)\n    //         const signer = provider.getSigner()\n    //         const contract = new ethers.Contract(ewordAddress, Eword.abi, signer)\n    //         const transaction = await contract.createEWord(eword.engword, eword.plword, \"lkajsdlfkjasd\")\n\n    //         console.log(\"transaction\", transaction);\n    //     }\n\n    // } catch (error) {\n\n    // }\n\n    // try {\n\n    //     const { ethereum } = window\n\n    //     if ( ethereum ) {\n    //         const provider = new ethers.providers.Web3Provider(ethereum)\n    //         const signer = provider.getSigner()\n    //         const contract = new ethers.Contract(ewordAddress, Eword.abi, signer)\n\n    //         const eword = await contract.createEWord(eword.engWord, eword.plWord)\n\n    //         console.log(\"eword\", eword);\n\n    //     } else {\n\n    //     }\n\n    // } catch (error) {\n\n    // }\n\n    const {\n      ethereum\n    } = window;\n  };\n\n  // function getRandomInt(min, max) {\n  function getRandomInt() {\n    // min = Math.ceil(min);\n    // max = Math.floor(max);\n\n    const data = 10;\n    const min = Math.ceil(1);\n    // max = Math.floor(data.length);\n    const max = Math.floor(data);\n\n    // return Math.floor(Math.random() * (max - min) + min);\n    const dataa = Math.floor(Math.random() * (max - min) + min);\n    fetchEngWord(dataa);\n  }\n  const fetchEngWord = data => {\n    // engw.setData(2);\n\n    // setData(2);\n\n    console.log(\"data__\", data);\n\n    // const getengword = getEWord();\n    const getengword = getEWord(data);\n    console.log(\"getEWord\", getengword);\n  };\n  const getEWord = async data => {\n    /////////\n    if (!typeof window.ethereum !== 'undefined') {\n      await requestAccount();\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const signer = provider.getSigner();\n      // const contract = new ethers.Contract(ewordAddress, Eword.abi, signer)\n      const contract = new ethers.Contract(ewordAddress, EWordContract.abi, signer);\n      // const transaction = await contract.createEWord(eword.engword, eword.plword, \"lkajsdlfkjasd\")\n      // const transaction = await contract.createEWord(eword.engword, eword.plword) //\n      // const transaction = await contract.addEWord(eword.engword, eword.plword)\n      ////  const wordid = 0;\n      const wordid = data;\n      // const transaction = await contract.getEngWord(wordid)\n      // const transaction = await contract.getEngWord(wordid)\n      const transaction = await contract.getEngWordPlWord(wordid);\n\n      // console.log(\"transaction\", transaction);\n      // console.log(\"transaction\", transaction.data);\n      // setData(transaction)\n      // console.log(\"transaction\", transaction);\n      console.log(\"transaction\", transaction[0]);\n      // const engW = transaction[0];\n      sessionStorage.setItem('engw', transaction[0]);\n      setEngW(transaction[0]);\n      console.log(\"engW\", engW);\n      console.log(\"transaction\", transaction[1]);\n      sessionStorage.setItem('plw', transaction[1]);\n      // const plW = transaction[1];\n      setplW(transaction[1]);\n      console.log(\"plW\", plW);\n      // console.log(\"data\", data);\n\n      return transaction;\n\n      //// fetchEWords();\n\n      //  fetchEngWord();\n    }\n  };\n\n  //    const data_random = getRandomInt();\n\n  //  console.log(\"data-random\", data_random);\n\n  return /*#__PURE__*/_jsxDEV(\"dev\", {\n    children: [/*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [plW, /*#__PURE__*/_jsxDEV(\"input\", {\n        onChange: e => setEngWord(e.target.value),\n        id: \"engword\",\n        value: engWord,\n        placeholder: \"engword\",\n        type: \"text\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 490,\n        columnNumber: 18\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        onChange: e => setPlWord(e.target.value),\n        id: \"plword\",\n        value: plWord,\n        placeholder: \"plword\",\n        type: \"text\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 491,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        value: plW,\n        type: \"text\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 492,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 496,\n        columnNumber: 17\n      }, this), plW]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 485,\n      columnNumber: 13\n    }, this), engW, /*#__PURE__*/_jsxDEV(\"form\", {\n      children: [plW, sessionStorage.getItem('plw'), /*#__PURE__*/_jsxDEV(\"input\", {\n        onChange: handleEngWord,\n        id: \"engWToCheck\",\n        value: engWToCheck,\n        placeholder: \"engWToCheck\",\n        type: \"text\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 532,\n        columnNumber: 17\n      }, this), plW]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 524,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 483,\n    columnNumber: 9\n  }, this);\n}\n_s(EWordssss, \"vHy2ffUQ7xgzO8uQVCY3+Nb5hds=\");\n_c = EWordssss;\nexport default EWordssss;\nvar _c;\n$RefreshReg$(_c, \"EWordssss\");","map":{"version":3,"names":["React","useState","useEffect","ethers","EWordContract","Container","Form","Network","Alchemy","settings","apiKey","network","MATIC_MAINNET","alchemy","ewordAddress","EWordssss","engWord","setEngWord","plWord","setPlWord","engW","setEngW","plW","setplW","engWToCheck","setEngWToCheck","data","setData","engw","getRandomInt","requestAccount","windw_eth","window","ethereum","request","method","console","log","fetchEWords","provider","providers","Web3Provider","contract","Contract","abi","getEWords","err","handleEngWord","e","target","value","plw","sessionStorage","getItem","engwtocheck","handleSubmitEngWord","preventDefault","setengtocheck","handleSubmit","eword","engword","plword","signer","getSigner","transaction","addEWord","fetchEngWord","min","Math","ceil","max","floor","dataa","random","getengword","getEWord","wordid","getEngWordPlWord","setItem"],"sources":["/Users/bartosz/Documents/react-dapps/dev4passion_eword_web3/client/src/EWordssss.js"],"sourcesContent":["import React, { useState, useEffect } from 'react'\nimport {ethers} from \"ethers\"\n\n// import Eword from './artifacts/contracts/Eword.sol/Eword.json'\n// import EwordContract from './utils/EWordContract.json'\nimport EWordContract from './utils/EWordContract.json'\n\nimport { Container, Form } from 'semantic-ui-react'\n\n//import { create as ipfsHttpClient } from 'ipfs-http-client';\n\nimport { Network, Alchemy } from 'alchemy-sdk';\n\n\n//import { loadEWord } from './interact';\n\n\nconst settings = {\n    apiKey: \"gDpJAQB45zHfsl9wQW3acVBU_dUOycJX\",\n    network: Network.MATIC_MAINNET,\n};\n\nconst alchemy = new Alchemy(settings);\n\n\n// const projectId = \"2GXCN4RVu5oOwOwAw77zytYHevQ\";\n// // const projectSecret = \"73218477da4f55465286ea74021256f8\"\n// const projectSecret = \"e1c92e31182812e4b7a923ab54f586df\"\n// const auth = `Basic ${Buffer.from(`${projectId}:${projectSecret}`).toString('base64')}`;\n\n// const client = ipfsHttpClient({\n//   host: 'ipfs.infura.io',\n//   port: 5001,\n//   protocol: 'https',\n//   headers: {\n//     authorization: auth,\n//   },\n// });\n\n\n\n// 0x58Fc0f0421203218EA9Cb55C743Dd2A82f6218C5\n// 0x5FbDB2315678afecb367f032d93F642f64180aa3\n// const ewordAddress = \"0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512\"//\n// 0x5FC8d32690cc91D4c39d9d3abcBD16989F875707\n// const ewordAddress = \"0x5FbDB2315678afecb367f032d93F642f64180aa3\" ////\nconst ewordAddress = \"0x047F65031c8aBf370FDBfEf667B0b1fd702F09Ef\"\n//const ewordAddress = \"0x58Fc0f0421203218EA9Cb55C743Dd2A82f6218C5\"\n\n\nfunction EWordssss() {\n\n    const [engWord, setEngWord] = useState('')\n    const [plWord, setPlWord] = useState('')\n    // const [engW, setEngW] = useState('')\n    // const [plW, setplW] = useState('')\n    const [engW, setEngW] = useState([])\n    const [plW, setplW] = useState([])\n     \n     \n     const [engWToCheck, setEngWToCheck] = useState('')\n    // const [engWToCheck, setEngWToCheck] = useState([])\n    // const [data, setData] = useState('')\n    //const [data, setData] = useState(1)\n    const [data, setData] = useState([])\n\n    const engw = {\n\n        data: setData\n    };\n\n    // useEffect(() => {\n    //     getRandomInt();\n    // },[data])\n\n    // useEffect({\n\n    // },[data])\n\n    // useEffect(() => {\n\n    //     fetchEngWord()\n\n    // },[data], [fetchEngWord])\n\n    useEffect(() => {\n    // setData(data)\n\n     // loadEWord();\n\n    getRandomInt();\n\n    },[])\n\n\n    // async function loadEWord() {\n       \n    //   const eword = await loadEWord();\n    //   console.log(eword);\n    // }\n\n    async function requestAccount() {\n        // await window.ethereum.request({ method: \"eth_requestAccounts\" })\n       const windw_eth =  await window.ethereum.request({ method: \"eth_requestAccounts\" })\n       console.log(\"window_eth\", windw_eth);\n      }\n\n    async function fetchEWords() {\n        if (typeof window.ethereum !== 'undefined') {\n            const provider = new ethers.providers.Web3Provider(window.ethereum)\n            // const contract = new ethers.Contract(ewordAddress, Eword.abi, provider)\n            const contract = new ethers.Contract(ewordAddress, EWordContract.abi, provider)\n            try {\n            //   const data = await contract.greet()\n            // const data = await contract.fetchEWords() //\n            const data = await contract.getEWords()\n             // setGreetingValue(data)\n                console.log('data: ', data)\n            // console.log('data: ', data[0][1]) - kind\n\n\n            console.log('data: ', data[0][1])\n            console.log('data: ', data[0][2])\n            console.log('data: ', data[1][1])\n            console.log('data: ', data[1][2])\n           // console.log('data: ', data[0][0].engWord)\n            } catch (err) {\n              console.log('Error: ', err)\n            }\n          }\n    }\n\n    // async function fetchEngWord({data_random}) {\n\n    //     const data = data_random;\n\n    //     console.log(\"data_\", data);\n    // }\n\n\n\n    // const fetchEngWord = ({data_random}) => {\n\n    //     const data = data_random;\n\n    //      console.log(\"data_\", data);\n    // }\n\n    // const fetchEngWord = ({data_random}) => {\n\n    //     console.log(\"data_random\", data_random);\n\n    //    // setData(2);\n    //     console.log(\"fetchWord\", data);\n    // }\n\n\n\n\n\n\n    // function fetchEngWord() {\n    //    // console.log(\"data_random\", data_random);\n\n    //    // setData(2);\n    //     console.log(\"fetchWord\", data);\n    // }\n\n\n\n\n\n\n\n\n\n\n    //  const submitEWord = () => {\n        // async function submitEWord() {\n//    submitEWord = async ()  => {\n\n\n    // async function saveEWordToIpfs() {\n    //     /* save post metadata to ipfs */\n    //     try {\n    //       console.log(\"ipfs\", eword.engword)\n    //       console.log(\"ipfs\", eword.plword)\n    //       const added = await client.add(JSON.stringify(eword))\n    //       console.log(\"addedd\", added.path)\n    //       console.log(\"addedd\", added.path)\n    //       return added.path\n    //     } catch (err) {\n    //       console.log('error: ', err)\n    //     }\n    //   }\n\n\n\n     // const handleSubmitEngWord = async (e) => {\n\n    //    const handleEngWord = () => {\n        const handleEngWord = async (e) => {\n\n            //  console.log(e.target.value);\n\n            setEngWToCheck(e.target.value);\n\n            // console.log(e.target.value);\n            // console.log(engWToCheck);\n\n              const plw = sessionStorage.getItem('plw')\n              console.log(\"s-plw\", plw);\n\n            const engw =  sessionStorage.getItem('engw');\n             console.log(\"s-engw\", engw);\n\n             const engwtocheck = engWToCheck;\n\n             console.log(engwtocheck === engw);\n\n          if (engWToCheck === engw) {\n            console.log(\"Ok\");\n            getRandomInt();\n          } else {\n            console.log(\"No\");\n          }\n\n\n\n       }\n\n\n        const handleSubmitEngWord = (e) => {\n        e.preventDefault();\n\n      //  getRandomInt();\n        console.log(\"engW-----\", engW);\n\n       const engw =  sessionStorage.getItem('engw');\n       console.log(\"s-engw\", engw);\n\n        // console.log(\"handleSubmitEngWord_engW\", engW);\n        // console.log(\"handleSubmitEngWord_plW\", plW);\n        // console.log(engWToCheck);\n       // const setengtocheck = console.log(e.target.value)\n        const setengtocheck = e.target.value;\n      console.log(\"setengtocheck\", setengtocheck);\n        // setEngWToCheck(setengtocheck)\n       // setEngWToCheck(e.target.value)\n\n       // console.log(\"setengtocheck-engWToCheck\", engWToCheck);\n\n        if (setengtocheck == engw) {\n            console.log(\"Ok\");\n        } else {\n            console.log(\"No\");\n        }\n\n        // if (engWToCheck == engW ) {\n        //     console.log(\"OK\");\n        // } else {\n        //     console.log(\"No\");\n        // }\n\n\n\n    }\n\n    const handleSubmit = async (e) => {\n\n        e.preventDefault();\n\n        console.log(engWord)\n        console.log(plWord)\n\n\n\n\n\n\n\n        \n\n        const eword = {\n            engword: engWord,\n            plword: plWord\n        };\n\n\n\n        //  try {\n        //     console.log(\"ipfs\", eword.engword)\n        //     console.log(\"ipfs\", eword.plword)\n        //     const added = await client.add(JSON.stringify(eword))\n        //     console.log(\"addedd\", added.path)\n        //     console.log(\"addedd\", added.path)\n        //     console.log(\"ipfs\", added.path);\n        //   } catch (err) {\n        //     console.log('error: ', err)\n        //   }\n        // }\n\n\n\n\n\n\n\n\n\n\n\n\n        /////////\n        if (!typeof window.ethereum !== 'undefined') {\n            await requestAccount()\n            const provider = new ethers.providers.Web3Provider(window.ethereum)\n            const signer = provider.getSigner()\n            // const contract = new ethers.Contract(ewordAddress, Eword.abi, signer)\n            const contract = new ethers.Contract(ewordAddress, EWordContract.abi, signer)\n            // const transaction = await contract.createEWord(eword.engword, eword.plword, \"lkajsdlfkjasd\")\n            // const transaction = await contract.createEWord(eword.engword, eword.plword) //\n            const transaction = await contract.addEWord(eword.engword, eword.plword)\n        \n            // console.log(\"transaction\", transaction);\n            console.log(\"transaction\", transaction.data);\n\n            fetchEWords();\n            fetchEngWord();\n        }\n        // ///////////\n\n\n\n\n\n        // try {\n\n        //     if (!typeof window.ethereum !== 'undefined') {\n        //         await requestAccount()\n        //         const provider = new ethers.providers.Web3Provider(window.ethereum)\n        //         const signer = provider.getSigner()\n        //         const contract = new ethers.Contract(ewordAddress, Eword.abi, signer)\n        //         const transaction = await contract.createEWord(eword.engword, eword.plword, \"lkajsdlfkjasd\")\n            \n        //         console.log(\"transaction\", transaction);\n        //     }\n    \n            \n        // } catch (error) {\n            \n        // }\n\n\n        // try {\n            \n        //     const { ethereum } = window\n\n        //     if ( ethereum ) {\n        //         const provider = new ethers.providers.Web3Provider(ethereum)\n        //         const signer = provider.getSigner()\n        //         const contract = new ethers.Contract(ewordAddress, Eword.abi, signer)\n\n        //         const eword = await contract.createEWord(eword.engWord, eword.plWord)\n\n        //         console.log(\"eword\", eword);\n    \n\n\n        //     } else {\n\n        //     }\n\n        // } catch (error) {\n            \n        // }\n\n\n        const { ethereum } = window;\n    }\n\n    // function getRandomInt(min, max) {\n        function getRandomInt() {\n\n\n\n        // min = Math.ceil(min);\n        // max = Math.floor(max);\n\n        const data = 10;\n\n      const min = Math.ceil(1);\n        // max = Math.floor(data.length);\n      const max = Math.floor(data);\n    \n        // return Math.floor(Math.random() * (max - min) + min);\n        const dataa =  Math.floor(Math.random() * (max - min) + min);\n        fetchEngWord(dataa);\n    \n      }\n\n      const fetchEngWord = ( data ) => {\n\n       \n       // engw.setData(2);\n\n       // setData(2);\n\n        console.log(\"data__\", data);\n\n        // const getengword = getEWord();\n        const getengword = getEWord(data);\n\n        console.log(\"getEWord\", getengword);\n      }\n\n      const getEWord = async(data) => {\n\n\n         /////////\n         if (!typeof window.ethereum !== 'undefined') {\n            await requestAccount()\n            const provider = new ethers.providers.Web3Provider(window.ethereum)\n            const signer = provider.getSigner()\n            // const contract = new ethers.Contract(ewordAddress, Eword.abi, signer)\n            const contract = new ethers.Contract(ewordAddress, EWordContract.abi, signer)\n            // const transaction = await contract.createEWord(eword.engword, eword.plword, \"lkajsdlfkjasd\")\n            // const transaction = await contract.createEWord(eword.engword, eword.plword) //\n            // const transaction = await contract.addEWord(eword.engword, eword.plword)\n          ////  const wordid = 0;\n            const wordid = data;\n            // const transaction = await contract.getEngWord(wordid)\n            // const transaction = await contract.getEngWord(wordid)\n            const transaction = await contract.getEngWordPlWord(wordid)\n        \n            // console.log(\"transaction\", transaction);\n            // console.log(\"transaction\", transaction.data);\n           // setData(transaction)\n            // console.log(\"transaction\", transaction);\n            console.log(\"transaction\", transaction[0]);\n            // const engW = transaction[0];\n            sessionStorage.setItem('engw', transaction[0]);\n            setEngW(transaction[0])\n            console.log(\"engW\", engW);\n\n            console.log(\"transaction\", transaction[1]);\n            sessionStorage.setItem('plw', transaction[1]);\n            // const plW = transaction[1];\n            setplW(transaction[1]);\n            console.log(\"plW\", plW);\n           // console.log(\"data\", data);\n\n            return transaction;\n\n           //// fetchEWords();\n\n\n          //  fetchEngWord();\n        }\n\n\n\n      }\n\n\n\n\n\n\n    \n    //    const data_random = getRandomInt();\n\n\n    //  console.log(\"data-random\", data_random);\n\n\n\n   \n\n    return (\n    \n\n        <dev>\n            \n            <form onSubmit={handleSubmit}>\n                {plW}\n\n                             {/* <input onChange = { (e) => handle(e)} id=\"engword\" value = {eword.engword} placeholder='engword' type=\"text\"/>\n                <input onChange = { (e) => handle(e)} id=\"plword\" value = {eword.plword} placeholder='plword' type=\"text\" /> */}\n                 <input onChange = { (e) => setEngWord(e.target.value)} id=\"engword\" value = {engWord} placeholder='engword' type=\"text\"/>\n                <input onChange = { (e) => setPlWord(e.target.value)} id=\"plword\" value = {plWord} placeholder='plword' type=\"text\" />\n                <input value = {plW} type=\"text\" />\n\n                {/* <button onClick={submitEWord()}>Submit</button> */}\n                {/* <button onClick={submitEWord}>Submit</button> */}\n                <button>Submit</button>\n\n                {plW}\n\n\n\n            </form>\n\n            {engW}\n\n            {/* <form onSubmit={handleSubmitEngWord}> */}\n         \n            {/* <form>\n                {engW}\n                {plW}\n\n                <input onChange = { handleEngWord } id=\"engWToCheck\" value = {engWToCheck} placeholder='engWToCheck' type=\"text\" />\n\n                <button>Submit</button>\n\n                {plW}\n\n            </form> */}\n\n\n\n\n\n            <form >\n                {plW}\n                { sessionStorage.getItem('plw') }\n\n                 {/* <input onChange = { (e) => setEngWord(e.target.value)} id=\"engword\" value = {engWord} placeholder='engword' type=\"text\"/>\n                <input onChange = { (e) => setPlWord(e.target.value)} id=\"plword\" value = {plWord} placeholder='plword' type=\"text\" /> */}\n\n                {/* <input onChange = { (e) => setEngWToCheck(e.target.value)} id=\"engWToCheck\" value = {engWToCheck} placeholder='engWToCheck' type=\"text\"/> */}\n                <input onChange = { handleEngWord } id=\"engWToCheck\" value = {engWToCheck} placeholder='engWToCheck' type=\"text\"/>\n\n\n\n                {/* <button>Submit</button> */}\n\n                {plW}\n\n\n\n            </form>\n\n\n \n        </dev>\n        \n    );\n}\n\nexport default EWordssss;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}