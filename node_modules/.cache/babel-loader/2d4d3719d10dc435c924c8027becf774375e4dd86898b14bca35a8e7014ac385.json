{"ast":null,"code":"var _jsxFileName = \"/Users/bartosz/Documents/react-dapps/dev4passion_eword_web3/client/src/EWordssss.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { ethers } from \"ethers\";\n\n// import Eword from './artifacts/contracts/Eword.sol/Eword.json'\n// import EwordContract from './utils/EWordContract.json'\nimport EWordContract from './utils/EWordContract.json';\nimport { Container, Form } from 'semantic-ui-react';\n\n//import { create as ipfsHttpClient } from 'ipfs-http-client';\n\nimport { Network, Alchemy } from 'alchemy-sdk';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst settings = {\n  apiKey: \"gDpJAQB45zHfsl9wQW3acVBU_dUOycJX\",\n  network: Network.MATIC_MAINNET\n};\nconst alchemy = new Alchemy(settings);\n\n// const projectId = \"2GXCN4RVu5oOwOwAw77zytYHevQ\";\n// // const projectSecret = \"73218477da4f55465286ea74021256f8\"\n// const projectSecret = \"e1c92e31182812e4b7a923ab54f586df\"\n// const auth = `Basic ${Buffer.from(`${projectId}:${projectSecret}`).toString('base64')}`;\n\n// const client = ipfsHttpClient({\n//   host: 'ipfs.infura.io',\n//   port: 5001,\n//   protocol: 'https',\n//   headers: {\n//     authorization: auth,\n//   },\n// });\n\n// 0x58Fc0f0421203218EA9Cb55C743Dd2A82f6218C5\n// 0x5FbDB2315678afecb367f032d93F642f64180aa3\n// const ewordAddress = \"0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512\"//\n// 0x5FC8d32690cc91D4c39d9d3abcBD16989F875707\n// const ewordAddress = \"0x5FbDB2315678afecb367f032d93F642f64180aa3\" ////\nconst ewordAddress = \"0x610178dA211FEF7D417bC0e6FeD39F05609AD788\";\n//const ewordAddress = \"0x58Fc0f0421203218EA9Cb55C743Dd2A82f6218C5\"\n\nfunction EWordssss() {\n  _s();\n  const [engWord, setEngWord] = useState('');\n  const [plWord, setPlWord] = useState('');\n  const [engW, setEngW] = useState('');\n  const [plW, setplW] = useState('');\n  // const [data, setData] = useState('')\n  //const [data, setData] = useState(1)\n  const [data, setData] = useState([]);\n  const engw = {\n    data: setData\n  };\n\n  // useEffect(() => {\n  //     getRandomInt();\n  // },[data])\n\n  // useEffect({\n\n  // },[data])\n\n  // useEffect(() => {\n\n  //     fetchEngWord()\n\n  // },[data], [fetchEngWord])\n\n  // useEffect(() => {\n  // setData(data)\n\n  // },[])\n\n  async function requestAccount() {\n    await window.ethereum.request({\n      method: \"eth_requestAccounts\"\n    });\n  }\n  async function fetchEWords() {\n    if (typeof window.ethereum !== 'undefined') {\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      // const contract = new ethers.Contract(ewordAddress, Eword.abi, provider)\n      const contract = new ethers.Contract(ewordAddress, EWordContract.abi, provider);\n      try {\n        //   const data = await contract.greet()\n        // const data = await contract.fetchEWords() //\n        const data = await contract.getEWords();\n        // setGreetingValue(data)\n        console.log('data: ', data);\n        // console.log('data: ', data[0][1]) - kind\n\n        console.log('data: ', data[0][1]);\n        console.log('data: ', data[0][2]);\n        console.log('data: ', data[1][1]);\n        console.log('data: ', data[1][2]);\n        // console.log('data: ', data[0][0].engWord)\n      } catch (err) {\n        console.log('Error: ', err);\n      }\n    }\n  }\n\n  // async function fetchEngWord({data_random}) {\n\n  //     const data = data_random;\n\n  //     console.log(\"data_\", data);\n  // }\n\n  // const fetchEngWord = ({data_random}) => {\n\n  //     const data = data_random;\n\n  //      console.log(\"data_\", data);\n  // }\n\n  // const fetchEngWord = ({data_random}) => {\n\n  //     console.log(\"data_random\", data_random);\n\n  //    // setData(2);\n  //     console.log(\"fetchWord\", data);\n  // }\n\n  // function fetchEngWord() {\n  //    // console.log(\"data_random\", data_random);\n\n  //    // setData(2);\n  //     console.log(\"fetchWord\", data);\n  // }\n\n  //  const submitEWord = () => {\n  // async function submitEWord() {\n  //    submitEWord = async ()  => {\n\n  // async function saveEWordToIpfs() {\n  //     /* save post metadata to ipfs */\n  //     try {\n  //       console.log(\"ipfs\", eword.engword)\n  //       console.log(\"ipfs\", eword.plword)\n  //       const added = await client.add(JSON.stringify(eword))\n  //       console.log(\"addedd\", added.path)\n  //       console.log(\"addedd\", added.path)\n  //       return added.path\n  //     } catch (err) {\n  //       console.log('error: ', err)\n  //     }\n  //   }\n\n  const handleSubmit = async e => {\n    e.preventDefault();\n    console.log(engWord);\n    console.log(plWord);\n    const eword = {\n      engword: engWord,\n      plword: plWord\n    };\n\n    //  try {\n    //     console.log(\"ipfs\", eword.engword)\n    //     console.log(\"ipfs\", eword.plword)\n    //     const added = await client.add(JSON.stringify(eword))\n    //     console.log(\"addedd\", added.path)\n    //     console.log(\"addedd\", added.path)\n    //     console.log(\"ipfs\", added.path);\n    //   } catch (err) {\n    //     console.log('error: ', err)\n    //   }\n    // }\n\n    /////////\n    if (!typeof window.ethereum !== 'undefined') {\n      await requestAccount();\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const signer = provider.getSigner();\n      // const contract = new ethers.Contract(ewordAddress, Eword.abi, signer)\n      const contract = new ethers.Contract(ewordAddress, EWordContract.abi, signer);\n      // const transaction = await contract.createEWord(eword.engword, eword.plword, \"lkajsdlfkjasd\")\n      // const transaction = await contract.createEWord(eword.engword, eword.plword) //\n      const transaction = await contract.addEWord(eword.engword, eword.plword);\n\n      // console.log(\"transaction\", transaction);\n      console.log(\"transaction\", transaction.data);\n      fetchEWords();\n      fetchEngWord();\n    }\n    // ///////////\n\n    // try {\n\n    //     if (!typeof window.ethereum !== 'undefined') {\n    //         await requestAccount()\n    //         const provider = new ethers.providers.Web3Provider(window.ethereum)\n    //         const signer = provider.getSigner()\n    //         const contract = new ethers.Contract(ewordAddress, Eword.abi, signer)\n    //         const transaction = await contract.createEWord(eword.engword, eword.plword, \"lkajsdlfkjasd\")\n\n    //         console.log(\"transaction\", transaction);\n    //     }\n\n    // } catch (error) {\n\n    // }\n\n    // try {\n\n    //     const { ethereum } = window\n\n    //     if ( ethereum ) {\n    //         const provider = new ethers.providers.Web3Provider(ethereum)\n    //         const signer = provider.getSigner()\n    //         const contract = new ethers.Contract(ewordAddress, Eword.abi, signer)\n\n    //         const eword = await contract.createEWord(eword.engWord, eword.plWord)\n\n    //         console.log(\"eword\", eword);\n\n    //     } else {\n\n    //     }\n\n    // } catch (error) {\n\n    // }\n\n    const {\n      ethereum\n    } = window;\n  };\n  function getRandomInt(min, max) {\n    // min = Math.ceil(min);\n    // max = Math.floor(max);\n\n    const data = 10;\n    min = Math.ceil(1);\n    // max = Math.floor(data.length);\n    max = Math.floor(data);\n\n    // return Math.floor(Math.random() * (max - min) + min);\n    const dataa = Math.floor(Math.random() * (max - min) + min);\n    fetchEngWord(dataa);\n  }\n  const fetchEngWord = data => {\n    // engw.setData(2);\n\n    // setData(2);\n\n    console.log(\"data__\", data);\n\n    // const getengword = getEWord();\n    const getengword = getEWord(data);\n    console.log(\"getEWord\", getengword);\n  };\n  const getEWord = async data => {\n    /////////\n    if (!typeof window.ethereum !== 'undefined') {\n      await requestAccount();\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const signer = provider.getSigner();\n      // const contract = new ethers.Contract(ewordAddress, Eword.abi, signer)\n      const contract = new ethers.Contract(ewordAddress, EWordContract.abi, signer);\n      // const transaction = await contract.createEWord(eword.engword, eword.plword, \"lkajsdlfkjasd\")\n      // const transaction = await contract.createEWord(eword.engword, eword.plword) //\n      // const transaction = await contract.addEWord(eword.engword, eword.plword)\n      ////  const wordid = 0;\n      const wordid = data;\n      // const transaction = await contract.getEngWord(wordid)\n      // const transaction = await contract.getEngWord(wordid)\n      const transaction = await contract.getEngWordPlWord(wordid);\n\n      // console.log(\"transaction\", transaction);\n      // console.log(\"transaction\", transaction.data);\n      // setData(transaction)\n      // console.log(\"transaction\", transaction);\n      console.log(\"transaction\", transaction[0]);\n      const engW = transaction[0];\n      console.log(\"engW\", engW);\n      console.log(\"transaction\", transaction[1]);\n      const plW = transaction[1];\n      console.log(\"plW\", plW);\n      // console.log(\"data\", data);\n\n      return transaction;\n\n      //// fetchEWords();\n\n      //  fetchEngWord();\n    }\n  };\n\n  const data_random = getRandomInt();\n\n  //setDataRandom(data_random);\n\n  // setData(2);\n\n  //// fetchEngWord(data_random);\n\n  console.log(\"data-random\", data_random);\n  return /*#__PURE__*/_jsxDEV(\"dev\", {\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [plW, /*#__PURE__*/_jsxDEV(\"input\", {\n        onChange: e => setEngWord(e.target.value),\n        id: \"engword\",\n        value: engWord,\n        placeholder: \"engword\",\n        type: \"text\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 392,\n        columnNumber: 18\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        onChange: e => setPlWord(e.target.value),\n        id: \"plword\",\n        value: plWord,\n        placeholder: \"plword\",\n        type: \"text\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 393,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 397,\n        columnNumber: 17\n      }, this), plW]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 387,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 385,\n    columnNumber: 9\n  }, this);\n}\n_s(EWordssss, \"pAu1vJFov/eFqW4f/QA0ozuiJ0E=\");\n_c = EWordssss;\nexport default EWordssss;\nvar _c;\n$RefreshReg$(_c, \"EWordssss\");","map":{"version":3,"names":["React","useState","useEffect","ethers","EWordContract","Container","Form","Network","Alchemy","settings","apiKey","network","MATIC_MAINNET","alchemy","ewordAddress","EWordssss","engWord","setEngWord","plWord","setPlWord","engW","setEngW","plW","setplW","data","setData","engw","requestAccount","window","ethereum","request","method","fetchEWords","provider","providers","Web3Provider","contract","Contract","abi","getEWords","console","log","err","handleSubmit","e","preventDefault","eword","engword","plword","signer","getSigner","transaction","addEWord","fetchEngWord","getRandomInt","min","max","Math","ceil","floor","dataa","random","getengword","getEWord","wordid","getEngWordPlWord","data_random","target","value"],"sources":["/Users/bartosz/Documents/react-dapps/dev4passion_eword_web3/client/src/EWordssss.js"],"sourcesContent":["import React, { useState, useEffect } from 'react'\nimport {ethers} from \"ethers\"\n\n// import Eword from './artifacts/contracts/Eword.sol/Eword.json'\n// import EwordContract from './utils/EWordContract.json'\nimport EWordContract from './utils/EWordContract.json'\n\nimport { Container, Form } from 'semantic-ui-react'\n\n//import { create as ipfsHttpClient } from 'ipfs-http-client';\n\nimport { Network, Alchemy } from 'alchemy-sdk';\n\n\nconst settings = {\n    apiKey: \"gDpJAQB45zHfsl9wQW3acVBU_dUOycJX\",\n    network: Network.MATIC_MAINNET,\n};\n\nconst alchemy = new Alchemy(settings);\n\n\n// const projectId = \"2GXCN4RVu5oOwOwAw77zytYHevQ\";\n// // const projectSecret = \"73218477da4f55465286ea74021256f8\"\n// const projectSecret = \"e1c92e31182812e4b7a923ab54f586df\"\n// const auth = `Basic ${Buffer.from(`${projectId}:${projectSecret}`).toString('base64')}`;\n\n// const client = ipfsHttpClient({\n//   host: 'ipfs.infura.io',\n//   port: 5001,\n//   protocol: 'https',\n//   headers: {\n//     authorization: auth,\n//   },\n// });\n\n\n\n// 0x58Fc0f0421203218EA9Cb55C743Dd2A82f6218C5\n// 0x5FbDB2315678afecb367f032d93F642f64180aa3\n// const ewordAddress = \"0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512\"//\n// 0x5FC8d32690cc91D4c39d9d3abcBD16989F875707\n// const ewordAddress = \"0x5FbDB2315678afecb367f032d93F642f64180aa3\" ////\nconst ewordAddress = \"0x610178dA211FEF7D417bC0e6FeD39F05609AD788\"\n//const ewordAddress = \"0x58Fc0f0421203218EA9Cb55C743Dd2A82f6218C5\"\n\n\nfunction EWordssss() {\n\n    const [engWord, setEngWord] = useState('')\n    const [plWord, setPlWord] = useState('')\n    const [engW, setEngW] = useState('')\n    const [plW, setplW] = useState('')\n    // const [data, setData] = useState('')\n    //const [data, setData] = useState(1)\n    const [data, setData] = useState([])\n\n    const engw = {\n\n        data: setData\n    };\n\n    // useEffect(() => {\n    //     getRandomInt();\n    // },[data])\n\n    // useEffect({\n\n    // },[data])\n\n    // useEffect(() => {\n\n    //     fetchEngWord()\n\n    // },[data], [fetchEngWord])\n\n    // useEffect(() => {\n    // setData(data)\n\n    // },[])\n\n\n    async function requestAccount() {\n        await window.ethereum.request({ method: \"eth_requestAccounts\" })\n      }\n\n    async function fetchEWords() {\n        if (typeof window.ethereum !== 'undefined') {\n            const provider = new ethers.providers.Web3Provider(window.ethereum)\n            // const contract = new ethers.Contract(ewordAddress, Eword.abi, provider)\n            const contract = new ethers.Contract(ewordAddress, EWordContract.abi, provider)\n            try {\n            //   const data = await contract.greet()\n            // const data = await contract.fetchEWords() //\n            const data = await contract.getEWords()\n             // setGreetingValue(data)\n                console.log('data: ', data)\n            // console.log('data: ', data[0][1]) - kind\n\n\n            console.log('data: ', data[0][1])\n            console.log('data: ', data[0][2])\n            console.log('data: ', data[1][1])\n            console.log('data: ', data[1][2])\n           // console.log('data: ', data[0][0].engWord)\n            } catch (err) {\n              console.log('Error: ', err)\n            }\n          }\n    }\n\n    // async function fetchEngWord({data_random}) {\n\n    //     const data = data_random;\n\n    //     console.log(\"data_\", data);\n    // }\n\n\n\n    // const fetchEngWord = ({data_random}) => {\n\n    //     const data = data_random;\n\n    //      console.log(\"data_\", data);\n    // }\n\n    // const fetchEngWord = ({data_random}) => {\n\n    //     console.log(\"data_random\", data_random);\n\n    //    // setData(2);\n    //     console.log(\"fetchWord\", data);\n    // }\n\n\n\n\n\n\n    // function fetchEngWord() {\n    //    // console.log(\"data_random\", data_random);\n\n    //    // setData(2);\n    //     console.log(\"fetchWord\", data);\n    // }\n\n\n\n\n\n\n\n\n\n\n    //  const submitEWord = () => {\n        // async function submitEWord() {\n//    submitEWord = async ()  => {\n\n\n    // async function saveEWordToIpfs() {\n    //     /* save post metadata to ipfs */\n    //     try {\n    //       console.log(\"ipfs\", eword.engword)\n    //       console.log(\"ipfs\", eword.plword)\n    //       const added = await client.add(JSON.stringify(eword))\n    //       console.log(\"addedd\", added.path)\n    //       console.log(\"addedd\", added.path)\n    //       return added.path\n    //     } catch (err) {\n    //       console.log('error: ', err)\n    //     }\n    //   }\n\n\n\n\n    const handleSubmit = async (e) => {\n\n        e.preventDefault();\n\n        console.log(engWord)\n        console.log(plWord)\n\n        \n\n        const eword = {\n            engword: engWord,\n            plword: plWord\n        };\n\n\n\n        //  try {\n        //     console.log(\"ipfs\", eword.engword)\n        //     console.log(\"ipfs\", eword.plword)\n        //     const added = await client.add(JSON.stringify(eword))\n        //     console.log(\"addedd\", added.path)\n        //     console.log(\"addedd\", added.path)\n        //     console.log(\"ipfs\", added.path);\n        //   } catch (err) {\n        //     console.log('error: ', err)\n        //   }\n        // }\n\n\n\n\n\n\n\n\n\n\n\n\n        /////////\n        if (!typeof window.ethereum !== 'undefined') {\n            await requestAccount()\n            const provider = new ethers.providers.Web3Provider(window.ethereum)\n            const signer = provider.getSigner()\n            // const contract = new ethers.Contract(ewordAddress, Eword.abi, signer)\n            const contract = new ethers.Contract(ewordAddress, EWordContract.abi, signer)\n            // const transaction = await contract.createEWord(eword.engword, eword.plword, \"lkajsdlfkjasd\")\n            // const transaction = await contract.createEWord(eword.engword, eword.plword) //\n            const transaction = await contract.addEWord(eword.engword, eword.plword)\n        \n            // console.log(\"transaction\", transaction);\n            console.log(\"transaction\", transaction.data);\n\n            fetchEWords();\n            fetchEngWord();\n        }\n        // ///////////\n\n\n\n\n\n        // try {\n\n        //     if (!typeof window.ethereum !== 'undefined') {\n        //         await requestAccount()\n        //         const provider = new ethers.providers.Web3Provider(window.ethereum)\n        //         const signer = provider.getSigner()\n        //         const contract = new ethers.Contract(ewordAddress, Eword.abi, signer)\n        //         const transaction = await contract.createEWord(eword.engword, eword.plword, \"lkajsdlfkjasd\")\n            \n        //         console.log(\"transaction\", transaction);\n        //     }\n    \n            \n        // } catch (error) {\n            \n        // }\n\n\n        // try {\n            \n        //     const { ethereum } = window\n\n        //     if ( ethereum ) {\n        //         const provider = new ethers.providers.Web3Provider(ethereum)\n        //         const signer = provider.getSigner()\n        //         const contract = new ethers.Contract(ewordAddress, Eword.abi, signer)\n\n        //         const eword = await contract.createEWord(eword.engWord, eword.plWord)\n\n        //         console.log(\"eword\", eword);\n    \n\n\n        //     } else {\n\n        //     }\n\n        // } catch (error) {\n            \n        // }\n\n\n        const { ethereum } = window;\n    }\n\n    function getRandomInt(min, max) {\n        // min = Math.ceil(min);\n        // max = Math.floor(max);\n\n        const data = 10;\n\n        min = Math.ceil(1);\n        // max = Math.floor(data.length);\n        max = Math.floor(data);\n    \n        // return Math.floor(Math.random() * (max - min) + min);\n        const dataa =  Math.floor(Math.random() * (max - min) + min);\n        fetchEngWord(dataa);\n    \n      }\n\n      const fetchEngWord = ( data ) => {\n\n       \n       // engw.setData(2);\n\n       // setData(2);\n\n        console.log(\"data__\", data);\n\n        // const getengword = getEWord();\n        const getengword = getEWord(data);\n\n        console.log(\"getEWord\", getengword);\n      }\n\n      const getEWord = async(data) => {\n\n\n         /////////\n         if (!typeof window.ethereum !== 'undefined') {\n            await requestAccount()\n            const provider = new ethers.providers.Web3Provider(window.ethereum)\n            const signer = provider.getSigner()\n            // const contract = new ethers.Contract(ewordAddress, Eword.abi, signer)\n            const contract = new ethers.Contract(ewordAddress, EWordContract.abi, signer)\n            // const transaction = await contract.createEWord(eword.engword, eword.plword, \"lkajsdlfkjasd\")\n            // const transaction = await contract.createEWord(eword.engword, eword.plword) //\n            // const transaction = await contract.addEWord(eword.engword, eword.plword)\n          ////  const wordid = 0;\n            const wordid = data;\n            // const transaction = await contract.getEngWord(wordid)\n            // const transaction = await contract.getEngWord(wordid)\n            const transaction = await contract.getEngWordPlWord(wordid)\n        \n            // console.log(\"transaction\", transaction);\n            // console.log(\"transaction\", transaction.data);\n           // setData(transaction)\n            // console.log(\"transaction\", transaction);\n            console.log(\"transaction\", transaction[0]);\n            const engW = transaction[0];\n            console.log(\"engW\", engW);\n\n            console.log(\"transaction\", transaction[1]);\n            const plW = transaction[1];\n            console.log(\"plW\", plW);\n           // console.log(\"data\", data);\n\n            return transaction;\n\n           //// fetchEWords();\n\n\n          //  fetchEngWord();\n        }\n\n\n\n      }\n\n\n\n\n\n\n    \n       const data_random = getRandomInt();\n\n       //setDataRandom(data_random);\n\n      // setData(2);\n    \n\n     //// fetchEngWord(data_random);\n\n     console.log(\"data-random\", data_random);\n\n\n\n   \n\n    return (\n    \n\n        <dev>\n            \n            <form onSubmit={handleSubmit}>\n                {plW}\n\n                             {/* <input onChange = { (e) => handle(e)} id=\"engword\" value = {eword.engword} placeholder='engword' type=\"text\"/>\n                <input onChange = { (e) => handle(e)} id=\"plword\" value = {eword.plword} placeholder='plword' type=\"text\" /> */}\n                 <input onChange = { (e) => setEngWord(e.target.value)} id=\"engword\" value = {engWord} placeholder='engword' type=\"text\"/>\n                <input onChange = { (e) => setPlWord(e.target.value)} id=\"plword\" value = {plWord} placeholder='plword' type=\"text\" />\n\n                {/* <button onClick={submitEWord()}>Submit</button> */}\n                {/* <button onClick={submitEWord}>Submit</button> */}\n                <button>Submit</button>\n\n                {plW}\n\n\n\n            </form>\n        </dev>\n        \n    );\n}\n\nexport default EWordssss;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}