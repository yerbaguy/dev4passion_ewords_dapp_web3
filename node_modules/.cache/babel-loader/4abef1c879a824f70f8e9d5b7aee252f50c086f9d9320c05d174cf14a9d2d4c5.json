{"ast":null,"code":"import SturdyWebSocket from \"sturdy-websocket\";\nimport { w3cwebsocket } from \"websocket\";\nimport { makeJsonRpcPayloadFactory, makeJsonRpcSenders } from \"../util/jsonRpc\";\nimport { VERSION } from \"../version\";\nimport { makeJsonRpcHttpSender } from \"./alchemySendHttp\";\nimport { makeWebSocketSender } from \"./alchemySendWebSocket\";\nimport { makeAlchemyHttpProvider } from \"./httpProvider\";\nimport { makeJsonRpcPayloadSender } from \"./sendJsonRpcPayload\";\nimport { makeRestPayloadSender } from \"./sendRestPayload\";\nimport { AlchemyWebSocketProvider } from \"./webSocketProvider\";\nvar NODE_MAX_WS_FRAME_SIZE = 100 * 1024 * 1024; // 100 MB\nexport function makeAlchemyContext(url, config) {\n  var makeJsonRpcPayload = makeJsonRpcPayloadFactory();\n  var restSender = makeRestPayloadSender({\n    config: config,\n    url: url\n  });\n  if (/^https?:\\/\\//.test(url)) {\n    var alchemySendJsonrRpc = makeJsonRpcHttpSender(url);\n    var _a = makeJsonRpcPayloadSender(alchemySendJsonrRpc, config),\n      sendJsonRpcPayload = _a.sendJsonRpcPayload,\n      setWriteProvider = _a.setWriteProvider;\n    var jsonRpcSenders = makeJsonRpcSenders(sendJsonRpcPayload, makeJsonRpcPayload);\n    var provider = makeAlchemyHttpProvider(sendJsonRpcPayload);\n    return {\n      provider: provider,\n      jsonRpcSenders: jsonRpcSenders,\n      restSender: restSender,\n      setWriteProvider: setWriteProvider\n    };\n  } else if (/^wss?:\\/\\//.test(url)) {\n    var protocol = isAlchemyUrl(url) ? \"alchemy-web3-\" + VERSION : undefined;\n    var ws = new SturdyWebSocket(url, protocol, {\n      wsConstructor: getWebSocketConstructor()\n    });\n    var alchemySend = makeWebSocketSender(ws);\n    var _b = makeJsonRpcPayloadSender(alchemySend, config),\n      sendJsonRpcPayload = _b.sendJsonRpcPayload,\n      setWriteProvider = _b.setWriteProvider;\n    var jsonRpcSenders = makeJsonRpcSenders(sendJsonRpcPayload, makeJsonRpcPayload);\n    var provider = new AlchemyWebSocketProvider(ws, sendJsonRpcPayload, jsonRpcSenders);\n    return {\n      provider: provider,\n      jsonRpcSenders: jsonRpcSenders,\n      restSender: restSender,\n      setWriteProvider: setWriteProvider\n    };\n  } else {\n    throw new Error(\"Alchemy URL protocol must be one of http, https, ws, or wss. Recieved: \" + url);\n  }\n}\nfunction getWebSocketConstructor() {\n  return isNodeEnvironment() ? function (url, protocols) {\n    return new w3cwebsocket(url, protocols, undefined, undefined, undefined, {\n      maxReceivedMessageSize: NODE_MAX_WS_FRAME_SIZE,\n      maxReceivedFrameSize: NODE_MAX_WS_FRAME_SIZE\n    });\n  } : WebSocket;\n}\nfunction isNodeEnvironment() {\n  return typeof process !== \"undefined\" && process != null && process.versions != null && process.versions.node != null;\n}\nfunction isAlchemyUrl(url) {\n  return url.indexOf(\"alchemy.com\") >= 0 || url.indexOf(\"alchemyapi.io\") >= 0;\n}","map":{"version":3,"mappings":"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","names":["SturdyWebSocket","w3cwebsocket","makeJsonRpcPayloadFactory","makeJsonRpcSenders","VERSION","makeJsonRpcHttpSender","makeWebSocketSender","makeAlchemyHttpProvider","makeJsonRpcPayloadSender","makeRestPayloadSender","AlchemyWebSocketProvider","NODE_MAX_WS_FRAME_SIZE","makeAlchemyContext","url","config","makeJsonRpcPayload","restSender","test","alchemySendJsonrRpc","sendJsonRpcPayload","setWriteProvider","jsonRpcSenders","provider","protocol","isAlchemyUrl","undefined","ws","wsConstructor","getWebSocketConstructor","alchemySend","Error","isNodeEnvironment","protocols","maxReceivedMessageSize","maxReceivedFrameSize","WebSocket","process","versions","node","indexOf"],"sources":["/Users/bartosz/Documents/react-dapps/node_modules/@alch/alchemy-web3/src/web3-adapter/alchemyContext.ts"],"sourcesContent":["import SturdyWebSocket from \"sturdy-websocket\";\nimport { w3cwebsocket } from \"websocket\";\nimport { FullConfig, Provider } from \"../types\";\nimport {\n  JsonRpcSenders,\n  makeJsonRpcPayloadFactory,\n  makeJsonRpcSenders,\n} from \"../util/jsonRpc\";\nimport { VERSION } from \"../version\";\nimport { makeJsonRpcHttpSender } from \"./alchemySendHttp\";\nimport { makeWebSocketSender } from \"./alchemySendWebSocket\";\nimport { makeAlchemyHttpProvider } from \"./httpProvider\";\nimport { makeJsonRpcPayloadSender } from \"./sendJsonRpcPayload\";\nimport { makeRestPayloadSender, RestPayloadSender } from \"./sendRestPayload\";\nimport { AlchemyWebSocketProvider } from \"./webSocketProvider\";\n\nconst NODE_MAX_WS_FRAME_SIZE = 100 * 1024 * 1024; // 100 MB\n\nexport interface AlchemyContext {\n  provider: any;\n  restSender: RestPayloadSender;\n  jsonRpcSenders: JsonRpcSenders;\n  setWriteProvider(provider: Provider | null | undefined): void;\n}\n\nexport function makeAlchemyContext(\n  url: string,\n  config: FullConfig,\n): AlchemyContext {\n  const makeJsonRpcPayload = makeJsonRpcPayloadFactory();\n  const restSender = makeRestPayloadSender({\n    config,\n    url,\n  });\n  if (/^https?:\\/\\//.test(url)) {\n    const alchemySendJsonrRpc = makeJsonRpcHttpSender(url);\n    const { sendJsonRpcPayload, setWriteProvider } = makeJsonRpcPayloadSender(\n      alchemySendJsonrRpc,\n      config,\n    );\n    const jsonRpcSenders = makeJsonRpcSenders(\n      sendJsonRpcPayload,\n      makeJsonRpcPayload,\n    );\n    const provider = makeAlchemyHttpProvider(sendJsonRpcPayload);\n    return { provider, jsonRpcSenders, restSender, setWriteProvider };\n  } else if (/^wss?:\\/\\//.test(url)) {\n    const protocol = isAlchemyUrl(url) ? `alchemy-web3-${VERSION}` : undefined;\n    const ws = new SturdyWebSocket(url, protocol, {\n      wsConstructor: getWebSocketConstructor(),\n    });\n    const alchemySend = makeWebSocketSender(ws);\n    const { sendJsonRpcPayload, setWriteProvider } = makeJsonRpcPayloadSender(\n      alchemySend,\n      config,\n    );\n    const jsonRpcSenders = makeJsonRpcSenders(\n      sendJsonRpcPayload,\n      makeJsonRpcPayload,\n    );\n    const provider = new AlchemyWebSocketProvider(\n      ws,\n      sendJsonRpcPayload,\n      jsonRpcSenders,\n    );\n    return { provider, jsonRpcSenders, restSender, setWriteProvider };\n  } else {\n    throw new Error(\n      `Alchemy URL protocol must be one of http, https, ws, or wss. Recieved: ${url}`,\n    );\n  }\n}\n\nfunction getWebSocketConstructor(): any {\n  return isNodeEnvironment()\n    ? (url: string, protocols?: string | string[] | undefined) =>\n        new w3cwebsocket(url, protocols, undefined, undefined, undefined, {\n          maxReceivedMessageSize: NODE_MAX_WS_FRAME_SIZE,\n          maxReceivedFrameSize: NODE_MAX_WS_FRAME_SIZE,\n        })\n    : WebSocket;\n}\n\nfunction isNodeEnvironment(): boolean {\n  return (\n    typeof process !== \"undefined\" &&\n    process != null &&\n    process.versions != null &&\n    process.versions.node != null\n  );\n}\n\nfunction isAlchemyUrl(url: string): boolean {\n  return url.indexOf(\"alchemy.com\") >= 0 || url.indexOf(\"alchemyapi.io\") >= 0;\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}