{"ast":null,"code":"import { __awaiter, __generator } from \"tslib\";\nexport function makeJsonRpcPayloadFactory() {\n  var nextId = 0;\n  return function (method, params) {\n    return {\n      method: method,\n      params: params,\n      jsonrpc: \"2.0\",\n      id: \"alc-web3:\" + nextId++\n    };\n  };\n}\nexport function makeJsonRpcSenders(sendJsonRpcPayload, makeJsonRpcPayload) {\n  var _this = this;\n  var send = function (method, params) {\n    return __awaiter(_this, void 0, void 0, function () {\n      var response;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, sendJsonRpcPayload(makeJsonRpcPayload(method, params))];\n          case 1:\n            response = _a.sent();\n            if (response.error) {\n              throw new Error(response.error.message);\n            }\n            return [2 /*return*/, response.result];\n        }\n      });\n    });\n  };\n  function sendBatch(parts) {\n    return __awaiter(this, void 0, void 0, function () {\n      var payload, response, message, errorResponse;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            payload = parts.map(function (_a) {\n              var method = _a.method,\n                params = _a.params;\n              return makeJsonRpcPayload(method, params);\n            });\n            return [4 /*yield*/, sendJsonRpcPayload(payload)];\n          case 1:\n            response = _a.sent();\n            if (!Array.isArray(response)) {\n              message = response.error ? response.error.message : \"Batch request failed\";\n              throw new Error(message);\n            }\n            errorResponse = response.find(function (r) {\n              return !!r.error;\n            });\n            if (errorResponse) {\n              throw new Error(errorResponse.error.message);\n            }\n            // The ids are ascending numbers because that's what Payload Factories do.\n            return [2 /*return*/, response.sort(function (r1, r2) {\n              return r1.id - r2.id;\n            }).map(function (r) {\n              return r.result;\n            })];\n        }\n      });\n    });\n  }\n  return {\n    send: send,\n    sendBatch: sendBatch\n  };\n}\nexport function makeResponse(id, result) {\n  return {\n    jsonrpc: \"2.0\",\n    id: id,\n    result: result\n  };\n}","map":{"version":3,"mappings":";AAuBA,OAAM,SAAUA,yBAAyB;EACvC,IAAIC,MAAM,GAAG,CAAC;EACd,OAAO,UAACC,MAAM,EAAEC,MAAM;IAAK,OAAC;MAC1BD,MAAM;MACNC,MAAM;MACNC,OAAO,EAAE,KAAK;MACdC,EAAE,EAAE,cAAYJ,MAAM;KACvB;EAL0B,CAKzB;AACJ;AAEA,OAAM,SAAUK,kBAAkB,CAChCC,kBAA8C,EAC9CC,kBAAyC;EAF3C;EAIE,IAAMC,IAAI,GAAwB,UAAOP,MAAM,EAAEC,MAAM;IAAA;;;;;YACpC,qBAAMI,kBAAkB,CACvCC,kBAAkB,CAACN,MAAM,EAAEC,MAAM,CAAC,CACnC;;YAFKO,QAAQ,GAAGC,SAEhB;YACD,IAAID,QAAQ,CAACE,KAAK,EAAE;cAClB,MAAM,IAAIC,KAAK,CAACH,QAAQ,CAACE,KAAK,CAACE,OAAO,CAAC;;YAEzC,sBAAOJ,QAAQ,CAACK,MAAM;QAAC;;;GACxB;EAED,SAAeC,SAAS,CAACC,KAAkB;;;;;;YACnCC,OAAO,GAAGD,KAAK,CAACE,GAAG,CAAC,UAACR,EAAkB;kBAAhBT,MAAM;gBAAEC,MAAM;cACzC,yBAAkB,CAACD,MAAM,EAAEC,MAAM,CAAC;YAAlC,CAAkC,CACnC;YACgB,qBAAMI,kBAAkB,CAACW,OAAO,CAAC;;YAA5CR,QAAQ,GAAGC,SAAiC;YAClD,IAAI,CAACS,KAAK,CAACC,OAAO,CAACX,QAAQ,CAAC,EAAE;cACtBI,OAAO,GAAGJ,QAAQ,CAACE,KAAK,GAC1BF,QAAQ,CAACE,KAAK,CAACE,OAAO,GACtB,sBAAsB;cAC1B,MAAM,IAAID,KAAK,CAACC,OAAO,CAAC;;YAEpBQ,aAAa,GAAGZ,QAAQ,CAACa,IAAI,CAAC,UAACC,CAAC;cAAK,QAAC,CAACA,CAAC,CAACZ,KAAK;YAAT,CAAS,CAAC;YACrD,IAAIU,aAAa,EAAE;cACjB,MAAM,IAAIT,KAAK,CAACS,aAAa,CAACV,KAAM,CAACE,OAAO,CAAC;;YAE/C;YACA,sBAAOJ,QAAQ,CACZe,IAAI,CAAC,UAACC,EAAE,EAAEC,EAAE;cAAK,OAACD,EAAE,CAACrB,EAAa,GAAIsB,EAAE,CAACtB,EAAa;YAArC,CAAqC,CAAC,CACvDc,GAAG,CAAC,UAACK,CAAC;cAAK,QAAC,CAACT,MAAM;YAAR,CAAQ,CAAC;QAAC;;;;EAG1B,OAAO;IAAEN,IAAI;IAAEO,SAAS;EAAA,CAAE;AAC5B;AAEA,OAAM,SAAUY,YAAY,CAAIvB,EAAa,EAAEU,MAAS;EACtD,OAAO;IAAEX,OAAO,EAAE,KAAK;IAAEC,EAAE;IAAEU,MAAM;EAAA,CAAE;AACvC","names":["makeJsonRpcPayloadFactory","nextId","method","params","jsonrpc","id","makeJsonRpcSenders","sendJsonRpcPayload","makeJsonRpcPayload","send","response","_a","error","Error","message","result","sendBatch","parts","payload","map","Array","isArray","errorResponse","find","r","sort","r1","r2","makeResponse"],"sources":["/Users/bartosz/Documents/react-dapps/node_modules/@alch/alchemy-web3/src/util/jsonRpc.ts"],"sourcesContent":["import {\n  JsonRpcId,\n  JsonRpcRequest,\n  JsonRpcResponse,\n  SendJsonRpcFunction,\n} from \"../types\";\nimport { SendJsonRpcPayloadFunction } from \"../web3-adapter/sendJsonRpcPayload\";\n\nexport type JsonRpcPayloadFactory = (\n  method: string,\n  params?: any[],\n) => JsonRpcRequest;\n\nexport interface JsonRpcSenders {\n  send: SendJsonRpcFunction;\n  sendBatch(parts: BatchPart[]): Promise<any[]>;\n}\n\nexport interface BatchPart {\n  method: string;\n  params?: any;\n}\n\nexport function makeJsonRpcPayloadFactory(): JsonRpcPayloadFactory {\n  let nextId = 0;\n  return (method, params) => ({\n    method,\n    params,\n    jsonrpc: \"2.0\",\n    id: `alc-web3:${nextId++}`,\n  });\n}\n\nexport function makeJsonRpcSenders(\n  sendJsonRpcPayload: SendJsonRpcPayloadFunction,\n  makeJsonRpcPayload: JsonRpcPayloadFactory,\n): JsonRpcSenders {\n  const send: SendJsonRpcFunction = async (method, params) => {\n    const response = await sendJsonRpcPayload(\n      makeJsonRpcPayload(method, params),\n    );\n    if (response.error) {\n      throw new Error(response.error.message);\n    }\n    return response.result;\n  };\n\n  async function sendBatch(parts: BatchPart[]): Promise<any[]> {\n    const payload = parts.map(({ method, params }) =>\n      makeJsonRpcPayload(method, params),\n    );\n    const response = await sendJsonRpcPayload(payload);\n    if (!Array.isArray(response)) {\n      const message = response.error\n        ? response.error.message\n        : \"Batch request failed\";\n      throw new Error(message);\n    }\n    const errorResponse = response.find((r) => !!r.error);\n    if (errorResponse) {\n      throw new Error(errorResponse.error!.message);\n    }\n    // The ids are ascending numbers because that's what Payload Factories do.\n    return response\n      .sort((r1, r2) => (r1.id as number) - (r2.id as number))\n      .map((r) => r.result);\n  }\n\n  return { send, sendBatch };\n}\n\nexport function makeResponse<T>(id: JsonRpcId, result: T): JsonRpcResponse<T> {\n  return { jsonrpc: \"2.0\", id, result };\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}