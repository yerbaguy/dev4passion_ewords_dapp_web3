{"ast":null,"code":"import { __assign, __awaiter, __generator, __read, __spreadArray } from \"tslib\";\nimport Web3 from \"web3\";\nimport web3CoreSubscriptions from \"web3-core-subscriptions\";\nimport ABIDecoder from \"web3-eth-abi\";\nimport { toHex } from \"web3-utils\";\nimport { formatBlock } from \"./util/hex\";\nimport { callWhenDone } from \"./util/promises\";\nimport { makeAlchemyContext } from \"./web3-adapter/alchemyContext\";\nimport { patchEnableCustomRPC } from \"./web3-adapter/customRPC\";\nimport { patchEthMaxPriorityFeePerGasMethod } from \"./web3-adapter/eth_maxPriorityFeePerGas\";\nimport { patchEthPrivateTransactionMethods } from \"./web3-adapter/eth_PrivateTransactions\";\nexport * from \"./alchemy-apis/types\";\nvar DEFAULT_MAX_RETRIES = 3;\nvar DEFAULT_RETRY_INTERVAL = 1000;\nvar DEFAULT_RETRY_JITTER = 250;\nvar DEFAULT_CONTRACT_ADDRESS = \"DEFAULT_TOKENS\";\nexport function createAlchemyWeb3(alchemyUrl, config) {\n  var fullConfig = fillInConfigDefaults(config);\n  var _a = makeAlchemyContext(alchemyUrl, fullConfig),\n    provider = _a.provider,\n    jsonRpcSenders = _a.jsonRpcSenders,\n    restSender = _a.restSender,\n    setWriteProvider = _a.setWriteProvider;\n  var alchemyWeb3 = new Web3(provider);\n  alchemyWeb3.setProvider = function () {\n    throw new Error(\"setProvider is not supported in Alchemy Web3. To change the provider used for writes, use setWriteProvider() instead.\");\n  };\n  alchemyWeb3.setWriteProvider = setWriteProvider;\n  function getNfts(params, callback) {\n    return callAlchemyRestEndpoint({\n      restSender: restSender,\n      callback: callback,\n      params: params,\n      path: \"getNFTs\"\n    });\n  }\n  alchemyWeb3.alchemy = {\n    getTokenAllowance: function (params, callback) {\n      return callAlchemyJsonRpcMethod({\n        jsonRpcSenders: jsonRpcSenders,\n        callback: callback,\n        method: \"alchemy_getTokenAllowance\",\n        params: [params]\n      });\n    },\n    getTokenBalances: function (address, contractAddresses, callback) {\n      return callAlchemyJsonRpcMethod({\n        jsonRpcSenders: jsonRpcSenders,\n        callback: callback,\n        method: \"alchemy_getTokenBalances\",\n        params: [address, contractAddresses || DEFAULT_CONTRACT_ADDRESS],\n        processResponse: processTokenBalanceResponse\n      });\n    },\n    getTokenMetadata: function (address, callback) {\n      return callAlchemyJsonRpcMethod({\n        jsonRpcSenders: jsonRpcSenders,\n        callback: callback,\n        params: [address],\n        method: \"alchemy_getTokenMetadata\"\n      });\n    },\n    getAssetTransfers: function (params, callback) {\n      return callAlchemyJsonRpcMethod({\n        jsonRpcSenders: jsonRpcSenders,\n        callback: callback,\n        params: [__assign(__assign({}, params), {\n          fromBlock: params.fromBlock != null ? formatBlock(params.fromBlock) : undefined,\n          toBlock: params.toBlock != null ? formatBlock(params.toBlock) : undefined,\n          maxCount: params.maxCount != null ? toHex(params.maxCount) : undefined\n        })],\n        method: \"alchemy_getAssetTransfers\"\n      });\n    },\n    getNftMetadata: function (params, callback) {\n      return callAlchemyRestEndpoint({\n        restSender: restSender,\n        callback: callback,\n        params: params,\n        path: \"getNFTMetadata\"\n      });\n    },\n    getNfts: getNfts,\n    getTransactionReceipts: function (params, callback) {\n      return callAlchemyJsonRpcMethod({\n        jsonRpcSenders: jsonRpcSenders,\n        callback: callback,\n        method: \"alchemy_getTransactionReceipts\",\n        params: [params]\n      });\n    }\n  };\n  patchSubscriptions(alchemyWeb3);\n  patchEnableCustomRPC(alchemyWeb3);\n  patchEthMaxPriorityFeePerGasMethod(alchemyWeb3);\n  patchEthPrivateTransactionMethods(alchemyWeb3);\n  return alchemyWeb3;\n}\nfunction fillInConfigDefaults(_a) {\n  var _b = _a === void 0 ? {} : _a,\n    _c = _b.writeProvider,\n    writeProvider = _c === void 0 ? getWindowProvider() : _c,\n    _d = _b.jsonRpcSenderMiddlewares,\n    jsonRpcSenderMiddlewares = _d === void 0 ? [] : _d,\n    _e = _b.maxRetries,\n    maxRetries = _e === void 0 ? DEFAULT_MAX_RETRIES : _e,\n    _f = _b.retryInterval,\n    retryInterval = _f === void 0 ? DEFAULT_RETRY_INTERVAL : _f,\n    _g = _b.retryJitter,\n    retryJitter = _g === void 0 ? DEFAULT_RETRY_JITTER : _g;\n  return {\n    writeProvider: writeProvider,\n    jsonRpcSenderMiddlewares: jsonRpcSenderMiddlewares,\n    maxRetries: maxRetries,\n    retryInterval: retryInterval,\n    retryJitter: retryJitter\n  };\n}\nfunction getWindowProvider() {\n  return typeof window !== \"undefined\" ? window.ethereum : null;\n}\nfunction callAlchemyJsonRpcMethod(_a) {\n  var _this = this;\n  var jsonRpcSenders = _a.jsonRpcSenders,\n    method = _a.method,\n    params = _a.params,\n    _b = _a.callback,\n    callback = _b === void 0 ? noop : _b,\n    _c = _a.processResponse,\n    processResponse = _c === void 0 ? identity : _c;\n  var promise = function () {\n    return __awaiter(_this, void 0, void 0, function () {\n      var result;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, jsonRpcSenders.send(method, params)];\n          case 1:\n            result = _a.sent();\n            return [2 /*return*/, processResponse(result)];\n        }\n      });\n    });\n  }();\n  callWhenDone(promise, callback);\n  return promise;\n}\nfunction callAlchemyRestEndpoint(_a) {\n  var _this = this;\n  var restSender = _a.restSender,\n    path = _a.path,\n    params = _a.params,\n    _b = _a.callback,\n    callback = _b === void 0 ? noop : _b,\n    _c = _a.processResponse,\n    processResponse = _c === void 0 ? identity : _c;\n  var fixedParams = fixArrayQueryParams(params);\n  var promise = function () {\n    return __awaiter(_this, void 0, void 0, function () {\n      var result;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, restSender.sendRestPayload(path, fixedParams)];\n          case 1:\n            result = _a.sent();\n            return [2 /*return*/, processResponse(result)];\n        }\n      });\n    });\n  }();\n  callWhenDone(promise, callback);\n  return promise;\n}\nfunction processTokenBalanceResponse(rawResponse) {\n  // Convert token balance fields from hex-string to decimal-string.\n  var fixedTokenBalances = rawResponse.tokenBalances.map(function (balance) {\n    return balance.tokenBalance != null ? __assign(__assign({}, balance), {\n      tokenBalance: ABIDecoder.decodeParameter(\"uint256\", balance.tokenBalance)\n    }) : balance;\n  });\n  return __assign(__assign({}, rawResponse), {\n    tokenBalances: fixedTokenBalances\n  });\n}\n/**\n * Updates Web3's internal subscription architecture to also handle Alchemy\n * specific subscriptions. This is to handle alternate namings of the existing\n * subscription endpoints, but the officially documented interfaces are\n * specified in the AlchemyEth interface.\n */\nfunction patchSubscriptions(web3) {\n  var eth = web3.eth;\n  var oldSubscribe = eth.subscribe.bind(eth);\n  eth.subscribe = function (type) {\n    var rest = [];\n    for (var _i = 1; _i < arguments.length; _i++) {\n      rest[_i - 1] = arguments[_i];\n    }\n    if (type === \"alchemy_fullPendingTransactions\" || type === \"alchemy_newFullPendingTransactions\") {\n      console.warn(\"This method is now deprecated. Please use `alchemy_pendingTransactions` instead.\");\n      return suppressNoSubscriptionExistsWarning(function () {\n        return oldSubscribe.apply(void 0, __spreadArray([\"alchemy_newFullPendingTransactions\"], __read(rest)));\n      });\n    }\n    if (type === \"alchemy_filteredNewFullPendingTransactions\" || type === \"alchemy_filteredPendingTransactions\" || type === \"alchemy_filteredFullPendingTransactions\") {\n      console.warn(\"This method is now deprecated. Please use `alchemy_pendingTransactions` instead.\");\n      return suppressNoSubscriptionExistsWarning(function () {\n        return oldSubscribe.apply(void 0, __spreadArray([\"alchemy_filteredNewFullPendingTransactions\"], __read(rest)));\n      });\n    }\n    if (type === \"alchemy_pendingTransactions\") {\n      return suppressNoSubscriptionExistsWarning(function () {\n        return oldSubscribe.apply(void 0, __spreadArray([\"alchemy_pendingTransactions\"], __read(rest)));\n      });\n    }\n    return oldSubscribe.apply(void 0, __spreadArray([type], __read(rest)));\n  };\n}\n/**\n * VERY hacky wrapper to suppress a spurious warning when subscribing to an\n * Alchemy subscription that isn't built into Web3.\n */\nfunction suppressNoSubscriptionExistsWarning(f) {\n  var oldConsoleWarn = console.warn;\n  console.warn = function () {\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n    if (typeof args[0] === \"string\" && args[0].includes(\" doesn't exist. Subscribing anyway.\")) {\n      return;\n    }\n    return oldConsoleWarn.apply(console, args);\n  };\n  try {\n    return f();\n  } finally {\n    console.warn = oldConsoleWarn;\n  }\n}\n/**\n * Another VERY hacky monkeypatch to make sure that we can take extra parameters to certain alchemy subscriptions\n * I hate doing this, but the other option is to fork web3-core and I think for now this is better\n */\nvar subscription = web3CoreSubscriptions.subscription;\nvar oldSubscriptionPrototypeValidateArgs = subscription.prototype._validateArgs;\nsubscription.prototype._validateArgs = function (args) {\n  if ([\"alchemy_filteredNewFullPendingTransactions\", \"alchemy_filteredPendingTransactions\", \"alchemy_filteredFullPendingTransactions\", \"alchemy_pendingTransactions\"].includes(this.subscriptionMethod)) {\n    // This particular subscription type is allowed to have additional parameters\n  } else {\n    if ([\"alchemy_fullPendingTransactions\", \"alchemy_newFullPendingTransactions\"].includes(this.subscriptionMethod)) {\n      if (this.options.subscription) {\n        this.options.subscription.subscriptionName = this.subscriptionMethod;\n      }\n    }\n    var validator = oldSubscriptionPrototypeValidateArgs.bind(this);\n    validator(args);\n  }\n};\nfunction noop() {\n  // Nothing.\n}\nfunction identity(x) {\n  return x;\n}\n/**\n * Alchemy's APIs receive multivalued params via keys with `[]` at the end.\n * Update any query params whose values are arrays to match this convention.\n */\nfunction fixArrayQueryParams(params) {\n  var result = {};\n  Object.keys(params).forEach(function (key) {\n    var value = params[key];\n    var fixedKey = Array.isArray(value) ? toArrayKey(key) : key;\n    result[fixedKey] = value;\n  });\n  return result;\n}\nfunction toArrayKey(key) {\n  return endsWith(key, \"[]\") ? key : key + \"[]\";\n}\n/**\n * Like `String#endsWith`, for older environments.\n */\nfunction endsWith(s, ending) {\n  var index = s.lastIndexOf(ending);\n  return index >= 0 && index === s.length - ending.length;\n}","map":{"version":3,"mappings":"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","names":["Web3","web3CoreSubscriptions","ABIDecoder","toHex","formatBlock","callWhenDone","makeAlchemyContext","patchEnableCustomRPC","patchEthMaxPriorityFeePerGasMethod","patchEthPrivateTransactionMethods","DEFAULT_MAX_RETRIES","DEFAULT_RETRY_INTERVAL","DEFAULT_RETRY_JITTER","DEFAULT_CONTRACT_ADDRESS","createAlchemyWeb3","alchemyUrl","config","fullConfig","fillInConfigDefaults","provider","jsonRpcSenders","restSender","setWriteProvider","alchemyWeb3","setProvider","Error","getNfts","params","callback","callAlchemyRestEndpoint","path","alchemy","getTokenAllowance","method","getTokenBalances","address","contractAddresses","processResponse","processTokenBalanceResponse","getTokenMetadata","getAssetTransfers","fromBlock","undefined","toBlock","maxCount","getNftMetadata","getTransactionReceipts","patchSubscriptions","_a","_b","_c","writeProvider","getWindowProvider","_d","jsonRpcSenderMiddlewares","_e","maxRetries","_f","retryInterval","_g","retryJitter","window","ethereum","callAlchemyJsonRpcMethod","noop","identity","promise","send","result","fixedParams","fixArrayQueryParams","sendRestPayload","rawResponse","fixedTokenBalances","tokenBalances","map","balance","tokenBalance","__assign","decodeParameter","web3","oldSubscribe","eth","subscribe","bind","type","_i","rest","console","warn","suppressNoSubscriptionExistsWarning","f","oldConsoleWarn","args","includes","apply","oldSubscriptionPrototypeValidateArgs","subscription","prototype","_validateArgs","subscriptionMethod","options","subscriptionName","validator","x","Object","keys","forEach","key","value","fixedKey","Array","isArray","toArrayKey","endsWith","s","ending","index","lastIndexOf","length"],"sources":["/Users/bartosz/Documents/react-dapps/node_modules/@alch/alchemy-web3/src/index.ts"],"sourcesContent":["import Web3 from \"web3\";\nimport { Log, LogsOptions, Transaction } from \"web3-core\";\nimport web3CoreSubscriptions, { Subscription } from \"web3-core-subscriptions\";\nimport { BlockHeader, Eth, Syncing } from \"web3-eth\";\nimport ABIDecoder from \"web3-eth-abi\";\nimport { toHex } from \"web3-utils\";\nimport {\n  AssetTransfersParams,\n  AssetTransfersResponse,\n  GetNftMetadataParams,\n  GetNftMetadataResponse,\n  GetNftsParams,\n  GetNftsParamsWithoutMetadata,\n  GetNftsResponse,\n  GetNftsResponseWithoutMetadata,\n  PrivateTransactionPreferences,\n  TokenAllowanceParams,\n  TokenAllowanceResponse,\n  TokenBalancesResponse,\n  TokenMetadataResponse,\n  TransactionReceiptsParams,\n  TransactionReceiptsResponse,\n} from \"./alchemy-apis/types\";\nimport {\n  AlchemyWeb3Config,\n  FullConfig,\n  PendingTransactionsOptions,\n  PendingTransactionsOptionsHashesOnly,\n  Provider,\n  TransactionsOptions,\n  Web3Callback,\n} from \"./types\";\nimport { formatBlock } from \"./util/hex\";\nimport { JsonRpcSenders } from \"./util/jsonRpc\";\nimport { callWhenDone } from \"./util/promises\";\nimport { makeAlchemyContext } from \"./web3-adapter/alchemyContext\";\nimport { patchEnableCustomRPC } from \"./web3-adapter/customRPC\";\nimport { patchEthMaxPriorityFeePerGasMethod } from \"./web3-adapter/eth_maxPriorityFeePerGas\";\nimport { patchEthPrivateTransactionMethods } from \"./web3-adapter/eth_PrivateTransactions\";\nimport { RestPayloadSender } from \"./web3-adapter/sendRestPayload\";\n\nexport * from \"./alchemy-apis/types\";\n\nconst DEFAULT_MAX_RETRIES = 3;\nconst DEFAULT_RETRY_INTERVAL = 1000;\nconst DEFAULT_RETRY_JITTER = 250;\nconst DEFAULT_CONTRACT_ADDRESS = \"DEFAULT_TOKENS\";\n\nexport interface AlchemyWeb3 extends Web3 {\n  alchemy: AlchemyMethods;\n  eth: AlchemyEth;\n  setWriteProvider(provider: Provider | null | undefined): void;\n}\n\nexport interface AlchemyMethods {\n  getTokenAllowance(\n    params: TokenAllowanceParams,\n    callback?: Web3Callback<TokenAllowanceResponse>,\n  ): Promise<TokenAllowanceResponse>;\n  getTokenBalances(\n    address: string,\n    contractAddresses?: string[],\n    callback?: Web3Callback<TokenBalancesResponse>,\n  ): Promise<TokenBalancesResponse>;\n  getTokenMetadata(\n    address: string,\n    callback?: Web3Callback<TokenMetadataResponse>,\n  ): Promise<TokenMetadataResponse>;\n  getAssetTransfers(\n    params: AssetTransfersParams,\n    callback?: Web3Callback<AssetTransfersResponse>,\n  ): Promise<AssetTransfersResponse>;\n  getNftMetadata(\n    params: GetNftMetadataParams,\n    callback?: Web3Callback<GetNftMetadataResponse>,\n  ): Promise<GetNftMetadataResponse>;\n  getNfts(\n    params: GetNftsParamsWithoutMetadata,\n    callback?: Web3Callback<GetNftsResponseWithoutMetadata>,\n  ): Promise<GetNftsResponseWithoutMetadata>;\n  getNfts(\n    params: GetNftsParams,\n    callback?: Web3Callback<GetNftsResponse>,\n  ): Promise<GetNftsResponse>;\n  getTransactionReceipts(\n    params: TransactionReceiptsParams,\n    callback?: Web3Callback<TransactionReceiptsResponse>,\n  ): Promise<TransactionReceiptsResponse>;\n}\n\n/**\n * Same as Eth, but with `subscribe` allowing more types.\n */\nexport interface AlchemyEth extends Eth {\n  subscribe(\n    type: \"logs\",\n    options?: LogsOptions,\n    callback?: (error: Error, log: Log) => void,\n  ): Subscription<Log>;\n  subscribe(\n    type: \"syncing\",\n    callback?: (error: Error, result: Syncing) => void,\n  ): Subscription<Syncing>;\n  subscribe(\n    type: \"newBlockHeaders\",\n    callback?: (error: Error, blockHeader: BlockHeader) => void,\n  ): Subscription<BlockHeader>;\n  subscribe(\n    type: \"pendingTransactions\",\n    callback?: (error: Error, transactionHash: string) => void,\n  ): Subscription<string>;\n  subscribe(\n    type: \"alchemy_fullPendingTransactions\",\n    callback?: (error: Error, transaction: Transaction) => void,\n  ): Subscription<Transaction>;\n  subscribe(\n    type: \"alchemy_filteredFullPendingTransactions\",\n    options?: TransactionsOptions,\n    callback?: (error: Error, transaction: Transaction) => void,\n  ): Subscription<Transaction>;\n  subscribe(\n    type: \"alchemy_pendingTransactions\",\n    options?: PendingTransactionsOptionsHashesOnly,\n    callback?: (error: Error, transactionHash: string) => void,\n  ): Subscription<string>;\n  subscribe(\n    type: \"alchemy_pendingTransactions\",\n    options?: PendingTransactionsOptions,\n    callback?: (error: Error, transaction: Transaction) => void,\n  ): Subscription<Transaction>;\n  subscribe(\n    type:\n      | \"pendingTransactions\"\n      | \"logs\"\n      | \"syncing\"\n      | \"newBlockHeaders\"\n      | \"alchemy_fullPendingTransactions\"\n      | \"alchemy_filteredFullPendingTransactions\"\n      | \"alchemy_pendingTransactions\",\n    options?: null | LogsOptions | TransactionsOptions,\n    callback?: (\n      error: Error,\n      item: Log | Syncing | BlockHeader | string | Transaction,\n    ) => void,\n  ): Subscription<Log | BlockHeader | Syncing | string | Transaction>;\n  getMaxPriorityFeePerGas(\n    callback?: (error: Error, fee: string) => void,\n  ): Promise<string>;\n  sendPrivateTransaction(\n    tx: string,\n    maxBlockNumber?: string,\n    preferences?: PrivateTransactionPreferences,\n    callback?: (error: Error, hash: string) => void,\n  ): Promise<string>;\n  cancelPrivateTransaction(\n    txHash: string,\n    callback?: (error: Error, result: boolean) => void,\n  ): Promise<boolean>;\n}\n\ninterface EthereumWindow extends Window {\n  ethereum?: any;\n}\n\ndeclare const window: EthereumWindow;\n\nexport function createAlchemyWeb3(\n  alchemyUrl: string,\n  config?: AlchemyWeb3Config,\n): AlchemyWeb3 {\n  const fullConfig = fillInConfigDefaults(config);\n  const { provider, jsonRpcSenders, restSender, setWriteProvider } =\n    makeAlchemyContext(alchemyUrl, fullConfig);\n  const alchemyWeb3 = new Web3(provider) as AlchemyWeb3;\n  alchemyWeb3.setProvider = () => {\n    throw new Error(\n      \"setProvider is not supported in Alchemy Web3. To change the provider used for writes, use setWriteProvider() instead.\",\n    );\n  };\n  alchemyWeb3.setWriteProvider = setWriteProvider;\n\n  // Define function separately in order to allow for overloads.\n  function getNfts(\n    params: GetNftsParamsWithoutMetadata,\n    callback?: Web3Callback<GetNftsResponseWithoutMetadata>,\n  ): Promise<GetNftsResponseWithoutMetadata>;\n  function getNfts(\n    params: GetNftsParams,\n    callback?: Web3Callback<GetNftsResponse>,\n  ): Promise<GetNftsResponse>;\n  function getNfts(\n    params: GetNftsParams | GetNftsParamsWithoutMetadata,\n    callback?:\n      | Web3Callback<GetNftsResponseWithoutMetadata>\n      | Web3Callback<GetNftsResponse>,\n  ): Promise<GetNftsResponse | GetNftsResponseWithoutMetadata> {\n    return callAlchemyRestEndpoint({\n      restSender,\n      callback,\n      params,\n      path: \"getNFTs\",\n    });\n  }\n\n  alchemyWeb3.alchemy = {\n    getTokenAllowance: (params: TokenAllowanceParams, callback) =>\n      callAlchemyJsonRpcMethod({\n        jsonRpcSenders,\n        callback,\n        method: \"alchemy_getTokenAllowance\",\n        params: [params],\n      }),\n    getTokenBalances: (address, contractAddresses, callback) =>\n      callAlchemyJsonRpcMethod({\n        jsonRpcSenders,\n        callback,\n        method: \"alchemy_getTokenBalances\",\n        params: [address, contractAddresses || DEFAULT_CONTRACT_ADDRESS],\n        processResponse: processTokenBalanceResponse,\n      }),\n    getTokenMetadata: (address, callback) =>\n      callAlchemyJsonRpcMethod({\n        jsonRpcSenders,\n        callback,\n        params: [address],\n        method: \"alchemy_getTokenMetadata\",\n      }),\n    getAssetTransfers: (params: AssetTransfersParams, callback) =>\n      callAlchemyJsonRpcMethod({\n        jsonRpcSenders,\n        callback,\n        params: [\n          {\n            ...params,\n            fromBlock:\n              params.fromBlock != null\n                ? formatBlock(params.fromBlock)\n                : undefined,\n            toBlock:\n              params.toBlock != null ? formatBlock(params.toBlock) : undefined,\n            maxCount:\n              params.maxCount != null ? toHex(params.maxCount) : undefined,\n          },\n        ],\n        method: \"alchemy_getAssetTransfers\",\n      }),\n    getNftMetadata: (params: GetNftMetadataParams, callback) =>\n      callAlchemyRestEndpoint({\n        restSender,\n        callback,\n        params,\n        path: \"getNFTMetadata\",\n      }),\n    getNfts,\n    getTransactionReceipts: (params: TransactionReceiptsParams, callback) =>\n      callAlchemyJsonRpcMethod({\n        jsonRpcSenders,\n        callback,\n        method: \"alchemy_getTransactionReceipts\",\n        params: [params],\n      }),\n  };\n  patchSubscriptions(alchemyWeb3);\n  patchEnableCustomRPC(alchemyWeb3);\n  patchEthMaxPriorityFeePerGasMethod(alchemyWeb3);\n  patchEthPrivateTransactionMethods(alchemyWeb3);\n  return alchemyWeb3;\n}\n\nfunction fillInConfigDefaults({\n  writeProvider = getWindowProvider(),\n  jsonRpcSenderMiddlewares = [],\n  maxRetries = DEFAULT_MAX_RETRIES,\n  retryInterval = DEFAULT_RETRY_INTERVAL,\n  retryJitter = DEFAULT_RETRY_JITTER,\n}: AlchemyWeb3Config = {}): FullConfig {\n  return {\n    writeProvider,\n    jsonRpcSenderMiddlewares,\n    maxRetries,\n    retryInterval,\n    retryJitter,\n  };\n}\n\nfunction getWindowProvider(): Provider | null {\n  return typeof window !== \"undefined\" ? window.ethereum : null;\n}\n\ninterface CallAlchemyJsonRpcMethodParams<T> {\n  jsonRpcSenders: JsonRpcSenders;\n  method: string;\n  params: any[];\n  callback?: Web3Callback<T>;\n  processResponse?(response: any): T;\n}\n\ninterface CallAlchemyRestEndpoint<T> {\n  restSender: RestPayloadSender;\n  path: string;\n  params: Record<string, any>;\n  callback?: Web3Callback<T>;\n  processResponse?(response: any): T;\n}\n\nfunction callAlchemyJsonRpcMethod<T>({\n  jsonRpcSenders,\n  method,\n  params,\n  callback = noop,\n  processResponse = identity,\n}: CallAlchemyJsonRpcMethodParams<T>): Promise<T> {\n  const promise = (async () => {\n    const result = await jsonRpcSenders.send(method, params);\n    return processResponse(result);\n  })();\n  callWhenDone(promise, callback);\n  return promise;\n}\n\nfunction callAlchemyRestEndpoint<T>({\n  restSender,\n  path,\n  params,\n  callback = noop,\n  processResponse = identity,\n}: CallAlchemyRestEndpoint<T>): Promise<T> {\n  const fixedParams = fixArrayQueryParams(params);\n  const promise = (async () => {\n    const result = await restSender.sendRestPayload(path, fixedParams);\n    return processResponse(result);\n  })();\n  callWhenDone(promise, callback);\n  return promise;\n}\n\nfunction processTokenBalanceResponse(\n  rawResponse: TokenBalancesResponse,\n): TokenBalancesResponse {\n  // Convert token balance fields from hex-string to decimal-string.\n  const fixedTokenBalances = rawResponse.tokenBalances.map((balance) =>\n    balance.tokenBalance != null\n      ? {\n          ...balance,\n          tokenBalance: ABIDecoder.decodeParameter(\n            \"uint256\",\n            balance.tokenBalance,\n          ),\n        }\n      : balance,\n  );\n  return { ...rawResponse, tokenBalances: fixedTokenBalances };\n}\n\n/**\n * Updates Web3's internal subscription architecture to also handle Alchemy\n * specific subscriptions. This is to handle alternate namings of the existing\n * subscription endpoints, but the officially documented interfaces are\n * specified in the AlchemyEth interface.\n */\nfunction patchSubscriptions(web3: Web3): void {\n  const { eth } = web3;\n  const oldSubscribe = eth.subscribe.bind(eth);\n  eth.subscribe = ((type: string, ...rest: any[]) => {\n    if (\n      type === \"alchemy_fullPendingTransactions\" ||\n      type === \"alchemy_newFullPendingTransactions\"\n    ) {\n      console.warn(\n        \"This method is now deprecated. Please use `alchemy_pendingTransactions` instead.\",\n      );\n      return suppressNoSubscriptionExistsWarning(() =>\n        oldSubscribe(\"alchemy_newFullPendingTransactions\" as any, ...rest),\n      );\n    }\n    if (\n      type === \"alchemy_filteredNewFullPendingTransactions\" ||\n      type === \"alchemy_filteredPendingTransactions\" ||\n      type === \"alchemy_filteredFullPendingTransactions\"\n    ) {\n      console.warn(\n        \"This method is now deprecated. Please use `alchemy_pendingTransactions` instead.\",\n      );\n      return suppressNoSubscriptionExistsWarning(() =>\n        oldSubscribe(\n          \"alchemy_filteredNewFullPendingTransactions\" as any,\n          ...rest,\n        ),\n      );\n    }\n\n    if (type === \"alchemy_pendingTransactions\") {\n      return suppressNoSubscriptionExistsWarning(() =>\n        oldSubscribe(\"alchemy_pendingTransactions\" as any, ...rest),\n      );\n    }\n    return oldSubscribe(type as any, ...rest);\n  }) as any;\n}\n\n/**\n * VERY hacky wrapper to suppress a spurious warning when subscribing to an\n * Alchemy subscription that isn't built into Web3.\n */\nfunction suppressNoSubscriptionExistsWarning<T>(f: () => T): T {\n  const oldConsoleWarn = console.warn;\n  console.warn = (...args: unknown[]) => {\n    if (\n      typeof args[0] === \"string\" &&\n      args[0].includes(\" doesn't exist. Subscribing anyway.\")\n    ) {\n      return;\n    }\n    return oldConsoleWarn.apply(console, args);\n  };\n  try {\n    return f();\n  } finally {\n    console.warn = oldConsoleWarn;\n  }\n}\n\n/**\n * Another VERY hacky monkeypatch to make sure that we can take extra parameters to certain alchemy subscriptions\n * I hate doing this, but the other option is to fork web3-core and I think for now this is better\n */\nconst { subscription } = web3CoreSubscriptions as any;\nconst oldSubscriptionPrototypeValidateArgs =\n  subscription.prototype._validateArgs;\nsubscription.prototype._validateArgs = function (args: any) {\n  if (\n    [\n      \"alchemy_filteredNewFullPendingTransactions\",\n      \"alchemy_filteredPendingTransactions\",\n      \"alchemy_filteredFullPendingTransactions\",\n      \"alchemy_pendingTransactions\",\n    ].includes(this.subscriptionMethod)\n  ) {\n    // This particular subscription type is allowed to have additional parameters\n  } else {\n    if (\n      [\n        \"alchemy_fullPendingTransactions\",\n        \"alchemy_newFullPendingTransactions\",\n      ].includes(this.subscriptionMethod)\n    ) {\n      if (this.options.subscription) {\n        this.options.subscription.subscriptionName = this.subscriptionMethod;\n      }\n    }\n\n    const validator = oldSubscriptionPrototypeValidateArgs.bind(this);\n    validator(args);\n  }\n};\n\nfunction noop(): void {\n  // Nothing.\n}\n\nfunction identity<T>(x: T): T {\n  return x;\n}\n\n/**\n * Alchemy's APIs receive multivalued params via keys with `[]` at the end.\n * Update any query params whose values are arrays to match this convention.\n */\nfunction fixArrayQueryParams(params: Record<string, any>): Record<string, any> {\n  const result: Record<string, any> = {};\n  Object.keys(params).forEach((key) => {\n    const value = params[key];\n    const fixedKey = Array.isArray(value) ? toArrayKey(key) : key;\n    result[fixedKey] = value;\n  });\n  return result;\n}\n\nfunction toArrayKey(key: string): string {\n  return endsWith(key, \"[]\") ? key : `${key}[]`;\n}\n\n/**\n * Like `String#endsWith`, for older environments.\n */\nfunction endsWith(s: string, ending: string): boolean {\n  const index = s.lastIndexOf(ending);\n  return index >= 0 && index === s.length - ending.length;\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}