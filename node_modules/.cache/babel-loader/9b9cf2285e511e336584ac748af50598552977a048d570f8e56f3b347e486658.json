{"ast":null,"code":"import { __awaiter, __generator } from \"tslib\";\nimport fetchPonyfill from \"fetch-ponyfill\";\nimport { VERSION } from \"../version\";\nvar _a = fetchPonyfill(),\n  fetch = _a.fetch,\n  Headers = _a.Headers;\nvar ALCHEMY_HEADERS = new Headers({\n  Accept: \"application/json\",\n  \"Content-Type\": \"application/json\",\n  \"Alchemy-Web3-Version\": VERSION\n});\nvar RATE_LIMIT_STATUS = 429;\nexport function makeJsonRpcHttpSender(url) {\n  var _this = this;\n  return function (request) {\n    return __awaiter(_this, void 0, void 0, function () {\n      var response, status, _a;\n      var _b, _c;\n      var _d;\n      return __generator(this, function (_e) {\n        switch (_e.label) {\n          case 0:\n            return [4 /*yield*/, fetch(url, {\n              method: \"POST\",\n              headers: ALCHEMY_HEADERS,\n              body: JSON.stringify(request)\n            })];\n          case 1:\n            response = _e.sent();\n            status = response.status;\n            _a = status;\n            switch (_a) {\n              case 200:\n                return [3 /*break*/, 2];\n              case RATE_LIMIT_STATUS:\n                return [3 /*break*/, 4];\n              case 0:\n                return [3 /*break*/, 5];\n            }\n            return [3 /*break*/, 6];\n          case 2:\n            _b = {\n              type: \"jsonrpc\"\n            };\n            return [4 /*yield*/, response.json()];\n          case 3:\n            return [2 /*return*/, (_b.response = _e.sent(), _b)];\n          case 4:\n            return [2 /*return*/, {\n              type: \"rateLimit\"\n            }];\n          case 5:\n            return [2 /*return*/, {\n              type: \"networkError\",\n              status: 0,\n              message: \"Connection failed.\"\n            }];\n          case 6:\n            _c = {\n              status: status,\n              type: \"networkError\"\n            };\n            return [4 /*yield*/, response.json()];\n          case 7:\n            return [2 /*return*/, (_c.message = (_d = _e.sent().error) === null || _d === void 0 ? void 0 : _d.message, _c)];\n        }\n      });\n    });\n  };\n}","map":{"version":3,"mappings":";AAAA,OAAOA,aAAa,MAAM,gBAAgB;AAC1C,SAASC,OAAO,QAAQ,YAAY;AAG9B,SAAqBD,aAAa,EAAE;EAAlCE,KAAK;EAAEC,OAAO,aAAoB;AAE1C,IAAMC,eAAe,GAAG,IAAID,OAAO,CAAC;EAClCE,MAAM,EAAE,kBAAkB;EAC1B,cAAc,EAAE,kBAAkB;EAClC,sBAAsB,EAAEJ;CACzB,CAAC;AACF,IAAMK,iBAAiB,GAAG,GAAG;AAE7B,OAAM,SAAUC,qBAAqB,CAACC,GAAW;EAAjD;EACE,OAAO,UAAOC,OAAO;IAAA;;;;;;;YACF,qBAAMP,KAAK,CAACM,GAAG,EAAE;cAChCE,MAAM,EAAE,MAAM;cACdC,OAAO,EAAEP,eAAe;cACxBQ,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACL,OAAO;aAC7B,CAAC;;YAJIM,QAAQ,GAAGC,SAIf;YACMC,MAAM,GAAKF,QAAQ,OAAb;YACNG,WAAM;;mBACP,GAAG;gBAAH;mBAEAZ,iBAAiB;gBAAjB;mBAEA,CAAC;gBAAD;YAAC;;;;cAHKa,IAAI,EAAE;YAAS;YAAY,qBAAMJ,QAAQ,CAACK,IAAI,EAAE;;YAAzD,uBAA0BC,WAAQ,GAAEL,SAAqB;;YAEzD,sBAAO;cAAEG,IAAI,EAAE;YAAW,CAAE;;YAE5B,sBAAO;cACLA,IAAI,EAAE,cAAc;cACpBF,MAAM,EAAE,CAAC;cACTK,OAAO,EAAE;aACV;;;cAGCL,MAAM;cACNE,IAAI,EAAE;;YACI,qBAAMJ,QAAQ,CAACK,IAAI,EAAE;;YAHjC,uBAGEG,UAAO,GAAE,MAACP,SAAqB,CAAEQ,KAAK,0CAAEF,OAAO;QAC/C;;;GAEP;AACH","names":["fetchPonyfill","VERSION","fetch","Headers","ALCHEMY_HEADERS","Accept","RATE_LIMIT_STATUS","makeJsonRpcHttpSender","url","request","method","headers","body","JSON","stringify","response","_e","status","_a","type","json","_b","message","_c","error"],"sources":["/Users/bartosz/Documents/react-dapps/node_modules/@alch/alchemy-web3/src/web3-adapter/alchemySendHttp.ts"],"sourcesContent":["import fetchPonyfill from \"fetch-ponyfill\";\nimport { VERSION } from \"../version\";\nimport { AlchemySendJsonRpcFunction } from \"./alchemySend\";\n\nconst { fetch, Headers } = fetchPonyfill();\n\nconst ALCHEMY_HEADERS = new Headers({\n  Accept: \"application/json\",\n  \"Content-Type\": \"application/json\",\n  \"Alchemy-Web3-Version\": VERSION,\n});\nconst RATE_LIMIT_STATUS = 429;\n\nexport function makeJsonRpcHttpSender(url: string): AlchemySendJsonRpcFunction {\n  return async (request) => {\n    const response = await fetch(url, {\n      method: \"POST\",\n      headers: ALCHEMY_HEADERS,\n      body: JSON.stringify(request),\n    });\n    const { status } = response;\n    switch (status) {\n      case 200:\n        return { type: \"jsonrpc\", response: await response.json() };\n      case RATE_LIMIT_STATUS:\n        return { type: \"rateLimit\" };\n      case 0:\n        return {\n          type: \"networkError\",\n          status: 0,\n          message: \"Connection failed.\",\n        };\n      default:\n        return {\n          status,\n          type: \"networkError\",\n          message: (await response.json()).error?.message,\n        };\n    }\n  };\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}