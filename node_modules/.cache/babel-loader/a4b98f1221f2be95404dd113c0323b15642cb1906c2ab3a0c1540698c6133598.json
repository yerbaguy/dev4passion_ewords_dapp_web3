{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar SHOULD_RECONNECT_FALSE_MESSAGE = \"Provided shouldReconnect() returned false. Closing permanently.\";\nvar SHOULD_RECONNECT_PROMISE_FALSE_MESSAGE = \"Provided shouldReconnect() resolved to false. Closing permanently.\";\nvar SturdyWebSocket = /** @class */function () {\n  function SturdyWebSocket(url, protocolsOrOptions, options) {\n    if (options === void 0) {\n      options = {};\n    }\n    this.url = url;\n    this.onclose = null;\n    this.onerror = null;\n    this.onmessage = null;\n    this.onopen = null;\n    this.ondown = null;\n    this.onreopen = null;\n    this.CONNECTING = SturdyWebSocket.CONNECTING;\n    this.OPEN = SturdyWebSocket.OPEN;\n    this.CLOSING = SturdyWebSocket.CLOSING;\n    this.CLOSED = SturdyWebSocket.CLOSED;\n    this.hasBeenOpened = false;\n    this.isClosed = false;\n    this.messageBuffer = [];\n    this.nextRetryTime = 0;\n    this.reconnectCount = 0;\n    this.lastKnownExtensions = \"\";\n    this.lastKnownProtocol = \"\";\n    this.listeners = {};\n    if (protocolsOrOptions == null || typeof protocolsOrOptions === \"string\" || Array.isArray(protocolsOrOptions)) {\n      this.protocols = protocolsOrOptions;\n    } else {\n      options = protocolsOrOptions;\n    }\n    this.options = applyDefaultOptions(options);\n    if (!this.options.wsConstructor) {\n      if (typeof WebSocket !== \"undefined\") {\n        this.options.wsConstructor = WebSocket;\n      } else {\n        throw new Error(\"WebSocket not present in global scope and no \" + \"wsConstructor option was provided.\");\n      }\n    }\n    this.openNewWebSocket();\n  }\n  Object.defineProperty(SturdyWebSocket.prototype, \"binaryType\", {\n    get: function () {\n      return this.binaryTypeInternal || \"blob\";\n    },\n    set: function (binaryType) {\n      this.binaryTypeInternal = binaryType;\n      if (this.ws) {\n        this.ws.binaryType = binaryType;\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(SturdyWebSocket.prototype, \"bufferedAmount\", {\n    get: function () {\n      var sum = this.ws ? this.ws.bufferedAmount : 0;\n      var hasUnknownAmount = false;\n      this.messageBuffer.forEach(function (data) {\n        var byteLength = getDataByteLength(data);\n        if (byteLength != null) {\n          sum += byteLength;\n        } else {\n          hasUnknownAmount = true;\n        }\n      });\n      if (hasUnknownAmount) {\n        this.debugLog(\"Some buffered data had unknown length. bufferedAmount()\" + \" return value may be below the correct amount.\");\n      }\n      return sum;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(SturdyWebSocket.prototype, \"extensions\", {\n    get: function () {\n      return this.ws ? this.ws.extensions : this.lastKnownExtensions;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(SturdyWebSocket.prototype, \"protocol\", {\n    get: function () {\n      return this.ws ? this.ws.protocol : this.lastKnownProtocol;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(SturdyWebSocket.prototype, \"readyState\", {\n    get: function () {\n      return this.isClosed ? SturdyWebSocket.CLOSED : SturdyWebSocket.OPEN;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  SturdyWebSocket.prototype.close = function (code, reason) {\n    this.disposeSocket(code, reason);\n    this.shutdown();\n    this.debugLog(\"WebSocket permanently closed by client.\");\n  };\n  SturdyWebSocket.prototype.send = function (data) {\n    if (this.isClosed) {\n      throw new Error(\"WebSocket is already in CLOSING or CLOSED state.\");\n    } else if (this.ws && this.ws.readyState === this.OPEN) {\n      this.ws.send(data);\n    } else {\n      this.messageBuffer.push(data);\n    }\n  };\n  SturdyWebSocket.prototype.reconnect = function () {\n    if (this.isClosed) {\n      throw new Error(\"Cannot call reconnect() on socket which is permanently closed.\");\n    }\n    this.disposeSocket(1000, \"Client requested reconnect.\");\n    this.handleClose(undefined);\n  };\n  SturdyWebSocket.prototype.addEventListener = function (type, listener) {\n    if (!this.listeners[type]) {\n      this.listeners[type] = [];\n    }\n    this.listeners[type].push(listener);\n  };\n  SturdyWebSocket.prototype.dispatchEvent = function (event) {\n    return this.dispatchEventOfType(event.type, event);\n  };\n  SturdyWebSocket.prototype.removeEventListener = function (type, listener) {\n    if (this.listeners[type]) {\n      this.listeners[type] = this.listeners[type].filter(function (l) {\n        return l !== listener;\n      });\n    }\n  };\n  SturdyWebSocket.prototype.openNewWebSocket = function () {\n    var _this = this;\n    if (this.isClosed) {\n      return;\n    }\n    var _a = this.options,\n      connectTimeout = _a.connectTimeout,\n      wsConstructor = _a.wsConstructor;\n    this.debugLog(\"Opening new WebSocket to \" + this.url + \".\");\n    var ws = new wsConstructor(this.url, this.protocols);\n    ws.onclose = function (event) {\n      return _this.handleClose(event);\n    };\n    ws.onerror = function (event) {\n      return _this.handleError(event);\n    };\n    ws.onmessage = function (event) {\n      return _this.handleMessage(event);\n    };\n    ws.onopen = function (event) {\n      return _this.handleOpen(event);\n    };\n    this.connectTimeoutId = setTimeout(function () {\n      // If this is running, we still haven't opened the websocket.\n      // Kill it so we can try again.\n      _this.clearConnectTimeout();\n      _this.disposeSocket();\n      _this.handleClose(undefined);\n    }, connectTimeout);\n    this.ws = ws;\n  };\n  SturdyWebSocket.prototype.handleOpen = function (event) {\n    var _this = this;\n    if (!this.ws || this.isClosed) {\n      return;\n    }\n    var allClearResetTime = this.options.allClearResetTime;\n    this.debugLog(\"WebSocket opened.\");\n    if (this.binaryTypeInternal != null) {\n      this.ws.binaryType = this.binaryTypeInternal;\n    } else {\n      this.binaryTypeInternal = this.ws.binaryType;\n    }\n    this.clearConnectTimeout();\n    if (this.hasBeenOpened) {\n      this.dispatchEventOfType(\"reopen\", event);\n    } else {\n      this.dispatchEventOfType(\"open\", event);\n      this.hasBeenOpened = true;\n    }\n    this.messageBuffer.forEach(function (message) {\n      return _this.send(message);\n    });\n    this.messageBuffer = [];\n    this.allClearTimeoutId = setTimeout(function () {\n      _this.clearAllClearTimeout();\n      _this.nextRetryTime = 0;\n      _this.reconnectCount = 0;\n      var openTime = allClearResetTime / 1000 | 0;\n      _this.debugLog(\"WebSocket remained open for \" + openTime + \" seconds. Resetting\" + \" retry time and count.\");\n    }, allClearResetTime);\n  };\n  SturdyWebSocket.prototype.handleMessage = function (event) {\n    if (this.isClosed) {\n      return;\n    }\n    this.dispatchEventOfType(\"message\", event);\n  };\n  SturdyWebSocket.prototype.handleClose = function (event) {\n    var _this = this;\n    if (this.isClosed) {\n      return;\n    }\n    var _a = this.options,\n      maxReconnectAttempts = _a.maxReconnectAttempts,\n      shouldReconnect = _a.shouldReconnect;\n    this.clearConnectTimeout();\n    this.clearAllClearTimeout();\n    if (this.ws) {\n      this.lastKnownExtensions = this.ws.extensions;\n      this.lastKnownProtocol = this.ws.protocol;\n      this.disposeSocket();\n    }\n    this.dispatchEventOfType(\"down\", event);\n    if (this.reconnectCount >= maxReconnectAttempts) {\n      this.stopReconnecting(event, this.getTooManyFailedReconnectsMessage());\n      return;\n    }\n    var willReconnect = !event || shouldReconnect(event);\n    if (typeof willReconnect === \"boolean\") {\n      this.handleWillReconnect(willReconnect, event, SHOULD_RECONNECT_FALSE_MESSAGE);\n    } else {\n      willReconnect.then(function (willReconnectResolved) {\n        if (_this.isClosed) {\n          return;\n        }\n        _this.handleWillReconnect(willReconnectResolved, event, SHOULD_RECONNECT_PROMISE_FALSE_MESSAGE);\n      });\n    }\n  };\n  SturdyWebSocket.prototype.handleError = function (event) {\n    this.dispatchEventOfType(\"error\", event);\n    this.debugLog(\"WebSocket encountered an error.\");\n  };\n  SturdyWebSocket.prototype.handleWillReconnect = function (willReconnect, event, denialReason) {\n    if (willReconnect) {\n      this.reestablishConnection();\n    } else {\n      this.stopReconnecting(event, denialReason);\n    }\n  };\n  SturdyWebSocket.prototype.reestablishConnection = function () {\n    var _this = this;\n    var _a = this.options,\n      minReconnectDelay = _a.minReconnectDelay,\n      maxReconnectDelay = _a.maxReconnectDelay,\n      reconnectBackoffFactor = _a.reconnectBackoffFactor;\n    this.reconnectCount++;\n    var retryTime = this.nextRetryTime;\n    this.nextRetryTime = Math.max(minReconnectDelay, Math.min(this.nextRetryTime * reconnectBackoffFactor, maxReconnectDelay));\n    setTimeout(function () {\n      return _this.openNewWebSocket();\n    }, retryTime);\n    var retryTimeSeconds = retryTime / 1000 | 0;\n    this.debugLog(\"WebSocket was closed. Re-opening in \" + retryTimeSeconds + \" seconds.\");\n  };\n  SturdyWebSocket.prototype.stopReconnecting = function (event, debugReason) {\n    this.debugLog(debugReason);\n    this.shutdown();\n    if (event) {\n      this.dispatchEventOfType(\"close\", event);\n    }\n  };\n  SturdyWebSocket.prototype.shutdown = function () {\n    this.isClosed = true;\n    this.clearAllTimeouts();\n    this.messageBuffer = [];\n    this.disposeSocket();\n  };\n  SturdyWebSocket.prototype.disposeSocket = function (closeCode, reason) {\n    if (!this.ws) {\n      return;\n    }\n    // Use noop handlers instead of null because some WebSocket\n    // implementations, such as the one from isomorphic-ws, raise a stink on\n    // unhandled events.\n    this.ws.onerror = noop;\n    this.ws.onclose = noop;\n    this.ws.onmessage = noop;\n    this.ws.onopen = noop;\n    this.ws.close(closeCode, reason);\n    this.ws = undefined;\n  };\n  SturdyWebSocket.prototype.clearAllTimeouts = function () {\n    this.clearConnectTimeout();\n    this.clearAllClearTimeout();\n  };\n  SturdyWebSocket.prototype.clearConnectTimeout = function () {\n    if (this.connectTimeoutId != null) {\n      clearTimeout(this.connectTimeoutId);\n      this.connectTimeoutId = undefined;\n    }\n  };\n  SturdyWebSocket.prototype.clearAllClearTimeout = function () {\n    if (this.allClearTimeoutId != null) {\n      clearTimeout(this.allClearTimeoutId);\n      this.allClearTimeoutId = undefined;\n    }\n  };\n  SturdyWebSocket.prototype.dispatchEventOfType = function (type, event) {\n    var _this = this;\n    switch (type) {\n      case \"close\":\n        if (this.onclose) {\n          this.onclose(event);\n        }\n        break;\n      case \"error\":\n        if (this.onerror) {\n          this.onerror(event);\n        }\n        break;\n      case \"message\":\n        if (this.onmessage) {\n          this.onmessage(event);\n        }\n        break;\n      case \"open\":\n        if (this.onopen) {\n          this.onopen(event);\n        }\n        break;\n      case \"down\":\n        if (this.ondown) {\n          this.ondown(event);\n        }\n        break;\n      case \"reopen\":\n        if (this.onreopen) {\n          this.onreopen(event);\n        }\n        break;\n    }\n    if (type in this.listeners) {\n      this.listeners[type].slice().forEach(function (listener) {\n        return _this.callListener(listener, event);\n      });\n    }\n    return !event || !event.defaultPrevented;\n  };\n  SturdyWebSocket.prototype.callListener = function (listener, event) {\n    if (typeof listener === \"function\") {\n      listener.call(this, event);\n    } else {\n      listener.handleEvent.call(this, event);\n    }\n  };\n  SturdyWebSocket.prototype.debugLog = function (message) {\n    if (this.options.debug) {\n      // tslint:disable-next-line:no-console\n      console.log(message);\n    }\n  };\n  SturdyWebSocket.prototype.getTooManyFailedReconnectsMessage = function () {\n    var maxReconnectAttempts = this.options.maxReconnectAttempts;\n    return \"Failed to reconnect after \" + maxReconnectAttempts + \" \" + pluralize(\"attempt\", maxReconnectAttempts) + \". Closing permanently.\";\n  };\n  SturdyWebSocket.DEFAULT_OPTIONS = {\n    allClearResetTime: 5000,\n    connectTimeout: 5000,\n    debug: false,\n    minReconnectDelay: 1000,\n    maxReconnectDelay: 30000,\n    maxReconnectAttempts: Number.POSITIVE_INFINITY,\n    reconnectBackoffFactor: 1.5,\n    shouldReconnect: function () {\n      return true;\n    },\n    wsConstructor: undefined\n  };\n  SturdyWebSocket.CONNECTING = 0;\n  SturdyWebSocket.OPEN = 1;\n  SturdyWebSocket.CLOSING = 2;\n  SturdyWebSocket.CLOSED = 3;\n  return SturdyWebSocket;\n}();\nexports.default = SturdyWebSocket;\nfunction applyDefaultOptions(options) {\n  var result = {};\n  Object.keys(SturdyWebSocket.DEFAULT_OPTIONS).forEach(function (key) {\n    var value = options[key];\n    result[key] = value === undefined ? SturdyWebSocket.DEFAULT_OPTIONS[key] : value;\n  });\n  return result;\n}\nfunction getDataByteLength(data) {\n  if (typeof data === \"string\") {\n    // UTF-16 strings use two bytes per character.\n    return 2 * data.length;\n  } else if (data instanceof ArrayBuffer) {\n    return data.byteLength;\n  } else if (data instanceof Blob) {\n    return data.size;\n  } else {\n    return undefined;\n  }\n}\nfunction pluralize(s, n) {\n  return n === 1 ? s : s + \"s\";\n}\nfunction noop() {\n  // Nothing.\n}","map":{"version":3,"mappings":"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","names":["SHOULD_RECONNECT_FALSE_MESSAGE","SHOULD_RECONNECT_PROMISE_FALSE_MESSAGE","url","protocolsOrOptions","options","SturdyWebSocket","CONNECTING","OPEN","CLOSING","CLOSED","Array","isArray","protocols","applyDefaultOptions","wsConstructor","WebSocket","Error","openNewWebSocket","Object","binaryTypeInternal","binaryType","ws","sum","bufferedAmount","hasUnknownAmount","messageBuffer","forEach","byteLength","getDataByteLength","data","debugLog","extensions","lastKnownExtensions","protocol","lastKnownProtocol","isClosed","code","reason","disposeSocket","shutdown","readyState","send","push","handleClose","undefined","type","listener","listeners","event","dispatchEventOfType","filter","connectTimeout","onclose","onerror","handleError","onmessage","handleMessage","onopen","handleOpen","connectTimeoutId","setTimeout","_this","clearConnectTimeout","hasBeenOpened","message","allClearTimeoutId","clearAllClearTimeout","nextRetryTime","reconnectCount","openTime","allClearResetTime","maxReconnectAttempts","shouldReconnect","stopReconnecting","getTooManyFailedReconnectsMessage","willReconnect","handleWillReconnect","then","willReconnectResolved","denialReason","reestablishConnection","minReconnectDelay","maxReconnectDelay","reconnectBackoffFactor","retryTime","Math","max","min","retryTimeSeconds","debugReason","clearAllTimeouts","closeCode","noop","close","clearTimeout","ondown","onreopen","slice","callListener","defaultPrevented","call","handleEvent","debug","console","log","pluralize","Number","POSITIVE_INFINITY","result","keys","DEFAULT_OPTIONS","value","key","length","ArrayBuffer","Blob","size","s","n"],"sources":["/Users/bartosz/Documents/react-dapps/dev4passion_eword_web3/client/node_modules/sturdy-websocket/src/index.ts"],"sourcesContent":["export interface Options {\n    allClearResetTime?: number;\n    connectTimeout?: number;\n    debug?: boolean;\n    minReconnectDelay?: number;\n    maxReconnectDelay?: number;\n    maxReconnectAttempts?: number;\n    reconnectBackoffFactor?: number;\n    wsConstructor?: new (url: string, protocols?: string | string[]) => any;\n    shouldReconnect?(closeEvent: CloseEvent): boolean | Promise<boolean>;\n}\n\ninterface SturdyWebSocketEventMap extends WebSocketEventMap {\n    down: CloseEvent;\n    reopen: Event;\n}\n\ntype WebSocketListener<K extends keyof SturdyWebSocketEventMap> = (\n    this: WebSocket,\n    event: SturdyWebSocketEventMap[K],\n) => any;\n\ntype WebSocketListeners = {\n    [K in keyof SturdyWebSocketEventMap]?: Array<WebSocketListener<K>>;\n} & {\n    [key: string]: EventListenerOrEventListenerObject[];\n};\n\nconst SHOULD_RECONNECT_FALSE_MESSAGE =\n    \"Provided shouldReconnect() returned false. Closing permanently.\";\nconst SHOULD_RECONNECT_PROMISE_FALSE_MESSAGE =\n    \"Provided shouldReconnect() resolved to false. Closing permanently.\";\n\nexport default class SturdyWebSocket implements WebSocket {\n    public static readonly DEFAULT_OPTIONS: Required<Options> = {\n        allClearResetTime: 5000,\n        connectTimeout: 5000,\n        debug: false,\n        minReconnectDelay: 1000,\n        maxReconnectDelay: 30000,\n        maxReconnectAttempts: Number.POSITIVE_INFINITY,\n        reconnectBackoffFactor: 1.5,\n        shouldReconnect: () => true,\n        wsConstructor: undefined!,\n    };\n\n    public static readonly CONNECTING = 0;\n    public static readonly OPEN = 1;\n    public static readonly CLOSING = 2;\n    public static readonly CLOSED = 3;\n\n    public onclose: ((event: CloseEvent) => void) | null = null;\n    public onerror: ((event: Event) => void) | null = null;\n    public onmessage: ((event: MessageEvent) => void) | null = null;\n    public onopen: ((event: Event) => void) | null = null;\n    public ondown: ((event: CloseEvent | undefined) => void) | null = null;\n    public onreopen: ((event: Event) => void) | null = null;\n    public readonly CONNECTING = SturdyWebSocket.CONNECTING;\n    public readonly OPEN = SturdyWebSocket.OPEN;\n    public readonly CLOSING = SturdyWebSocket.CLOSING;\n    public readonly CLOSED = SturdyWebSocket.CLOSED;\n\n    private readonly protocols?: string | string[];\n    private readonly options: Required<Options>;\n    private ws?: WebSocket;\n    private hasBeenOpened = false;\n    private isClosed = false;\n    private messageBuffer: any[] = [];\n    private nextRetryTime: number = 0;\n    private reconnectCount = 0;\n    private allClearTimeoutId?: any;\n    private connectTimeoutId?: any;\n    private binaryTypeInternal?: BinaryType;\n    private lastKnownExtensions = \"\";\n    private lastKnownProtocol = \"\";\n    private readonly listeners: WebSocketListeners = {};\n\n    constructor(url: string, options?: Options);\n    constructor(\n        url: string,\n        protocols: string | string[] | undefined,\n        options?: Options,\n    );\n    constructor(\n        public readonly url: string,\n        protocolsOrOptions?: string | string[] | Options,\n        options: Options = {},\n    ) {\n        if (\n            protocolsOrOptions == null ||\n            typeof protocolsOrOptions === \"string\" ||\n            Array.isArray(protocolsOrOptions)\n        ) {\n            this.protocols = protocolsOrOptions;\n        } else {\n            options = protocolsOrOptions;\n        }\n        this.options = applyDefaultOptions(options);\n        if (!this.options.wsConstructor) {\n            if (typeof WebSocket !== \"undefined\") {\n                this.options.wsConstructor = WebSocket;\n            } else {\n                throw new Error(\n                    \"WebSocket not present in global scope and no \" +\n                        \"wsConstructor option was provided.\",\n                );\n            }\n        }\n        this.openNewWebSocket();\n    }\n\n    public get binaryType(): BinaryType {\n        return this.binaryTypeInternal || \"blob\";\n    }\n\n    public set binaryType(binaryType: BinaryType) {\n        this.binaryTypeInternal = binaryType;\n        if (this.ws) {\n            this.ws.binaryType = binaryType;\n        }\n    }\n\n    public get bufferedAmount(): number {\n        let sum = this.ws ? this.ws.bufferedAmount : 0;\n        let hasUnknownAmount = false;\n        this.messageBuffer.forEach(data => {\n            const byteLength = getDataByteLength(data);\n            if (byteLength != null) {\n                sum += byteLength;\n            } else {\n                hasUnknownAmount = true;\n            }\n        });\n        if (hasUnknownAmount) {\n            this.debugLog(\n                \"Some buffered data had unknown length. bufferedAmount()\" +\n                    \" return value may be below the correct amount.\",\n            );\n        }\n        return sum;\n    }\n\n    public get extensions(): string {\n        return this.ws ? this.ws.extensions : this.lastKnownExtensions;\n    }\n\n    public get protocol(): string {\n        return this.ws ? this.ws.protocol : this.lastKnownProtocol;\n    }\n\n    public get readyState(): number {\n        return this.isClosed ? SturdyWebSocket.CLOSED : SturdyWebSocket.OPEN;\n    }\n\n    public close(code?: number, reason?: string): void {\n        this.disposeSocket(code, reason);\n        this.shutdown();\n        this.debugLog(\"WebSocket permanently closed by client.\");\n    }\n\n    public send(data: any): void {\n        if (this.isClosed) {\n            throw new Error(\"WebSocket is already in CLOSING or CLOSED state.\");\n        } else if (this.ws && this.ws.readyState === this.OPEN) {\n            this.ws.send(data);\n        } else {\n            this.messageBuffer.push(data);\n        }\n    }\n\n    public reconnect(): void {\n        if (this.isClosed) {\n            throw new Error(\n                \"Cannot call reconnect() on socket which is permanently closed.\",\n            );\n        }\n        this.disposeSocket(1000, \"Client requested reconnect.\");\n        this.handleClose(undefined);\n    }\n\n    public addEventListener<K extends keyof SturdyWebSocketEventMap>(\n        type: K,\n        listener: (this: WebSocket, event: SturdyWebSocketEventMap[K]) => void,\n    ): void;\n    public addEventListener(\n        type: string,\n        listener: EventListenerOrEventListenerObject,\n    ): void;\n    public addEventListener(\n        type: string,\n        listener: EventListenerOrEventListenerObject,\n    ): void {\n        if (!this.listeners[type]) {\n            this.listeners[type] = [];\n        }\n        this.listeners[type].push(listener);\n    }\n\n    public dispatchEvent(event: Event): boolean {\n        return this.dispatchEventOfType(event.type, event);\n    }\n\n    public removeEventListener<K extends keyof SturdyWebSocketEventMap>(\n        type: K,\n        listener: (this: WebSocket, event: SturdyWebSocketEventMap[K]) => void,\n    ): void;\n    public removeEventListener(\n        type: string,\n        listener: EventListenerOrEventListenerObject,\n    ): void;\n    public removeEventListener(\n        type: string,\n        listener: EventListenerOrEventListenerObject,\n    ): void {\n        if (this.listeners[type]) {\n            this.listeners[type] = this.listeners[type].filter(\n                l => l !== listener,\n            );\n        }\n    }\n\n    private openNewWebSocket(): void {\n        if (this.isClosed) {\n            return;\n        }\n        const { connectTimeout, wsConstructor } = this.options;\n        this.debugLog(`Opening new WebSocket to ${this.url}.`);\n        const ws: WebSocket = new wsConstructor(this.url, this.protocols);\n        ws.onclose = event => this.handleClose(event);\n        ws.onerror = event => this.handleError(event);\n        ws.onmessage = event => this.handleMessage(event);\n        ws.onopen = event => this.handleOpen(event);\n        this.connectTimeoutId = setTimeout(() => {\n            // If this is running, we still haven't opened the websocket.\n            // Kill it so we can try again.\n            this.clearConnectTimeout();\n            this.disposeSocket();\n            this.handleClose(undefined);\n        }, connectTimeout);\n        this.ws = ws;\n    }\n\n    private handleOpen(event: Event): void {\n        if (!this.ws || this.isClosed) {\n            return;\n        }\n        const { allClearResetTime } = this.options;\n        this.debugLog(\"WebSocket opened.\");\n        if (this.binaryTypeInternal != null) {\n            this.ws.binaryType = this.binaryTypeInternal;\n        } else {\n            this.binaryTypeInternal = this.ws.binaryType;\n        }\n        this.clearConnectTimeout();\n        if (this.hasBeenOpened) {\n            this.dispatchEventOfType(\"reopen\", event);\n        } else {\n            this.dispatchEventOfType(\"open\", event);\n            this.hasBeenOpened = true;\n        }\n        this.messageBuffer.forEach(message => this.send(message));\n        this.messageBuffer = [];\n        this.allClearTimeoutId = setTimeout(() => {\n            this.clearAllClearTimeout();\n            this.nextRetryTime = 0;\n            this.reconnectCount = 0;\n            const openTime = (allClearResetTime / 1000) | 0;\n            this.debugLog(\n                `WebSocket remained open for ${openTime} seconds. Resetting` +\n                    \" retry time and count.\",\n            );\n        }, allClearResetTime);\n    }\n\n    private handleMessage(event: MessageEvent): void {\n        if (this.isClosed) {\n            return;\n        }\n        this.dispatchEventOfType(\"message\", event);\n    }\n\n    private handleClose(event: CloseEvent | undefined): void {\n        if (this.isClosed) {\n            return;\n        }\n        const { maxReconnectAttempts, shouldReconnect } = this.options;\n        this.clearConnectTimeout();\n        this.clearAllClearTimeout();\n        if (this.ws) {\n            this.lastKnownExtensions = this.ws.extensions;\n            this.lastKnownProtocol = this.ws.protocol;\n            this.disposeSocket();\n        }\n        this.dispatchEventOfType(\"down\", event);\n        if (this.reconnectCount >= maxReconnectAttempts) {\n            this.stopReconnecting(\n                event,\n                this.getTooManyFailedReconnectsMessage(),\n            );\n            return;\n        }\n        const willReconnect = !event || shouldReconnect(event);\n        if (typeof willReconnect === \"boolean\") {\n            this.handleWillReconnect(\n                willReconnect,\n                event,\n                SHOULD_RECONNECT_FALSE_MESSAGE,\n            );\n        } else {\n            willReconnect.then(willReconnectResolved => {\n                if (this.isClosed) {\n                    return;\n                }\n                this.handleWillReconnect(\n                    willReconnectResolved,\n                    event,\n                    SHOULD_RECONNECT_PROMISE_FALSE_MESSAGE,\n                );\n            });\n        }\n    }\n\n    private handleError(event: Event): void {\n        this.dispatchEventOfType(\"error\", event);\n        this.debugLog(\"WebSocket encountered an error.\");\n    }\n\n    private handleWillReconnect(\n        willReconnect: boolean,\n        event: CloseEvent | undefined,\n        denialReason: string,\n    ): void {\n        if (willReconnect) {\n            this.reestablishConnection();\n        } else {\n            this.stopReconnecting(event, denialReason);\n        }\n    }\n\n    private reestablishConnection(): void {\n        const {\n            minReconnectDelay,\n            maxReconnectDelay,\n            reconnectBackoffFactor,\n        } = this.options;\n        this.reconnectCount++;\n        const retryTime = this.nextRetryTime;\n        this.nextRetryTime = Math.max(\n            minReconnectDelay,\n            Math.min(\n                this.nextRetryTime * reconnectBackoffFactor,\n                maxReconnectDelay,\n            ),\n        );\n        setTimeout(() => this.openNewWebSocket(), retryTime);\n        const retryTimeSeconds = (retryTime / 1000) | 0;\n        this.debugLog(\n            `WebSocket was closed. Re-opening in ${retryTimeSeconds} seconds.`,\n        );\n    }\n\n    private stopReconnecting(\n        event: CloseEvent | undefined,\n        debugReason: string,\n    ): void {\n        this.debugLog(debugReason);\n        this.shutdown();\n        if (event) {\n            this.dispatchEventOfType(\"close\", event);\n        }\n    }\n\n    private shutdown(): void {\n        this.isClosed = true;\n        this.clearAllTimeouts();\n        this.messageBuffer = [];\n        this.disposeSocket();\n    }\n\n    private disposeSocket(closeCode?: number, reason?: string): void {\n        if (!this.ws) {\n            return;\n        }\n        // Use noop handlers instead of null because some WebSocket\n        // implementations, such as the one from isomorphic-ws, raise a stink on\n        // unhandled events.\n        this.ws.onerror = noop;\n        this.ws.onclose = noop;\n        this.ws.onmessage = noop;\n        this.ws.onopen = noop;\n        this.ws.close(closeCode, reason);\n        this.ws = undefined;\n    }\n\n    private clearAllTimeouts(): void {\n        this.clearConnectTimeout();\n        this.clearAllClearTimeout();\n    }\n\n    private clearConnectTimeout(): void {\n        if (this.connectTimeoutId != null) {\n            clearTimeout(this.connectTimeoutId);\n            this.connectTimeoutId = undefined;\n        }\n    }\n\n    private clearAllClearTimeout(): void {\n        if (this.allClearTimeoutId != null) {\n            clearTimeout(this.allClearTimeoutId);\n            this.allClearTimeoutId = undefined;\n        }\n    }\n\n    private dispatchEventOfType(type: string, event: any): boolean {\n        switch (type) {\n            case \"close\":\n                if (this.onclose) {\n                    this.onclose(event);\n                }\n                break;\n            case \"error\":\n                if (this.onerror) {\n                    this.onerror(event);\n                }\n                break;\n            case \"message\":\n                if (this.onmessage) {\n                    this.onmessage(event);\n                }\n                break;\n            case \"open\":\n                if (this.onopen) {\n                    this.onopen(event);\n                }\n                break;\n            case \"down\":\n                if (this.ondown) {\n                    this.ondown(event);\n                }\n                break;\n            case \"reopen\":\n                if (this.onreopen) {\n                    this.onreopen(event);\n                }\n                break;\n        }\n        if (type in this.listeners) {\n            this.listeners[type]\n                .slice()\n                .forEach(listener => this.callListener(listener, event));\n        }\n        return !event || !(event as Event).defaultPrevented;\n    }\n\n    private callListener(\n        listener: EventListenerOrEventListenerObject,\n        event: Event,\n    ): void {\n        if (typeof listener === \"function\") {\n            listener.call(this, event);\n        } else {\n            listener.handleEvent.call(this, event);\n        }\n    }\n\n    private debugLog(message: string): void {\n        if (this.options.debug) {\n            // tslint:disable-next-line:no-console\n            console.log(message);\n        }\n    }\n\n    private getTooManyFailedReconnectsMessage(): string {\n        const { maxReconnectAttempts } = this.options;\n        return `Failed to reconnect after ${maxReconnectAttempts} ${pluralize(\n            \"attempt\",\n            maxReconnectAttempts,\n        )}. Closing permanently.`;\n    }\n}\n\nfunction applyDefaultOptions(options: Options): Required<Options> {\n    const result: any = {};\n    Object.keys(SturdyWebSocket.DEFAULT_OPTIONS).forEach(key => {\n        const value = (options as any)[key];\n        result[key] =\n            value === undefined\n                ? (SturdyWebSocket.DEFAULT_OPTIONS as any)[key]\n                : value;\n    });\n    return result;\n}\n\nfunction getDataByteLength(data: any): number | undefined {\n    if (typeof data === \"string\") {\n        // UTF-16 strings use two bytes per character.\n        return 2 * data.length;\n    } else if (data instanceof ArrayBuffer) {\n        return data.byteLength;\n    } else if (data instanceof Blob) {\n        return data.size;\n    } else {\n        return undefined;\n    }\n}\n\nfunction pluralize(s: string, n: number): string {\n    return n === 1 ? s : `${s}s`;\n}\n\nfunction noop(): void {\n    // Nothing.\n}\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}