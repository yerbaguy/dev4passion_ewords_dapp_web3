{"ast":null,"code":"import { _ as __awaiter, D as DEFAULT_ALCHEMY_API_KEY, C as CustomNetworks, a as DEFAULT_NETWORK, N as Network, I as IS_BROWSER, V as VERSION, l as logWarn, E as EthersNetwork, g as getAlchemyHttpUrl, b as getAlchemyWsUrl } from './index-f0af5585.js';\nimport { getNetwork } from '@ethersproject/networks';\nimport { JsonRpcProvider } from '@ethersproject/providers';\nimport { fetchJson } from '@ethersproject/web';\nimport './api/utils';\nimport '@ethersproject/bignumber';\nimport 'axios';\nimport '@ethersproject/abstract-provider';\nimport '@ethersproject/wallet';\nimport '@ethersproject/contracts';\nconst version$1 = \"logger/5.7.0\";\nlet _permanentCensorErrors = false;\nlet _censorErrors = false;\nconst LogLevels = {\n  debug: 1,\n  \"default\": 2,\n  info: 2,\n  warning: 3,\n  error: 4,\n  off: 5\n};\nlet _logLevel = LogLevels[\"default\"];\nlet _globalLogger = null;\nfunction _checkNormalize() {\n  try {\n    const missing = [];\n    // Make sure all forms of normalization are supported\n    [\"NFD\", \"NFC\", \"NFKD\", \"NFKC\"].forEach(form => {\n      try {\n        if (\"test\".normalize(form) !== \"test\") {\n          throw new Error(\"bad normalize\");\n        }\n        ;\n      } catch (error) {\n        missing.push(form);\n      }\n    });\n    if (missing.length) {\n      throw new Error(\"missing \" + missing.join(\", \"));\n    }\n    if (String.fromCharCode(0xe9).normalize(\"NFD\") !== String.fromCharCode(0x65, 0x0301)) {\n      throw new Error(\"broken implementation\");\n    }\n  } catch (error) {\n    return error.message;\n  }\n  return null;\n}\nconst _normalizeError = _checkNormalize();\nvar LogLevel;\n(function (LogLevel) {\n  LogLevel[\"DEBUG\"] = \"DEBUG\";\n  LogLevel[\"INFO\"] = \"INFO\";\n  LogLevel[\"WARNING\"] = \"WARNING\";\n  LogLevel[\"ERROR\"] = \"ERROR\";\n  LogLevel[\"OFF\"] = \"OFF\";\n})(LogLevel || (LogLevel = {}));\nvar ErrorCode;\n(function (ErrorCode) {\n  ///////////////////\n  // Generic Errors\n  // Unknown Error\n  ErrorCode[\"UNKNOWN_ERROR\"] = \"UNKNOWN_ERROR\";\n  // Not Implemented\n  ErrorCode[\"NOT_IMPLEMENTED\"] = \"NOT_IMPLEMENTED\";\n  // Unsupported Operation\n  //   - operation\n  ErrorCode[\"UNSUPPORTED_OPERATION\"] = \"UNSUPPORTED_OPERATION\";\n  // Network Error (i.e. Ethereum Network, such as an invalid chain ID)\n  //   - event (\"noNetwork\" is not re-thrown in provider.ready; otherwise thrown)\n  ErrorCode[\"NETWORK_ERROR\"] = \"NETWORK_ERROR\";\n  // Some sort of bad response from the server\n  ErrorCode[\"SERVER_ERROR\"] = \"SERVER_ERROR\";\n  // Timeout\n  ErrorCode[\"TIMEOUT\"] = \"TIMEOUT\";\n  ///////////////////\n  // Operational  Errors\n  // Buffer Overrun\n  ErrorCode[\"BUFFER_OVERRUN\"] = \"BUFFER_OVERRUN\";\n  // Numeric Fault\n  //   - operation: the operation being executed\n  //   - fault: the reason this faulted\n  ErrorCode[\"NUMERIC_FAULT\"] = \"NUMERIC_FAULT\";\n  ///////////////////\n  // Argument Errors\n  // Missing new operator to an object\n  //  - name: The name of the class\n  ErrorCode[\"MISSING_NEW\"] = \"MISSING_NEW\";\n  // Invalid argument (e.g. value is incompatible with type) to a function:\n  //   - argument: The argument name that was invalid\n  //   - value: The value of the argument\n  ErrorCode[\"INVALID_ARGUMENT\"] = \"INVALID_ARGUMENT\";\n  // Missing argument to a function:\n  //   - count: The number of arguments received\n  //   - expectedCount: The number of arguments expected\n  ErrorCode[\"MISSING_ARGUMENT\"] = \"MISSING_ARGUMENT\";\n  // Too many arguments\n  //   - count: The number of arguments received\n  //   - expectedCount: The number of arguments expected\n  ErrorCode[\"UNEXPECTED_ARGUMENT\"] = \"UNEXPECTED_ARGUMENT\";\n  ///////////////////\n  // Blockchain Errors\n  // Call exception\n  //  - transaction: the transaction\n  //  - address?: the contract address\n  //  - args?: The arguments passed into the function\n  //  - method?: The Solidity method signature\n  //  - errorSignature?: The EIP848 error signature\n  //  - errorArgs?: The EIP848 error parameters\n  //  - reason: The reason (only for EIP848 \"Error(string)\")\n  ErrorCode[\"CALL_EXCEPTION\"] = \"CALL_EXCEPTION\";\n  // Insufficient funds (< value + gasLimit * gasPrice)\n  //   - transaction: the transaction attempted\n  ErrorCode[\"INSUFFICIENT_FUNDS\"] = \"INSUFFICIENT_FUNDS\";\n  // Nonce has already been used\n  //   - transaction: the transaction attempted\n  ErrorCode[\"NONCE_EXPIRED\"] = \"NONCE_EXPIRED\";\n  // The replacement fee for the transaction is too low\n  //   - transaction: the transaction attempted\n  ErrorCode[\"REPLACEMENT_UNDERPRICED\"] = \"REPLACEMENT_UNDERPRICED\";\n  // The gas limit could not be estimated\n  //   - transaction: the transaction passed to estimateGas\n  ErrorCode[\"UNPREDICTABLE_GAS_LIMIT\"] = \"UNPREDICTABLE_GAS_LIMIT\";\n  // The transaction was replaced by one with a higher gas price\n  //   - reason: \"cancelled\", \"replaced\" or \"repriced\"\n  //   - cancelled: true if reason == \"cancelled\" or reason == \"replaced\")\n  //   - hash: original transaction hash\n  //   - replacement: the full TransactionsResponse for the replacement\n  //   - receipt: the receipt of the replacement\n  ErrorCode[\"TRANSACTION_REPLACED\"] = \"TRANSACTION_REPLACED\";\n  ///////////////////\n  // Interaction Errors\n  // The user rejected the action, such as signing a message or sending\n  // a transaction\n  ErrorCode[\"ACTION_REJECTED\"] = \"ACTION_REJECTED\";\n})(ErrorCode || (ErrorCode = {}));\nconst HEX = \"0123456789abcdef\";\nclass Logger {\n  constructor(version) {\n    Object.defineProperty(this, \"version\", {\n      enumerable: true,\n      value: version,\n      writable: false\n    });\n  }\n  _log(logLevel, args) {\n    const level = logLevel.toLowerCase();\n    if (LogLevels[level] == null) {\n      this.throwArgumentError(\"invalid log level name\", \"logLevel\", logLevel);\n    }\n    if (_logLevel > LogLevels[level]) {\n      return;\n    }\n    console.log.apply(console, args);\n  }\n  debug() {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    this._log(Logger.levels.DEBUG, args);\n  }\n  info() {\n    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      args[_key2] = arguments[_key2];\n    }\n    this._log(Logger.levels.INFO, args);\n  }\n  warn() {\n    for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n      args[_key3] = arguments[_key3];\n    }\n    this._log(Logger.levels.WARNING, args);\n  }\n  makeError(message, code, params) {\n    // Errors are being censored\n    if (_censorErrors) {\n      return this.makeError(\"censored error\", code, {});\n    }\n    if (!code) {\n      code = Logger.errors.UNKNOWN_ERROR;\n    }\n    if (!params) {\n      params = {};\n    }\n    const messageDetails = [];\n    Object.keys(params).forEach(key => {\n      const value = params[key];\n      try {\n        if (value instanceof Uint8Array) {\n          let hex = \"\";\n          for (let i = 0; i < value.length; i++) {\n            hex += HEX[value[i] >> 4];\n            hex += HEX[value[i] & 0x0f];\n          }\n          messageDetails.push(key + \"=Uint8Array(0x\" + hex + \")\");\n        } else {\n          messageDetails.push(key + \"=\" + JSON.stringify(value));\n        }\n      } catch (error) {\n        messageDetails.push(key + \"=\" + JSON.stringify(params[key].toString()));\n      }\n    });\n    messageDetails.push(`code=${code}`);\n    messageDetails.push(`version=${this.version}`);\n    const reason = message;\n    let url = \"\";\n    switch (code) {\n      case ErrorCode.NUMERIC_FAULT:\n        {\n          url = \"NUMERIC_FAULT\";\n          const fault = message;\n          switch (fault) {\n            case \"overflow\":\n            case \"underflow\":\n            case \"division-by-zero\":\n              url += \"-\" + fault;\n              break;\n            case \"negative-power\":\n            case \"negative-width\":\n              url += \"-unsupported\";\n              break;\n            case \"unbound-bitwise-result\":\n              url += \"-unbound-result\";\n              break;\n          }\n          break;\n        }\n      case ErrorCode.CALL_EXCEPTION:\n      case ErrorCode.INSUFFICIENT_FUNDS:\n      case ErrorCode.MISSING_NEW:\n      case ErrorCode.NONCE_EXPIRED:\n      case ErrorCode.REPLACEMENT_UNDERPRICED:\n      case ErrorCode.TRANSACTION_REPLACED:\n      case ErrorCode.UNPREDICTABLE_GAS_LIMIT:\n        url = code;\n        break;\n    }\n    if (url) {\n      message += \" [ See: https:/\\/links.ethers.org/v5-errors-\" + url + \" ]\";\n    }\n    if (messageDetails.length) {\n      message += \" (\" + messageDetails.join(\", \") + \")\";\n    }\n    // @TODO: Any??\n    const error = new Error(message);\n    error.reason = reason;\n    error.code = code;\n    Object.keys(params).forEach(function (key) {\n      error[key] = params[key];\n    });\n    return error;\n  }\n  throwError(message, code, params) {\n    throw this.makeError(message, code, params);\n  }\n  throwArgumentError(message, name, value) {\n    return this.throwError(message, Logger.errors.INVALID_ARGUMENT, {\n      argument: name,\n      value: value\n    });\n  }\n  assert(condition, message, code, params) {\n    if (!!condition) {\n      return;\n    }\n    this.throwError(message, code, params);\n  }\n  assertArgument(condition, message, name, value) {\n    if (!!condition) {\n      return;\n    }\n    this.throwArgumentError(message, name, value);\n  }\n  checkNormalize(message) {\n    if (_normalizeError) {\n      this.throwError(\"platform missing String.prototype.normalize\", Logger.errors.UNSUPPORTED_OPERATION, {\n        operation: \"String.prototype.normalize\",\n        form: _normalizeError\n      });\n    }\n  }\n  checkSafeUint53(value, message) {\n    if (typeof value !== \"number\") {\n      return;\n    }\n    if (message == null) {\n      message = \"value not safe\";\n    }\n    if (value < 0 || value >= 0x1fffffffffffff) {\n      this.throwError(message, Logger.errors.NUMERIC_FAULT, {\n        operation: \"checkSafeInteger\",\n        fault: \"out-of-safe-range\",\n        value: value\n      });\n    }\n    if (value % 1) {\n      this.throwError(message, Logger.errors.NUMERIC_FAULT, {\n        operation: \"checkSafeInteger\",\n        fault: \"non-integer\",\n        value: value\n      });\n    }\n  }\n  checkArgumentCount(count, expectedCount, message) {\n    if (message) {\n      message = \": \" + message;\n    } else {\n      message = \"\";\n    }\n    if (count < expectedCount) {\n      this.throwError(\"missing argument\" + message, Logger.errors.MISSING_ARGUMENT, {\n        count: count,\n        expectedCount: expectedCount\n      });\n    }\n    if (count > expectedCount) {\n      this.throwError(\"too many arguments\" + message, Logger.errors.UNEXPECTED_ARGUMENT, {\n        count: count,\n        expectedCount: expectedCount\n      });\n    }\n  }\n  checkNew(target, kind) {\n    if (target === Object || target == null) {\n      this.throwError(\"missing new\", Logger.errors.MISSING_NEW, {\n        name: kind.name\n      });\n    }\n  }\n  checkAbstract(target, kind) {\n    if (target === kind) {\n      this.throwError(\"cannot instantiate abstract class \" + JSON.stringify(kind.name) + \" directly; use a sub-class\", Logger.errors.UNSUPPORTED_OPERATION, {\n        name: target.name,\n        operation: \"new\"\n      });\n    } else if (target === Object || target == null) {\n      this.throwError(\"missing new\", Logger.errors.MISSING_NEW, {\n        name: kind.name\n      });\n    }\n  }\n  static globalLogger() {\n    if (!_globalLogger) {\n      _globalLogger = new Logger(version$1);\n    }\n    return _globalLogger;\n  }\n  static setCensorship(censorship, permanent) {\n    if (!censorship && permanent) {\n      this.globalLogger().throwError(\"cannot permanently disable censorship\", Logger.errors.UNSUPPORTED_OPERATION, {\n        operation: \"setCensorship\"\n      });\n    }\n    if (_permanentCensorErrors) {\n      if (!censorship) {\n        return;\n      }\n      this.globalLogger().throwError(\"error censorship permanent\", Logger.errors.UNSUPPORTED_OPERATION, {\n        operation: \"setCensorship\"\n      });\n    }\n    _censorErrors = !!censorship;\n    _permanentCensorErrors = !!permanent;\n  }\n  static setLogLevel(logLevel) {\n    const level = LogLevels[logLevel.toLowerCase()];\n    if (level == null) {\n      Logger.globalLogger().warn(\"invalid log level - \" + logLevel);\n      return;\n    }\n    _logLevel = level;\n  }\n  static from(version) {\n    return new Logger(version);\n  }\n}\nLogger.errors = ErrorCode;\nLogger.levels = LogLevel;\nconst version = \"properties/5.7.0\";\nundefined && undefined.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nconst logger = new Logger(version);\nfunction defineReadOnly(object, name, value) {\n  Object.defineProperty(object, name, {\n    enumerable: true,\n    value: value,\n    writable: false\n  });\n}\nconst opaque = {\n  bigint: true,\n  boolean: true,\n  \"function\": true,\n  number: true,\n  string: true\n};\nfunction _isFrozen(object) {\n  // Opaque objects are not mutable, so safe to copy by assignment\n  if (object === undefined || object === null || opaque[typeof object]) {\n    return true;\n  }\n  if (Array.isArray(object) || typeof object === \"object\") {\n    if (!Object.isFrozen(object)) {\n      return false;\n    }\n    const keys = Object.keys(object);\n    for (let i = 0; i < keys.length; i++) {\n      let value = null;\n      try {\n        value = object[keys[i]];\n      } catch (error) {\n        // If accessing a value triggers an error, it is a getter\n        // designed to do so (e.g. Result) and is therefore \"frozen\"\n        continue;\n      }\n      if (!_isFrozen(value)) {\n        return false;\n      }\n    }\n    return true;\n  }\n  return logger.throwArgumentError(`Cannot deepCopy ${typeof object}`, \"object\", object);\n}\n// Returns a new copy of object, such that no properties may be replaced.\n// New properties may be added only to objects.\nfunction _deepCopy(object) {\n  if (_isFrozen(object)) {\n    return object;\n  }\n  // Arrays are mutable, so we need to create a copy\n  if (Array.isArray(object)) {\n    return Object.freeze(object.map(item => deepCopy(item)));\n  }\n  if (typeof object === \"object\") {\n    const result = {};\n    for (const key in object) {\n      const value = object[key];\n      if (value === undefined) {\n        continue;\n      }\n      defineReadOnly(result, key, deepCopy(value));\n    }\n    return result;\n  }\n  return logger.throwArgumentError(`Cannot deepCopy ${typeof object}`, \"object\", object);\n}\nfunction deepCopy(object) {\n  return _deepCopy(object);\n}\n\n/** Maximum size of a batch on the rpc provider. */\nconst DEFAULT_MAX_REQUEST_BATCH_SIZE = 100;\n/** Timeout interval before the pending batch is sent. */\nconst DEFAULT_REQUEST_BATCH_DELAY_MS = 10;\n/**\r\n * Internal class to enqueue requests and automatically send/process batches.\r\n *\r\n * The underlying batching mechanism is loosely based on ethers.js's\r\n * `JsonRpcBatchProvider`.\r\n *\r\n * @internal\r\n */\nclass RequestBatcher {\n  constructor(sendBatchFn) {\n    let maxBatchSize = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : DEFAULT_MAX_REQUEST_BATCH_SIZE;\n    this.sendBatchFn = sendBatchFn;\n    this.maxBatchSize = maxBatchSize;\n    /**\r\n     * Array of enqueued requests along with the constructed promise handlers for\r\n     * each request.\r\n     */\n    this.pendingBatch = [];\n  }\n  /**\r\n   * Enqueues the provided request. The batch is immediately sent if the maximum\r\n   * batch size is reached. Otherwise, the request is enqueued onto a batch that\r\n   * is sent after 10ms.\r\n   *\r\n   * Returns a promise that resolves with the result of the request.\r\n   */\n  enqueueRequest(request) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const inflightRequest = {\n        request,\n        resolve: undefined,\n        reject: undefined\n      };\n      const promise = new Promise((resolve, reject) => {\n        inflightRequest.resolve = resolve;\n        inflightRequest.reject = reject;\n      });\n      this.pendingBatch.push(inflightRequest);\n      if (this.pendingBatch.length === this.maxBatchSize) {\n        // Send batch immediately if we are at the maximum batch size.\n        void this.sendBatchRequest();\n      } else if (!this.pendingBatchTimer) {\n        // Schedule batch for next event loop + short duration\n        this.pendingBatchTimer = setTimeout(() => this.sendBatchRequest(), DEFAULT_REQUEST_BATCH_DELAY_MS);\n      }\n      return promise;\n    });\n  }\n  /**\r\n   * Sends the currently queued batches and resets the batch and timer. Processes\r\n   * the batched response results back to the original promises.\r\n   */\n  sendBatchRequest() {\n    return __awaiter(this, void 0, void 0, function* () {\n      // Get the current batch and clear it, so new requests\n      // go into the next batch\n      const batch = this.pendingBatch;\n      this.pendingBatch = [];\n      if (this.pendingBatchTimer) {\n        clearTimeout(this.pendingBatchTimer);\n        this.pendingBatchTimer = undefined;\n      }\n      // Get the request as an array of requests\n      const request = batch.map(inflight => inflight.request);\n      return this.sendBatchFn(request).then(result => {\n        // For each result, feed it to the correct Promise, depending\n        // on whether it was a success or error\n        batch.forEach((inflightRequest, index) => {\n          const payload = result[index];\n          if (payload.error) {\n            const error = new Error(payload.error.message);\n            error.code = payload.error.code;\n            error.data = payload.error.data;\n            inflightRequest.reject(error);\n          } else {\n            inflightRequest.resolve(payload.result);\n          }\n        });\n      }, error => {\n        batch.forEach(inflightRequest => {\n          inflightRequest.reject(error);\n        });\n      });\n    });\n  }\n}\n\n/**\r\n * SDK's custom implementation of ethers.js's 'AlchemyProvider'.\r\n *\r\n * Do not call this constructor directly. Instead, instantiate an instance of\r\n * {@link Alchemy} and call {@link Alchemy.config.getProvider()}.\r\n *\r\n * @public\r\n */\nclass AlchemyProvider extends JsonRpcProvider {\n  /** @internal */\n  constructor(config) {\n    // Normalize the API Key to a string.\n    const apiKey = AlchemyProvider.getApiKey(config.apiKey);\n    // Generate our own connection info with the correct endpoint URLs.\n    const alchemyNetwork = AlchemyProvider.getAlchemyNetwork(config.network);\n    const connection = AlchemyProvider.getAlchemyConnectionInfo(alchemyNetwork, apiKey, 'http');\n    // If a hardcoded url was specified in the config, use that instead of the\n    // provided apiKey or network.\n    if (config.url !== undefined) {\n      connection.url = config.url;\n    }\n    connection.throttleLimit = config.maxRetries;\n    // Normalize the Alchemy named network input to the network names used by\n    // ethers. This allows the parent super constructor in JsonRpcProvider to\n    // correctly set the network.\n    const ethersNetwork = EthersNetwork[alchemyNetwork];\n    super(connection, ethersNetwork);\n    this.apiKey = config.apiKey;\n    this.maxRetries = config.maxRetries;\n    this.batchRequests = config.batchRequests;\n    // TODO: support individual headers when calling batch\n    const batcherConnection = Object.assign({}, this.connection);\n    batcherConnection.headers['Alchemy-Ethers-Sdk-Method'] = 'batchSend';\n    const sendBatchFn = requests => {\n      return fetchJson(batcherConnection, JSON.stringify(requests));\n    };\n    this.batcher = new RequestBatcher(sendBatchFn);\n  }\n  /**\r\n   * Overrides the `UrlJsonRpcProvider.getApiKey` method as implemented by\r\n   * ethers.js. Returns the API key for an Alchemy provider.\r\n   *\r\n   * @internal\r\n   * @override\r\n   */\n  static getApiKey(apiKey) {\n    if (apiKey == null) {\n      return DEFAULT_ALCHEMY_API_KEY;\n    }\n    if (apiKey && typeof apiKey !== 'string') {\n      throw new Error(`Invalid apiKey '${apiKey}' provided. apiKey must be a string.`);\n    }\n    return apiKey;\n  }\n  /**\r\n   * Overrides the `BaseProvider.getNetwork` method as implemented by ethers.js.\r\n   *\r\n   * This override allows the SDK to set the provider's network to values not\r\n   * yet supported by ethers.js.\r\n   *\r\n   * @internal\r\n   * @override\r\n   */\n  static getNetwork(network) {\n    if (typeof network === 'string' && network in CustomNetworks) {\n      return CustomNetworks[network];\n    }\n    // Call the standard ethers.js getNetwork method for other networks.\n    return getNetwork(network);\n  }\n  /**\r\n   * Converts the `Networkish` input to the network enum used by Alchemy.\r\n   *\r\n   * @internal\r\n   */\n  static getAlchemyNetwork(network) {\n    if (network === undefined) {\n      return DEFAULT_NETWORK;\n    }\n    if (typeof network === 'number') {\n      throw new Error(`Invalid network '${network}' provided. Network must be a string.`);\n    }\n    // Guaranteed that `typeof network === 'string`.\n    const isValidNetwork = Object.values(Network).includes(network);\n    if (!isValidNetwork) {\n      throw new Error(`Invalid network '${network}' provided. Network must be one of: ` + `${Object.values(Network).join(', ')}.`);\n    }\n    return network;\n  }\n  /**\r\n   * Returns a {@link ConnectionInfo} object compatible with ethers that contains\r\n   * the correct URLs for Alchemy.\r\n   *\r\n   * @internal\r\n   */\n  static getAlchemyConnectionInfo(network, apiKey, type) {\n    const url = type === 'http' ? getAlchemyHttpUrl(network, apiKey) : getAlchemyWsUrl(network, apiKey);\n    return {\n      headers: IS_BROWSER ? {\n        'Alchemy-Ethers-Sdk-Version': VERSION\n      } : {\n        'Alchemy-Ethers-Sdk-Version': VERSION,\n        'Accept-Encoding': 'gzip'\n      },\n      allowGzip: true,\n      url\n    };\n  }\n  /**\r\n   * Overrides the method in ethers.js's `StaticJsonRpcProvider` class. This\r\n   * method is called when calling methods on the parent class `BaseProvider`.\r\n   *\r\n   * @override\r\n   */\n  detectNetwork() {\n    const _super = Object.create(null, {\n      detectNetwork: {\n        get: () => super.detectNetwork\n      }\n    });\n    return __awaiter(this, void 0, void 0, function* () {\n      let network = this.network;\n      if (network == null) {\n        network = yield _super.detectNetwork.call(this);\n        if (!network) {\n          throw new Error('No network detected');\n        }\n      }\n      return network;\n    });\n  }\n  _startPending() {\n    logWarn('WARNING: Alchemy Provider does not support pending filters');\n  }\n  /**\r\n   * Overrides the ether's `isCommunityResource()` method. Returns true if the\r\n   * current api key is the default key.\r\n   *\r\n   * @override\r\n   */\n  isCommunityResource() {\n    return this.apiKey === DEFAULT_ALCHEMY_API_KEY;\n  }\n  /**\r\n   * Overrides the base {@link JsonRpcProvider.send} method to implement custom\r\n   * logic for sending requests to Alchemy.\r\n   *\r\n   * @param method The method name to use for the request.\r\n   * @param params The parameters to use for the request.\r\n   * @override\r\n   * @public\r\n   */\n  // TODO: Add headers for `perform()` override.\n  send(method, params) {\n    return this._send(method, params, 'send');\n  }\n  /**\r\n   * DO NOT MODIFY.\r\n   *\r\n   * Original code copied over from ether.js's `JsonRpcProvider.send()`.\r\n   *\r\n   * This method is copied over directly in order to implement custom headers\r\n   *\r\n   * @internal\r\n   */\n  _send(method, params, methodName) {\n    let forceBatch = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n    const request = {\n      method,\n      params,\n      id: this._nextId++,\n      jsonrpc: '2.0'\n    };\n    // START MODIFIED CODE\n    const connection = Object.assign({}, this.connection);\n    connection.headers['Alchemy-Ethers-Sdk-Method'] = methodName;\n    if (this.batchRequests || forceBatch) {\n      return this.batcher.enqueueRequest(request);\n    }\n    // END MODIFIED CODE\n    this.emit('debug', {\n      action: 'request',\n      request: deepCopy(request),\n      provider: this\n    });\n    // We can expand this in the future to any call, but for now these\n    // are the biggest wins and do not require any serializing parameters.\n    const cache = ['eth_chainId', 'eth_blockNumber'].indexOf(method) >= 0;\n    if (cache && this._cache[method]) {\n      return this._cache[method];\n    }\n    const result = fetchJson(this.connection, JSON.stringify(request), getResult).then(result => {\n      this.emit('debug', {\n        action: 'response',\n        request,\n        response: result,\n        provider: this\n      });\n      return result;\n    }, error => {\n      this.emit('debug', {\n        action: 'response',\n        error,\n        request,\n        provider: this\n      });\n      throw error;\n    });\n    // Cache the fetch, but clear it on the next event loop\n    if (cache) {\n      this._cache[method] = result;\n      setTimeout(() => {\n        // @ts-ignore - This is done by ethers.\n        this._cache[method] = null;\n      }, 0);\n    }\n    return result;\n  }\n}\n/**\r\n * DO NOT MODIFY.\r\n *\r\n * Original code copied over from ether.js's\r\n * `@ethersproject/web/src.ts/index.ts`. Used to support\r\n * {@link AlchemyProvider._send}, which is also copied over.\r\n */\nfunction getResult(payload) {\n  if (payload.error) {\n    const error = new Error(payload.error.message);\n    error.code = payload.error.code;\n    error.data = payload.error.data;\n    throw error;\n  }\n  return payload.result;\n}\nexport { AlchemyProvider };","map":{"version":3,"mappings":";;;;;;;;;;AAAO,MAAMA,SAAO,GAAG,cAAc;ACCrC,IAAIC,sBAAsB,GAAG,KAAK;AAClC,IAAIC,aAAa,GAAG,KAAK;AACzB,MAAMC,SAAS,GAAG;EAAEC,KAAK,EAAE,CAAC;EAAE,SAAS,EAAE,CAAC;EAAEC,IAAI,EAAE,CAAC;EAAEC,OAAO,EAAE,CAAC;EAAEC,KAAK,EAAE,CAAC;EAAEC,GAAG,EAAE;AAAC,CAAE;AACnF,IAAIC,SAAS,GAAGN,SAAS,CAAC,SAAS,CAAC;AAEpC,IAAIO,aAAa,GAAG,IAAI;AACxB,SAASC,eAAe,GAAG;EACvB,IAAI;IACA,MAAMC,OAAO,GAAG,EAAE;IAC1B;IACQ,CAAC,KAAK,EAAE,KAAK,EAAE,MAAM,EAAE,MAAM,CAAC,CAACC,OAAO,CAAEC,IAAI,IAAK;MAC7C,IAAI;QACA,IAAI,MAAM,CAACC,SAAS,CAACD,IAAI,CAAC,KAAK,MAAM,EAAE;UACnC,MAAM,IAAIE,KAAK,CAAC,eAAe,CAAC;QACpD;QACgB;MAChB,CAAa,CACD,OAAOT,KAAK,EAAE;QACVK,OAAO,CAACK,IAAI,CAACH,IAAI,CAAC;MAClC;IACA,CAAS,CAAC;IACF,IAAIF,OAAO,CAACM,MAAM,EAAE;MAChB,MAAM,IAAIF,KAAK,CAAC,UAAU,GAAGJ,OAAO,CAACO,IAAI,CAAC,IAAI,CAAC,CAAC;IAC5D;IACQ,IAAIC,MAAM,CAACC,YAAY,CAAC,IAAI,CAAC,CAACN,SAAS,CAAC,KAAK,CAAC,KAAKK,MAAM,CAACC,YAAY,CAAC,IAAI,EAAE,MAAM,CAAC,EAAE;MAClF,MAAM,IAAIL,KAAK,CAAC,uBAAuB,CAAC;IACpD;EACA,CAAK,CACD,OAAOT,KAAK,EAAE;IACV,OAAOA,KAAK,CAACe,OAAO;EAC5B;EACI,OAAO,IAAI;AACf;AACA,MAAMC,eAAe,GAAGZ,eAAe,EAAE;AAClC,IAAIa,QAAQ;AACnB,CAAC,UAAUA,QAAQ,EAAE;EACjBA,QAAQ,CAAC,OAAO,CAAC,GAAG,OAAO;EAC3BA,QAAQ,CAAC,MAAM,CAAC,GAAG,MAAM;EACzBA,QAAQ,CAAC,SAAS,CAAC,GAAG,SAAS;EAC/BA,QAAQ,CAAC,OAAO,CAAC,GAAG,OAAO;EAC3BA,QAAQ,CAAC,KAAK,CAAC,GAAG,KAAK;AAC3B,CAAC,EAAEA,QAAQ,KAAKA,QAAQ,GAAG,EAAE,CAAC,CAAC;AACxB,IAAIC,SAAS;AACpB,CAAC,UAAUA,SAAS,EAAE;EACtB;EACA;EACA;EACIA,SAAS,CAAC,eAAe,CAAC,GAAG,eAAe;EAChD;EACIA,SAAS,CAAC,iBAAiB,CAAC,GAAG,iBAAiB;EACpD;EACA;EACIA,SAAS,CAAC,uBAAuB,CAAC,GAAG,uBAAuB;EAChE;EACA;EACIA,SAAS,CAAC,eAAe,CAAC,GAAG,eAAe;EAChD;EACIA,SAAS,CAAC,cAAc,CAAC,GAAG,cAAc;EAC9C;EACIA,SAAS,CAAC,SAAS,CAAC,GAAG,SAAS;EACpC;EACA;EACA;EACIA,SAAS,CAAC,gBAAgB,CAAC,GAAG,gBAAgB;EAClD;EACA;EACA;EACIA,SAAS,CAAC,eAAe,CAAC,GAAG,eAAe;EAChD;EACA;EACA;EACA;EACIA,SAAS,CAAC,aAAa,CAAC,GAAG,aAAa;EAC5C;EACA;EACA;EACIA,SAAS,CAAC,kBAAkB,CAAC,GAAG,kBAAkB;EACtD;EACA;EACA;EACIA,SAAS,CAAC,kBAAkB,CAAC,GAAG,kBAAkB;EACtD;EACA;EACA;EACIA,SAAS,CAAC,qBAAqB,CAAC,GAAG,qBAAqB;EAC5D;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACIA,SAAS,CAAC,gBAAgB,CAAC,GAAG,gBAAgB;EAClD;EACA;EACIA,SAAS,CAAC,oBAAoB,CAAC,GAAG,oBAAoB;EAC1D;EACA;EACIA,SAAS,CAAC,eAAe,CAAC,GAAG,eAAe;EAChD;EACA;EACIA,SAAS,CAAC,yBAAyB,CAAC,GAAG,yBAAyB;EACpE;EACA;EACIA,SAAS,CAAC,yBAAyB,CAAC,GAAG,yBAAyB;EACpE;EACA;EACA;EACA;EACA;EACA;EACIA,SAAS,CAAC,sBAAsB,CAAC,GAAG,sBAAsB;EAC9D;EACA;EACA;EACA;EACIA,SAAS,CAAC,iBAAiB,CAAC,GAAG,iBAAiB;AACpD,CAAC,EAAEA,SAAS,KAAKA,SAAS,GAAG,EAAE,CAAC,CAAC;AAEjC,MAAMC,GAAG,GAAG,kBAAkB;AACvB,MAAMC,MAAM,CAAC;EAChBC,WAAW,CAAC5B,OAAO,EAAE;IACjB6B,MAAM,CAACC,cAAc,CAAC,IAAI,EAAE,SAAS,EAAE;MACnCC,UAAU,EAAE,IAAI;MAChBC,KAAK,EAAEhC,OAAO;MACdiC,QAAQ,EAAE;IACtB,CAAS,CAAC;EACV;EACIC,IAAI,CAACC,QAAQ,EAAEC,IAAI,EAAE;IACjB,MAAMC,KAAK,GAAGF,QAAQ,CAACG,WAAW,EAAE;IACpC,IAAInC,SAAS,CAACkC,KAAK,CAAC,IAAI,IAAI,EAAE;MAC1B,IAAI,CAACE,kBAAkB,CAAC,wBAAwB,EAAE,UAAU,EAAEJ,QAAQ,CAAC;IACnF;IACQ,IAAI1B,SAAS,GAAGN,SAAS,CAACkC,KAAK,CAAC,EAAE;MAC9B;IACZ;IACQG,OAAO,CAACC,GAAG,CAACC,KAAK,CAACF,OAAO,EAAEJ,IAAI,CAAC;EACxC;EACIhC,KAAK,GAAU;IAAA,kCAANgC,IAAI;MAAJA,IAAI;IAAA;IACT,IAAI,CAACF,IAAI,CAACP,MAAM,CAACgB,MAAM,CAACC,KAAK,EAAER,IAAI,CAAC;EAC5C;EACI/B,IAAI,GAAU;IAAA,mCAAN+B,IAAI;MAAJA,IAAI;IAAA;IACR,IAAI,CAACF,IAAI,CAACP,MAAM,CAACgB,MAAM,CAACE,IAAI,EAAET,IAAI,CAAC;EAC3C;EACIU,IAAI,GAAU;IAAA,mCAANV,IAAI;MAAJA,IAAI;IAAA;IACR,IAAI,CAACF,IAAI,CAACP,MAAM,CAACgB,MAAM,CAACI,OAAO,EAAEX,IAAI,CAAC;EAC9C;EACIY,SAAS,CAAC1B,OAAO,EAAE2B,IAAI,EAAEC,MAAM,EAAE;IACrC;IACQ,IAAIhD,aAAa,EAAE;MACf,OAAO,IAAI,CAAC8C,SAAS,CAAC,gBAAgB,EAAEC,IAAI,EAAE,EAAE,CAAC;IAC7D;IACQ,IAAI,CAACA,IAAI,EAAE;MACPA,IAAI,GAAGtB,MAAM,CAACwB,MAAM,CAACC,aAAa;IAC9C;IACQ,IAAI,CAACF,MAAM,EAAE;MACTA,MAAM,GAAG,EAAE;IACvB;IACQ,MAAMG,cAAc,GAAG,EAAE;IACzBxB,MAAM,CAACyB,IAAI,CAACJ,MAAM,CAAC,CAACrC,OAAO,CAAE0C,GAAG,IAAK;MACjC,MAAMvB,KAAK,GAAGkB,MAAM,CAACK,GAAG,CAAC;MACzB,IAAI;QACA,IAAIvB,KAAK,YAAYwB,UAAU,EAAE;UAC7B,IAAIC,GAAG,GAAG,EAAE;UACZ,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG1B,KAAK,CAACd,MAAM,EAAEwC,CAAC,EAAE,EAAE;YACnCD,GAAG,IAAI/B,GAAG,CAACM,KAAK,CAAC0B,CAAC,CAAC,IAAI,CAAC,CAAC;YACzBD,GAAG,IAAI/B,GAAG,CAACM,KAAK,CAAC0B,CAAC,CAAC,GAAG,IAAI,CAAC;UACnD;UACoBL,cAAc,CAACpC,IAAI,CAACsC,GAAG,GAAG,gBAAgB,GAAGE,GAAG,GAAG,GAAG,CAAC;QAC3E,CAAiB,MACI;UACDJ,cAAc,CAACpC,IAAI,CAACsC,GAAG,GAAG,GAAG,GAAGI,IAAI,CAACC,SAAS,CAAC5B,KAAK,CAAC,CAAC;QAC1E;MACA,CAAa,CACD,OAAOzB,KAAK,EAAE;QACV8C,cAAc,CAACpC,IAAI,CAACsC,GAAG,GAAG,GAAG,GAAGI,IAAI,CAACC,SAAS,CAACV,MAAM,CAACK,GAAG,CAAC,CAACM,QAAQ,EAAE,CAAC,CAAC;MACvF;IACA,CAAS,CAAC;IACFR,cAAc,CAACpC,IAAI,CAAE,QAAOgC,IAAK,EAAC,CAAC;IACnCI,cAAc,CAACpC,IAAI,CAAE,WAAU,IAAI,CAACjB,OAAQ,EAAC,CAAC;IAC9C,MAAM8D,MAAM,GAAGxC,OAAO;IACtB,IAAIyC,GAAG,GAAG,EAAE;IACZ,QAAQd,IAAI;MACR,KAAKxB,SAAS,CAACuC,aAAa;QAAE;UAC1BD,GAAG,GAAG,eAAe;UACrB,MAAME,KAAK,GAAG3C,OAAO;UACrB,QAAQ2C,KAAK;YACT,KAAK,UAAU;YACf,KAAK,WAAW;YAChB,KAAK,kBAAkB;cACnBF,GAAG,IAAI,GAAG,GAAGE,KAAK;cAClB;YACJ,KAAK,gBAAgB;YACrB,KAAK,gBAAgB;cACjBF,GAAG,IAAI,cAAc;cACrB;YACJ,KAAK,wBAAwB;cACzBA,GAAG,IAAI,iBAAiB;cACxB;UAAM;UAEd;QAChB;MACY,KAAKtC,SAAS,CAACyC,cAAc;MAC7B,KAAKzC,SAAS,CAAC0C,kBAAkB;MACjC,KAAK1C,SAAS,CAAC2C,WAAW;MAC1B,KAAK3C,SAAS,CAAC4C,aAAa;MAC5B,KAAK5C,SAAS,CAAC6C,uBAAuB;MACtC,KAAK7C,SAAS,CAAC8C,oBAAoB;MACnC,KAAK9C,SAAS,CAAC+C,uBAAuB;QAClCT,GAAG,GAAGd,IAAI;QACV;IAAM;IAEd,IAAIc,GAAG,EAAE;MACLzC,OAAO,IAAI,8CAA8C,GAAGyC,GAAG,GAAG,IAAI;IAClF;IACQ,IAAIV,cAAc,CAACnC,MAAM,EAAE;MACvBI,OAAO,IAAI,IAAI,GAAG+B,cAAc,CAAClC,IAAI,CAAC,IAAI,CAAC,GAAG,GAAG;IAC7D;IACA;IACQ,MAAMZ,KAAK,GAAG,IAAIS,KAAK,CAACM,OAAO,CAAC;IAChCf,KAAK,CAACuD,MAAM,GAAGA,MAAM;IACrBvD,KAAK,CAAC0C,IAAI,GAAGA,IAAI;IACjBpB,MAAM,CAACyB,IAAI,CAACJ,MAAM,CAAC,CAACrC,OAAO,CAAC,UAAU0C,GAAG,EAAE;MACvChD,KAAK,CAACgD,GAAG,CAAC,GAAGL,MAAM,CAACK,GAAG,CAAC;IACpC,CAAS,CAAC;IACF,OAAOhD,KAAK;EACpB;EACIkE,UAAU,CAACnD,OAAO,EAAE2B,IAAI,EAAEC,MAAM,EAAE;IAC9B,MAAM,IAAI,CAACF,SAAS,CAAC1B,OAAO,EAAE2B,IAAI,EAAEC,MAAM,CAAC;EACnD;EACIX,kBAAkB,CAACjB,OAAO,EAAEoD,IAAI,EAAE1C,KAAK,EAAE;IACrC,OAAO,IAAI,CAACyC,UAAU,CAACnD,OAAO,EAAEK,MAAM,CAACwB,MAAM,CAACwB,gBAAgB,EAAE;MAC5DC,QAAQ,EAAEF,IAAI;MACd1C,KAAK,EAAEA;IACnB,CAAS,CAAC;EACV;EACI6C,MAAM,CAACC,SAAS,EAAExD,OAAO,EAAE2B,IAAI,EAAEC,MAAM,EAAE;IACrC,IAAI,CAAC,CAAC4B,SAAS,EAAE;MACb;IACZ;IACQ,IAAI,CAACL,UAAU,CAACnD,OAAO,EAAE2B,IAAI,EAAEC,MAAM,CAAC;EAC9C;EACI6B,cAAc,CAACD,SAAS,EAAExD,OAAO,EAAEoD,IAAI,EAAE1C,KAAK,EAAE;IAC5C,IAAI,CAAC,CAAC8C,SAAS,EAAE;MACb;IACZ;IACQ,IAAI,CAACvC,kBAAkB,CAACjB,OAAO,EAAEoD,IAAI,EAAE1C,KAAK,CAAC;EACrD;EACIgD,cAAc,CAAC1D,OAAO,EAAE;IAIpB,IAAIC,eAAe,EAAE;MACjB,IAAI,CAACkD,UAAU,CAAC,6CAA6C,EAAE9C,MAAM,CAACwB,MAAM,CAAC8B,qBAAqB,EAAE;QAChGC,SAAS,EAAE,4BAA4B;QAAEpE,IAAI,EAAES;MAC/D,CAAa,CAAC;IACd;EACA;EACI4D,eAAe,CAACnD,KAAK,EAAEV,OAAO,EAAE;IAC5B,IAAI,OAAQU,KAAM,KAAK,QAAQ,EAAE;MAC7B;IACZ;IACQ,IAAIV,OAAO,IAAI,IAAI,EAAE;MACjBA,OAAO,GAAG,gBAAgB;IACtC;IACQ,IAAIU,KAAK,GAAG,CAAC,IAAIA,KAAK,IAAI,gBAAgB,EAAE;MACxC,IAAI,CAACyC,UAAU,CAACnD,OAAO,EAAEK,MAAM,CAACwB,MAAM,CAACa,aAAa,EAAE;QAClDkB,SAAS,EAAE,kBAAkB;QAC7BjB,KAAK,EAAE,mBAAmB;QAC1BjC,KAAK,EAAEA;MACvB,CAAa,CAAC;IACd;IACQ,IAAIA,KAAK,GAAG,CAAC,EAAE;MACX,IAAI,CAACyC,UAAU,CAACnD,OAAO,EAAEK,MAAM,CAACwB,MAAM,CAACa,aAAa,EAAE;QAClDkB,SAAS,EAAE,kBAAkB;QAC7BjB,KAAK,EAAE,aAAa;QACpBjC,KAAK,EAAEA;MACvB,CAAa,CAAC;IACd;EACA;EACIoD,kBAAkB,CAACC,KAAK,EAAEC,aAAa,EAAEhE,OAAO,EAAE;IAC9C,IAAIA,OAAO,EAAE;MACTA,OAAO,GAAG,IAAI,GAAGA,OAAO;IACpC,CAAS,MACI;MACDA,OAAO,GAAG,EAAE;IACxB;IACQ,IAAI+D,KAAK,GAAGC,aAAa,EAAE;MACvB,IAAI,CAACb,UAAU,CAAC,kBAAkB,GAAGnD,OAAO,EAAEK,MAAM,CAACwB,MAAM,CAACoC,gBAAgB,EAAE;QAC1EF,KAAK,EAAEA,KAAK;QACZC,aAAa,EAAEA;MAC/B,CAAa,CAAC;IACd;IACQ,IAAID,KAAK,GAAGC,aAAa,EAAE;MACvB,IAAI,CAACb,UAAU,CAAC,oBAAoB,GAAGnD,OAAO,EAAEK,MAAM,CAACwB,MAAM,CAACqC,mBAAmB,EAAE;QAC/EH,KAAK,EAAEA,KAAK;QACZC,aAAa,EAAEA;MAC/B,CAAa,CAAC;IACd;EACA;EACIG,QAAQ,CAACC,MAAM,EAAEC,IAAI,EAAE;IACnB,IAAID,MAAM,KAAK7D,MAAM,IAAI6D,MAAM,IAAI,IAAI,EAAE;MACrC,IAAI,CAACjB,UAAU,CAAC,aAAa,EAAE9C,MAAM,CAACwB,MAAM,CAACiB,WAAW,EAAE;QAAEM,IAAI,EAAEiB,IAAI,CAACjB;MAAI,CAAE,CAAC;IAC1F;EACA;EACIkB,aAAa,CAACF,MAAM,EAAEC,IAAI,EAAE;IACxB,IAAID,MAAM,KAAKC,IAAI,EAAE;MACjB,IAAI,CAAClB,UAAU,CAAC,oCAAoC,GAAGd,IAAI,CAACC,SAAS,CAAC+B,IAAI,CAACjB,IAAI,CAAC,GAAG,4BAA4B,EAAE/C,MAAM,CAACwB,MAAM,CAAC8B,qBAAqB,EAAE;QAAEP,IAAI,EAAEgB,MAAM,CAAChB,IAAI;QAAEQ,SAAS,EAAE;MAAK,CAAE,CAAC;IAC1M,CAAS,MACI,IAAIQ,MAAM,KAAK7D,MAAM,IAAI6D,MAAM,IAAI,IAAI,EAAE;MAC1C,IAAI,CAACjB,UAAU,CAAC,aAAa,EAAE9C,MAAM,CAACwB,MAAM,CAACiB,WAAW,EAAE;QAAEM,IAAI,EAAEiB,IAAI,CAACjB;MAAI,CAAE,CAAC;IAC1F;EACA;EACI,OAAOmB,YAAY,GAAG;IAClB,IAAI,CAACnF,aAAa,EAAE;MAChBA,aAAa,GAAG,IAAIiB,MAAM,CAAC3B,SAAO,CAAC;IAC/C;IACQ,OAAOU,aAAa;EAC5B;EACI,OAAOoF,aAAa,CAACC,UAAU,EAAEC,SAAS,EAAE;IACxC,IAAI,CAACD,UAAU,IAAIC,SAAS,EAAE;MAC1B,IAAI,CAACH,YAAY,EAAE,CAACpB,UAAU,CAAC,uCAAuC,EAAE9C,MAAM,CAACwB,MAAM,CAAC8B,qBAAqB,EAAE;QACzGC,SAAS,EAAE;MAC3B,CAAa,CAAC;IACd;IACQ,IAAIjF,sBAAsB,EAAE;MACxB,IAAI,CAAC8F,UAAU,EAAE;QACb;MAChB;MACY,IAAI,CAACF,YAAY,EAAE,CAACpB,UAAU,CAAC,4BAA4B,EAAE9C,MAAM,CAACwB,MAAM,CAAC8B,qBAAqB,EAAE;QAC9FC,SAAS,EAAE;MAC3B,CAAa,CAAC;IACd;IACQhF,aAAa,GAAG,CAAC,CAAC6F,UAAU;IAC5B9F,sBAAsB,GAAG,CAAC,CAAC+F,SAAS;EAC5C;EACI,OAAOC,WAAW,CAAC9D,QAAQ,EAAE;IACzB,MAAME,KAAK,GAAGlC,SAAS,CAACgC,QAAQ,CAACG,WAAW,EAAE,CAAC;IAC/C,IAAID,KAAK,IAAI,IAAI,EAAE;MACfV,MAAM,CAACkE,YAAY,EAAE,CAAC/C,IAAI,CAAC,sBAAsB,GAAGX,QAAQ,CAAC;MAC7D;IACZ;IACQ1B,SAAS,GAAG4B,KAAK;EACzB;EACI,OAAO6D,IAAI,CAAClG,OAAO,EAAE;IACjB,OAAO,IAAI2B,MAAM,CAAC3B,OAAO,CAAC;EAClC;AACA;AACA2B,MAAM,CAACwB,MAAM,GAAG1B,SAAS;AACzBE,MAAM,CAACgB,MAAM,GAAGnB,QAAQ;ACjWjB,MAAMxB,OAAO,GAAG,kBAAkB;ACCxBmG,SAAI,IAAIA,SAAI,CAACC,SAAS,IAAK,UAAUC,OAAO,EAAEC,UAAU,EAAEC,CAAC,EAAEC,SAAS,EAAE;EACrF,SAASC,KAAK,CAACzE,KAAK,EAAE;IAAE,OAAOA,KAAK,YAAYuE,CAAC,GAAGvE,KAAK,GAAG,IAAIuE,CAAC,CAAC,UAAUG,OAAO,EAAE;MAAEA,OAAO,CAAC1E,KAAK,CAAC;IAAC,CAAE,CAAC;EAAC;EAC1G,OAAO,KAAKuE,CAAC,KAAKA,CAAC,GAAGI,OAAO,CAAC,EAAE,UAAUD,OAAO,EAAEE,MAAM,EAAE;IACvD,SAASC,SAAS,CAAC7E,KAAK,EAAE;MAAE,IAAI;QAAE8E,IAAI,CAACN,SAAS,CAACO,IAAI,CAAC/E,KAAK,CAAC,CAAC;MAAC,CAAE,CAAC,OAAOgF,CAAC,EAAE;QAAEJ,MAAM,CAACI,CAAC,CAAC;MAAC;IAAE;IACzF,SAASC,QAAQ,CAACjF,KAAK,EAAE;MAAE,IAAI;QAAE8E,IAAI,CAACN,SAAS,CAAC,OAAO,CAAC,CAACxE,KAAK,CAAC,CAAC;MAAC,CAAE,CAAC,OAAOgF,CAAC,EAAE;QAAEJ,MAAM,CAACI,CAAC,CAAC;MAAC;IAAE;IAC5F,SAASF,IAAI,CAACI,MAAM,EAAE;MAAEA,MAAM,CAACC,IAAI,GAAGT,OAAO,CAACQ,MAAM,CAAClF,KAAK,CAAC,GAAGyE,KAAK,CAACS,MAAM,CAAClF,KAAK,CAAC,CAACoF,IAAI,CAACP,SAAS,EAAEI,QAAQ,CAAC;IAAC;IAC5GH,IAAI,CAAC,CAACN,SAAS,GAAGA,SAAS,CAAC9D,KAAK,CAAC2D,OAAO,EAAEC,UAAU,IAAI,EAAE,CAAC,EAAES,IAAI,EAAE,CAAC;EAC7E,CAAK,CAAC;AACN;AAGA,MAAMM,MAAM,GAAG,IAAI1F,MAAM,CAAC3B,OAAO,CAAC;AAC3B,SAASsH,cAAc,CAACC,MAAM,EAAE7C,IAAI,EAAE1C,KAAK,EAAE;EAChDH,MAAM,CAACC,cAAc,CAACyF,MAAM,EAAE7C,IAAI,EAAE;IAChC3C,UAAU,EAAE,IAAI;IAChBC,KAAK,EAAEA,KAAK;IACZC,QAAQ,EAAE;EAClB,CAAK,CAAC;AACN;AA4CA,MAAMuF,MAAM,GAAG;EAAEC,MAAM,EAAE,IAAI;EAAEC,OAAO,EAAE,IAAI;EAAE,UAAU,EAAE,IAAI;EAAEC,MAAM,EAAE,IAAI;EAAEC,MAAM,EAAE;AAAI,CAAE;AAC5F,SAASC,SAAS,CAACN,MAAM,EAAE;EAC3B;EACI,IAAIA,MAAM,KAAKO,SAAS,IAAIP,MAAM,KAAK,IAAI,IAAIC,MAAM,CAAC,OAAQD,MAAO,CAAC,EAAE;IACpE,OAAO,IAAI;EACnB;EACI,IAAIQ,KAAK,CAACC,OAAO,CAACT,MAAM,CAAC,IAAI,OAAQA,MAAO,KAAK,QAAQ,EAAE;IACvD,IAAI,CAAC1F,MAAM,CAACoG,QAAQ,CAACV,MAAM,CAAC,EAAE;MAC1B,OAAO,KAAK;IACxB;IACQ,MAAMjE,IAAI,GAAGzB,MAAM,CAACyB,IAAI,CAACiE,MAAM,CAAC;IAChC,KAAK,IAAI7D,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGJ,IAAI,CAACpC,MAAM,EAAEwC,CAAC,EAAE,EAAE;MAClC,IAAI1B,KAAK,GAAG,IAAI;MAChB,IAAI;QACAA,KAAK,GAAGuF,MAAM,CAACjE,IAAI,CAACI,CAAC,CAAC,CAAC;MACvC,CAAa,CACD,OAAOnD,KAAK,EAAE;QAC1B;QACA;QACgB;MAChB;MACY,IAAI,CAACsH,SAAS,CAAC7F,KAAK,CAAC,EAAE;QACnB,OAAO,KAAK;MAC5B;IACA;IACQ,OAAO,IAAI;EACnB;EACI,OAAOqF,MAAM,CAAC9E,kBAAkB,CAAE,mBAAkB,OAAQgF,MAAQ,EAAC,EAAE,QAAQ,EAAEA,MAAM,CAAC;AAC5F;AACA;AACA;AACA,SAASW,SAAS,CAACX,MAAM,EAAE;EACvB,IAAIM,SAAS,CAACN,MAAM,CAAC,EAAE;IACnB,OAAOA,MAAM;EACrB;EACA;EACI,IAAIQ,KAAK,CAACC,OAAO,CAACT,MAAM,CAAC,EAAE;IACvB,OAAO1F,MAAM,CAACsG,MAAM,CAACZ,MAAM,CAACa,GAAG,CAAEC,IAAI,IAAKC,QAAQ,CAACD,IAAI,CAAC,CAAC,CAAC;EAClE;EACI,IAAI,OAAQd,MAAO,KAAK,QAAQ,EAAE;IAC9B,MAAML,MAAM,GAAG,EAAE;IACjB,KAAK,MAAM3D,GAAG,IAAIgE,MAAM,EAAE;MACtB,MAAMvF,KAAK,GAAGuF,MAAM,CAAChE,GAAG,CAAC;MACzB,IAAIvB,KAAK,KAAK8F,SAAS,EAAE;QACrB;MAChB;MACYR,cAAc,CAACJ,MAAM,EAAE3D,GAAG,EAAE+E,QAAQ,CAACtG,KAAK,CAAC,CAAC;IACxD;IACQ,OAAOkF,MAAM;EACrB;EACI,OAAOG,MAAM,CAAC9E,kBAAkB,CAAE,mBAAkB,OAAQgF,MAAQ,EAAC,EAAE,QAAQ,EAAEA,MAAM,CAAC;AAC5F;AACO,SAASe,QAAQ,CAACf,MAAM,EAAE;EAC7B,OAAOW,SAAS,CAACX,MAAM,CAAC;AAC5B;;ACnHA;AACA,MAAMgB,8BAA8B,GAAG,GAAG;AAE1C;AACA,MAAMC,8BAA8B,GAAG,EAAE;AAEzC;;;;;;;AAOG;MACUC,cAAc;EAUzB7G,WACmB,YAAwB,EACqB;IAAA,IAA7C8G,mFAAeH,8BAA8B;IAD7C,IAAW,eAAXI,WAAW;IACX,IAAY,gBAAZD,YAAY;IAR/B;;;AAGG;IACK,IAAY,gBAAwB,EAAE;;EAO9C;;;;;;AAMG;EACGE,cAAc,CAACC,OAAuB;;MAC1C,MAAMC,eAAe,GAAiB;QACpCD,OAAO;QACPnC,OAAO,EAAEoB,SAAS;QAClBlB,MAAM,EAAEkB;OACT;MAED,MAAMiB,OAAO,GAAG,IAAIpC,OAAO,CAAC,CAACD,OAAO,EAAEE,MAAM,KAAI;QAC9CkC,eAAe,CAACpC,OAAO,GAAGA,OAAO;QACjCoC,eAAe,CAAClC,MAAM,GAAGA,MAAM;MACjC,CAAC,CAAC;MAEF,IAAI,CAACoC,YAAY,CAAC/H,IAAI,CAAC6H,eAAe,CAAC;MAEvC,IAAI,IAAI,CAACE,YAAY,CAAC9H,MAAM,KAAK,IAAI,CAACwH,YAAY,EAAE;;QAElD,KAAK,IAAI,CAACO,gBAAgB,EAAE;MAC7B,OAAM,IAAI,CAAC,IAAI,CAACC,iBAAiB,EAAE;;QAElC,IAAI,CAACA,iBAAiB,GAAGC,UAAU,CACjC,MAAM,IAAI,CAACF,gBAAgB,EAAE,EAC7BT,8BAA8B,CAC/B;MACF;MAED,OAAOO,OAAO;KACf;EAAA;EAED;;;AAGG;EACWE,gBAAgB;;;;MAG5B,MAAMG,KAAK,GAAG,IAAI,CAACJ,YAAY;MAC/B,IAAI,CAACA,YAAY,GAAG,EAAE;MACtB,IAAI,IAAI,CAACE,iBAAiB,EAAE;QAC1BG,YAAY,CAAC,IAAI,CAACH,iBAAiB,CAAC;QACpC,IAAI,CAACA,iBAAiB,GAAGpB,SAAS;MACnC;;MAGD,MAAMe,OAAO,GAAGO,KAAK,CAAChB,GAAG,CAACkB,QAAQ,IAAIA,QAAQ,CAACT,OAAO,CAAC;MAEvD,OAAO,IAAI,CAACF,WAAW,CAACE,OAAO,CAAC,CAACzB,IAAI,CACnCF,MAAM,IAAG;;;QAGPkC,KAAK,CAACvI,OAAO,CAAC,CAACiI,eAAe,EAAES,KAAK,KAAI;UACvC,MAAMC,OAAO,GAAGtC,MAAM,CAACqC,KAAK,CAAC;UAC7B,IAAIC,OAAO,CAACjJ,KAAK,EAAE;YACjB,MAAMA,KAAK,GAAG,IAAIS,KAAK,CAACwI,OAAO,CAACjJ,KAAK,CAACe,OAAO,CAAC;YAC7Cf,KAAa,CAAC0C,IAAI,GAAGuG,OAAO,CAACjJ,KAAK,CAAC0C,IAAI;YACvC1C,KAAa,CAACkJ,IAAI,GAAGD,OAAO,CAACjJ,KAAK,CAACkJ,IAAI;YACxCX,eAAe,CAAClC,MAAO,CAACrG,KAAK,CAAC;UAC/B,OAAM;YACLuI,eAAe,CAACpC,OAAQ,CAAC8C,OAAO,CAACtC,MAAM,CAAC;UACzC;QACH,CAAC,CAAC;OACH,EACD3G,KAAK,IAAG;QACN6I,KAAK,CAACvI,OAAO,CAACiI,eAAe,IAAG;UAC9BA,eAAe,CAAClC,MAAO,CAACrG,KAAK,CAAC;QAChC,CAAC,CAAC;MACJ,CAAC,CACF;KACF;EAAA;AACF;;AC9ED;;;;;;;AAOG;AACG,MAAOmJ,eACX,SAAQC,eAAe;;EAcvB/H,YAAYgI,MAAqB;;IAE/B,MAAMC,MAAM,GAAGH,eAAe,CAACI,SAAS,CAACF,MAAM,CAACC,MAAM,CAAC;;IAGvD,MAAME,cAAc,GAAGL,eAAe,CAACM,iBAAiB,CAACJ,MAAM,CAACK,OAAO,CAAC;IACxE,MAAMC,UAAU,GAAGR,eAAe,CAACS,wBAAwB,CACzDJ,cAAc,EACdF,MAAM,EACN,MAAM,CACP;;;IAID,IAAID,MAAM,CAAC7F,GAAG,KAAK+D,SAAS,EAAE;MAC5BoC,UAAU,CAACnG,GAAG,GAAG6F,MAAM,CAAC7F,GAAG;IAC5B;IAEDmG,UAAU,CAACE,aAAa,GAAGR,MAAM,CAACS,UAAU;;;;IAK5C,MAAMC,aAAa,GAAGC,aAAa,CAACR,cAAc,CAAC;IACnD,KAAK,CAACG,UAAU,EAAEI,aAAa,CAAC;IAEhC,IAAI,CAACT,MAAM,GAAGD,MAAM,CAACC,MAAM;IAC3B,IAAI,CAACQ,UAAU,GAAGT,MAAM,CAACS,UAAU;IACnC,IAAI,CAACG,aAAa,GAAGZ,MAAM,CAACY,aAAa;;IAGzC,MAAMC,iBAAiB,GAAQ5I,sBAAI,CAACqI,UAAU,CAAE;IAChDO,iBAAiB,CAACC,OAAQ,CAAC,2BAA2B,CAAC,GAAG,WAAW;IACrE,MAAM/B,WAAW,GACfgC,QAA0B,IACI;MAC9B,OAAOC,SAAS,CAACH,iBAAiB,EAAE9G,IAAI,CAACC,SAAS,CAAC+G,QAAQ,CAAC,CAAC;IAC/D,CAAC;IACD,IAAI,CAACE,OAAO,GAAG,IAAIpC,cAAc,CAACE,WAAW,CAAC;;EAGhD;;;;;;AAMG;EACH,OAAOmB,SAAS,CAACD,MAAW;IAC1B,IAAIA,MAAM,IAAI,IAAI,EAAE;MAClB,OAAOiB,uBAAuB;IAC/B;IACD,IAAIjB,MAAM,IAAI,OAAOA,MAAM,KAAK,QAAQ,EAAE;MACxC,MAAM,IAAI7I,KAAK,CACb,mBAAmB6I,MAAM,sCAAsC,CAChE;IACF;IACD,OAAOA,MAAM;;EAGf;;;;;;;;AAQG;EACH,OAAOkB,UAAU,CAACd,OAAmB;IACnC,IAAI,OAAOA,OAAO,KAAK,QAAQ,IAAIA,OAAO,IAAIe,cAAc,EAAE;MAC5D,OAAOA,cAAc,CAACf,OAAO,CAAC;IAC/B;;IAGD,OAAOgB,UAAoB,CAAChB,OAAO,CAAC;;EAGtC;;;;AAIG;EACH,OAAOD,iBAAiB,CAACC,OAAoB;IAC3C,IAAIA,OAAO,KAAKnC,SAAS,EAAE;MACzB,OAAOoD,eAAe;IACvB;IAED,IAAI,OAAOjB,OAAO,KAAK,QAAQ,EAAE;MAC/B,MAAM,IAAIjJ,KAAK,CACb,oBAAoBiJ,OAAO,uCAAuC,CACnE;IACF;;IAGD,MAAMkB,cAAc,GAAGtJ,MAAM,CAACuJ,MAAM,CAACC,OAAO,CAAC,CAACC,QAAQ,CAACrB,OAAkB,CAAC;IAC1E,IAAI,CAACkB,cAAc,EAAE;MACnB,MAAM,IAAInK,KAAK,CACb,oBAAoBiJ,OAA6C,yCAC/D,GAAGpI,MAAM,CAACuJ,MAAM,CAACC,OAAO,CAAC,CAAClK,IAAI,CAAC,IAAI,CAAC,GAAG,CAC1C;IACF;IACD,OAAO8I,OAAkB;;EAG3B;;;;;AAKG;EACH,OAAOE,wBAAwB,CAC7BF,OAAgB,EAChBJ,MAAc,EACd0B,IAAoB;IAEpB,MAAMxH,GAAG,GACPwH,IAAI,KAAK,MAAM,GACXC,iBAAiB,CAACvB,OAAO,EAAEJ,MAAM,CAAC,GAClC4B,eAAe,CAACxB,OAAO,EAAEJ,MAAM,CAAC;IACtC,OAAO;MACLa,OAAO,EAAEgB,UAAU,GACf;QACE,4BAA4B,EAAEC;MAC/B,IACD;QACE,4BAA4B,EAAEA,OAAO;QACrC,iBAAiB,EAAE;MACpB;MACLC,SAAS,EAAE,IAAI;MACf7H;KACD;;EAGH;;;;;AAKG;EACG8H,aAAa;;;;;;;MACjB,IAAI5B,OAAO,GAAG,IAAI,CAACA,OAAO;MAC1B,IAAIA,OAAO,IAAI,IAAI,EAAE;QACnBA,OAAO,GAAG,MAAM6B,MAAM,cAAa,WAAE;QAErC,IAAI,CAAC7B,OAAO,EAAE;UACZ,MAAM,IAAIjJ,KAAK,CAAC,qBAAqB,CAAC;QACvC;MACF;MACD,OAAOiJ,OAAO;KACf;EAAA;EAED8B,aAAa;IACXC,OAAO,CAAC,4DAA4D,CAAC;;EAGvE;;;;;AAKG;EACHC,mBAAmB;IACjB,OAAO,IAAI,CAACpC,MAAM,KAAKiB,uBAAuB;;EAGhD;;;;;;;;AAQG;;EAEHoB,IAAI,CAACC,MAAc,EAAEjJ,MAAkB;IACrC,OAAO,IAAI,CAACkJ,KAAK,CAACD,MAAM,EAAEjJ,MAAM,EAAE,MAAM,CAAC;;EAG3C;;;;;;;;AAQG;EACHkJ,KAAK,CACHD,MAAc,EACdjJ,MAAkB,EAClBmJ,UAAkB,EACA;IAAA,IAAlBC,UAAU,uEAAG,KAAK;IAElB,MAAMzD,OAAO,GAAG;MACdsD,MAAM;MACNjJ,MAAM;MACNqJ,EAAE,EAAE,IAAI,CAACC,OAAO,EAAE;MAClBC,OAAO,EAAE;KACV;;IAGD,MAAMvC,UAAU,GAAQrI,sBAAI,CAACqI,UAAU,CAAE;IACzCA,UAAU,CAACQ,OAAQ,CAAC,2BAA2B,CAAC,GAAG2B,UAAU;IAE7D,IAAI,IAAI,CAAC7B,aAAa,IAAI8B,UAAU,EAAE;MACpC,OAAO,IAAI,CAACzB,OAAO,CAACjC,cAAc,CAACC,OAAyB,CAAC;IAC9D;;IAGD,IAAI,CAAC6D,IAAI,CAAC,OAAO,EAAE;MACjBC,MAAM,EAAE,SAAS;MACjB9D,OAAO,EAAEP,QAAQ,CAACO,OAAO,CAAC;MAC1B+D,QAAQ,EAAE;IACX,EAAC;;;IAIF,MAAMC,KAAK,GAAG,CAAC,aAAa,EAAE,iBAAiB,CAAC,CAACC,OAAO,CAACX,MAAM,CAAC,IAAI,CAAC;IACrE,IAAIU,KAAK,IAAI,IAAI,CAACE,MAAM,CAACZ,MAAM,CAAC,EAAE;MAChC,OAAO,IAAI,CAACY,MAAM,CAACZ,MAAM,CAAC;IAC3B;IAED,MAAMjF,MAAM,GAAG0D,SAAS,CACtB,IAAI,CAACV,UAAU,EACfvG,IAAI,CAACC,SAAS,CAACiF,OAAO,CAAC,EACvBmE,SAAS,CACV,CAAC5F,IAAI,CACJF,MAAM,IAAG;MACP,IAAI,CAACwF,IAAI,CAAC,OAAO,EAAE;QACjBC,MAAM,EAAE,UAAU;QAClB9D,OAAO;QACPoE,QAAQ,EAAE/F,MAAM;QAChB0F,QAAQ,EAAE;MACX,EAAC;MAEF,OAAO1F,MAAM;KACd,EACD3G,KAAK,IAAG;MACN,IAAI,CAACmM,IAAI,CAAC,OAAO,EAAE;QACjBC,MAAM,EAAE,UAAU;QAClBpM,KAAK;QACLsI,OAAO;QACP+D,QAAQ,EAAE;MACX,EAAC;MAEF,MAAMrM,KAAK;IACb,CAAC,CACF;;IAGD,IAAIsM,KAAK,EAAE;MACT,IAAI,CAACE,MAAM,CAACZ,MAAM,CAAC,GAAGjF,MAAM;MAC5BiC,UAAU,CAAC,MAAK;;QAEd,IAAI,CAAC4D,MAAM,CAACZ,MAAM,CAAC,GAAG,IAAI;OAC3B,EAAE,CAAC,CAAC;IACN;IAED,OAAOjF,MAAM;;AAEhB;AAED;;;;;;AAMG;AACH,SAAS8F,SAAS,CAACxD,OAGlB;EACC,IAAIA,OAAO,CAACjJ,KAAK,EAAE;IACjB,MAAMA,KAAK,GAAQ,IAAIS,KAAK,CAACwI,OAAO,CAACjJ,KAAK,CAACe,OAAO,CAAC;IACnDf,KAAK,CAAC0C,IAAI,GAAGuG,OAAO,CAACjJ,KAAK,CAAC0C,IAAI;IAC/B1C,KAAK,CAACkJ,IAAI,GAAGD,OAAO,CAACjJ,KAAK,CAACkJ,IAAI;IAC/B,MAAMlJ,KAAK;EACZ;EAED,OAAOiJ,OAAO,CAACtC,MAAM;AACvB","names":["version","_permanentCensorErrors","_censorErrors","LogLevels","debug","info","warning","error","off","_logLevel","_globalLogger","_checkNormalize","missing","forEach","form","normalize","Error","push","length","join","String","fromCharCode","message","_normalizeError","LogLevel","ErrorCode","HEX","Logger","constructor","Object","defineProperty","enumerable","value","writable","_log","logLevel","args","level","toLowerCase","throwArgumentError","console","log","apply","levels","DEBUG","INFO","warn","WARNING","makeError","code","params","errors","UNKNOWN_ERROR","messageDetails","keys","key","Uint8Array","hex","i","JSON","stringify","toString","reason","url","NUMERIC_FAULT","fault","CALL_EXCEPTION","INSUFFICIENT_FUNDS","MISSING_NEW","NONCE_EXPIRED","REPLACEMENT_UNDERPRICED","TRANSACTION_REPLACED","UNPREDICTABLE_GAS_LIMIT","throwError","name","INVALID_ARGUMENT","argument","assert","condition","assertArgument","checkNormalize","UNSUPPORTED_OPERATION","operation","checkSafeUint53","checkArgumentCount","count","expectedCount","MISSING_ARGUMENT","UNEXPECTED_ARGUMENT","checkNew","target","kind","checkAbstract","globalLogger","setCensorship","censorship","permanent","setLogLevel","from","this","__awaiter","thisArg","_arguments","P","generator","adopt","resolve","Promise","reject","fulfilled","step","next","e","rejected","result","done","then","logger","defineReadOnly","object","opaque","bigint","boolean","number","string","_isFrozen","undefined","Array","isArray","isFrozen","_deepCopy","freeze","map","item","deepCopy","DEFAULT_MAX_REQUEST_BATCH_SIZE","DEFAULT_REQUEST_BATCH_DELAY_MS","RequestBatcher","maxBatchSize","sendBatchFn","enqueueRequest","request","inflightRequest","promise","pendingBatch","sendBatchRequest","pendingBatchTimer","setTimeout","batch","clearTimeout","inflight","index","payload","data","AlchemyProvider","JsonRpcProvider","config","apiKey","getApiKey","alchemyNetwork","getAlchemyNetwork","network","connection","getAlchemyConnectionInfo","throttleLimit","maxRetries","ethersNetwork","EthersNetwork","batchRequests","batcherConnection","headers","requests","fetchJson","batcher","DEFAULT_ALCHEMY_API_KEY","getNetwork","CustomNetworks","getNetworkFromEthers","DEFAULT_NETWORK","isValidNetwork","values","Network","includes","type","getAlchemyHttpUrl","getAlchemyWsUrl","IS_BROWSER","VERSION","allowGzip","detectNetwork","_super","_startPending","logWarn","isCommunityResource","send","method","_send","methodName","forceBatch","id","_nextId","jsonrpc","emit","action","provider","cache","indexOf","_cache","getResult","response"],"sources":["/Users/bartosz/Documents/react-dapps/dev4passion_eword_web3/client/node_modules/alchemy-sdk/node_modules/@ethersproject/logger/lib.esm/_version.js","/Users/bartosz/Documents/react-dapps/dev4passion_eword_web3/client/node_modules/alchemy-sdk/node_modules/@ethersproject/logger/lib.esm/index.js","/Users/bartosz/Documents/react-dapps/dev4passion_eword_web3/client/node_modules/alchemy-sdk/node_modules/@ethersproject/properties/lib.esm/_version.js","/Users/bartosz/Documents/react-dapps/dev4passion_eword_web3/client/node_modules/alchemy-sdk/node_modules/@ethersproject/properties/lib.esm/index.js","/Users/bartosz/Documents/react-dapps/dev4passion_eword_web3/client/node_modules/alchemy-sdk/src/internal/request-batcher.ts","/Users/bartosz/Documents/react-dapps/dev4passion_eword_web3/client/node_modules/alchemy-sdk/src/api/alchemy-provider.ts"],"sourcesContent":["export const version = \"logger/5.7.0\";\n//# sourceMappingURL=_version.js.map","\"use strict\";\nlet _permanentCensorErrors = false;\nlet _censorErrors = false;\nconst LogLevels = { debug: 1, \"default\": 2, info: 2, warning: 3, error: 4, off: 5 };\nlet _logLevel = LogLevels[\"default\"];\nimport { version } from \"./_version\";\nlet _globalLogger = null;\nfunction _checkNormalize() {\n    try {\n        const missing = [];\n        // Make sure all forms of normalization are supported\n        [\"NFD\", \"NFC\", \"NFKD\", \"NFKC\"].forEach((form) => {\n            try {\n                if (\"test\".normalize(form) !== \"test\") {\n                    throw new Error(\"bad normalize\");\n                }\n                ;\n            }\n            catch (error) {\n                missing.push(form);\n            }\n        });\n        if (missing.length) {\n            throw new Error(\"missing \" + missing.join(\", \"));\n        }\n        if (String.fromCharCode(0xe9).normalize(\"NFD\") !== String.fromCharCode(0x65, 0x0301)) {\n            throw new Error(\"broken implementation\");\n        }\n    }\n    catch (error) {\n        return error.message;\n    }\n    return null;\n}\nconst _normalizeError = _checkNormalize();\nexport var LogLevel;\n(function (LogLevel) {\n    LogLevel[\"DEBUG\"] = \"DEBUG\";\n    LogLevel[\"INFO\"] = \"INFO\";\n    LogLevel[\"WARNING\"] = \"WARNING\";\n    LogLevel[\"ERROR\"] = \"ERROR\";\n    LogLevel[\"OFF\"] = \"OFF\";\n})(LogLevel || (LogLevel = {}));\nexport var ErrorCode;\n(function (ErrorCode) {\n    ///////////////////\n    // Generic Errors\n    // Unknown Error\n    ErrorCode[\"UNKNOWN_ERROR\"] = \"UNKNOWN_ERROR\";\n    // Not Implemented\n    ErrorCode[\"NOT_IMPLEMENTED\"] = \"NOT_IMPLEMENTED\";\n    // Unsupported Operation\n    //   - operation\n    ErrorCode[\"UNSUPPORTED_OPERATION\"] = \"UNSUPPORTED_OPERATION\";\n    // Network Error (i.e. Ethereum Network, such as an invalid chain ID)\n    //   - event (\"noNetwork\" is not re-thrown in provider.ready; otherwise thrown)\n    ErrorCode[\"NETWORK_ERROR\"] = \"NETWORK_ERROR\";\n    // Some sort of bad response from the server\n    ErrorCode[\"SERVER_ERROR\"] = \"SERVER_ERROR\";\n    // Timeout\n    ErrorCode[\"TIMEOUT\"] = \"TIMEOUT\";\n    ///////////////////\n    // Operational  Errors\n    // Buffer Overrun\n    ErrorCode[\"BUFFER_OVERRUN\"] = \"BUFFER_OVERRUN\";\n    // Numeric Fault\n    //   - operation: the operation being executed\n    //   - fault: the reason this faulted\n    ErrorCode[\"NUMERIC_FAULT\"] = \"NUMERIC_FAULT\";\n    ///////////////////\n    // Argument Errors\n    // Missing new operator to an object\n    //  - name: The name of the class\n    ErrorCode[\"MISSING_NEW\"] = \"MISSING_NEW\";\n    // Invalid argument (e.g. value is incompatible with type) to a function:\n    //   - argument: The argument name that was invalid\n    //   - value: The value of the argument\n    ErrorCode[\"INVALID_ARGUMENT\"] = \"INVALID_ARGUMENT\";\n    // Missing argument to a function:\n    //   - count: The number of arguments received\n    //   - expectedCount: The number of arguments expected\n    ErrorCode[\"MISSING_ARGUMENT\"] = \"MISSING_ARGUMENT\";\n    // Too many arguments\n    //   - count: The number of arguments received\n    //   - expectedCount: The number of arguments expected\n    ErrorCode[\"UNEXPECTED_ARGUMENT\"] = \"UNEXPECTED_ARGUMENT\";\n    ///////////////////\n    // Blockchain Errors\n    // Call exception\n    //  - transaction: the transaction\n    //  - address?: the contract address\n    //  - args?: The arguments passed into the function\n    //  - method?: The Solidity method signature\n    //  - errorSignature?: The EIP848 error signature\n    //  - errorArgs?: The EIP848 error parameters\n    //  - reason: The reason (only for EIP848 \"Error(string)\")\n    ErrorCode[\"CALL_EXCEPTION\"] = \"CALL_EXCEPTION\";\n    // Insufficient funds (< value + gasLimit * gasPrice)\n    //   - transaction: the transaction attempted\n    ErrorCode[\"INSUFFICIENT_FUNDS\"] = \"INSUFFICIENT_FUNDS\";\n    // Nonce has already been used\n    //   - transaction: the transaction attempted\n    ErrorCode[\"NONCE_EXPIRED\"] = \"NONCE_EXPIRED\";\n    // The replacement fee for the transaction is too low\n    //   - transaction: the transaction attempted\n    ErrorCode[\"REPLACEMENT_UNDERPRICED\"] = \"REPLACEMENT_UNDERPRICED\";\n    // The gas limit could not be estimated\n    //   - transaction: the transaction passed to estimateGas\n    ErrorCode[\"UNPREDICTABLE_GAS_LIMIT\"] = \"UNPREDICTABLE_GAS_LIMIT\";\n    // The transaction was replaced by one with a higher gas price\n    //   - reason: \"cancelled\", \"replaced\" or \"repriced\"\n    //   - cancelled: true if reason == \"cancelled\" or reason == \"replaced\")\n    //   - hash: original transaction hash\n    //   - replacement: the full TransactionsResponse for the replacement\n    //   - receipt: the receipt of the replacement\n    ErrorCode[\"TRANSACTION_REPLACED\"] = \"TRANSACTION_REPLACED\";\n    ///////////////////\n    // Interaction Errors\n    // The user rejected the action, such as signing a message or sending\n    // a transaction\n    ErrorCode[\"ACTION_REJECTED\"] = \"ACTION_REJECTED\";\n})(ErrorCode || (ErrorCode = {}));\n;\nconst HEX = \"0123456789abcdef\";\nexport class Logger {\n    constructor(version) {\n        Object.defineProperty(this, \"version\", {\n            enumerable: true,\n            value: version,\n            writable: false\n        });\n    }\n    _log(logLevel, args) {\n        const level = logLevel.toLowerCase();\n        if (LogLevels[level] == null) {\n            this.throwArgumentError(\"invalid log level name\", \"logLevel\", logLevel);\n        }\n        if (_logLevel > LogLevels[level]) {\n            return;\n        }\n        console.log.apply(console, args);\n    }\n    debug(...args) {\n        this._log(Logger.levels.DEBUG, args);\n    }\n    info(...args) {\n        this._log(Logger.levels.INFO, args);\n    }\n    warn(...args) {\n        this._log(Logger.levels.WARNING, args);\n    }\n    makeError(message, code, params) {\n        // Errors are being censored\n        if (_censorErrors) {\n            return this.makeError(\"censored error\", code, {});\n        }\n        if (!code) {\n            code = Logger.errors.UNKNOWN_ERROR;\n        }\n        if (!params) {\n            params = {};\n        }\n        const messageDetails = [];\n        Object.keys(params).forEach((key) => {\n            const value = params[key];\n            try {\n                if (value instanceof Uint8Array) {\n                    let hex = \"\";\n                    for (let i = 0; i < value.length; i++) {\n                        hex += HEX[value[i] >> 4];\n                        hex += HEX[value[i] & 0x0f];\n                    }\n                    messageDetails.push(key + \"=Uint8Array(0x\" + hex + \")\");\n                }\n                else {\n                    messageDetails.push(key + \"=\" + JSON.stringify(value));\n                }\n            }\n            catch (error) {\n                messageDetails.push(key + \"=\" + JSON.stringify(params[key].toString()));\n            }\n        });\n        messageDetails.push(`code=${code}`);\n        messageDetails.push(`version=${this.version}`);\n        const reason = message;\n        let url = \"\";\n        switch (code) {\n            case ErrorCode.NUMERIC_FAULT: {\n                url = \"NUMERIC_FAULT\";\n                const fault = message;\n                switch (fault) {\n                    case \"overflow\":\n                    case \"underflow\":\n                    case \"division-by-zero\":\n                        url += \"-\" + fault;\n                        break;\n                    case \"negative-power\":\n                    case \"negative-width\":\n                        url += \"-unsupported\";\n                        break;\n                    case \"unbound-bitwise-result\":\n                        url += \"-unbound-result\";\n                        break;\n                }\n                break;\n            }\n            case ErrorCode.CALL_EXCEPTION:\n            case ErrorCode.INSUFFICIENT_FUNDS:\n            case ErrorCode.MISSING_NEW:\n            case ErrorCode.NONCE_EXPIRED:\n            case ErrorCode.REPLACEMENT_UNDERPRICED:\n            case ErrorCode.TRANSACTION_REPLACED:\n            case ErrorCode.UNPREDICTABLE_GAS_LIMIT:\n                url = code;\n                break;\n        }\n        if (url) {\n            message += \" [ See: https:/\\/links.ethers.org/v5-errors-\" + url + \" ]\";\n        }\n        if (messageDetails.length) {\n            message += \" (\" + messageDetails.join(\", \") + \")\";\n        }\n        // @TODO: Any??\n        const error = new Error(message);\n        error.reason = reason;\n        error.code = code;\n        Object.keys(params).forEach(function (key) {\n            error[key] = params[key];\n        });\n        return error;\n    }\n    throwError(message, code, params) {\n        throw this.makeError(message, code, params);\n    }\n    throwArgumentError(message, name, value) {\n        return this.throwError(message, Logger.errors.INVALID_ARGUMENT, {\n            argument: name,\n            value: value\n        });\n    }\n    assert(condition, message, code, params) {\n        if (!!condition) {\n            return;\n        }\n        this.throwError(message, code, params);\n    }\n    assertArgument(condition, message, name, value) {\n        if (!!condition) {\n            return;\n        }\n        this.throwArgumentError(message, name, value);\n    }\n    checkNormalize(message) {\n        if (message == null) {\n            message = \"platform missing String.prototype.normalize\";\n        }\n        if (_normalizeError) {\n            this.throwError(\"platform missing String.prototype.normalize\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"String.prototype.normalize\", form: _normalizeError\n            });\n        }\n    }\n    checkSafeUint53(value, message) {\n        if (typeof (value) !== \"number\") {\n            return;\n        }\n        if (message == null) {\n            message = \"value not safe\";\n        }\n        if (value < 0 || value >= 0x1fffffffffffff) {\n            this.throwError(message, Logger.errors.NUMERIC_FAULT, {\n                operation: \"checkSafeInteger\",\n                fault: \"out-of-safe-range\",\n                value: value\n            });\n        }\n        if (value % 1) {\n            this.throwError(message, Logger.errors.NUMERIC_FAULT, {\n                operation: \"checkSafeInteger\",\n                fault: \"non-integer\",\n                value: value\n            });\n        }\n    }\n    checkArgumentCount(count, expectedCount, message) {\n        if (message) {\n            message = \": \" + message;\n        }\n        else {\n            message = \"\";\n        }\n        if (count < expectedCount) {\n            this.throwError(\"missing argument\" + message, Logger.errors.MISSING_ARGUMENT, {\n                count: count,\n                expectedCount: expectedCount\n            });\n        }\n        if (count > expectedCount) {\n            this.throwError(\"too many arguments\" + message, Logger.errors.UNEXPECTED_ARGUMENT, {\n                count: count,\n                expectedCount: expectedCount\n            });\n        }\n    }\n    checkNew(target, kind) {\n        if (target === Object || target == null) {\n            this.throwError(\"missing new\", Logger.errors.MISSING_NEW, { name: kind.name });\n        }\n    }\n    checkAbstract(target, kind) {\n        if (target === kind) {\n            this.throwError(\"cannot instantiate abstract class \" + JSON.stringify(kind.name) + \" directly; use a sub-class\", Logger.errors.UNSUPPORTED_OPERATION, { name: target.name, operation: \"new\" });\n        }\n        else if (target === Object || target == null) {\n            this.throwError(\"missing new\", Logger.errors.MISSING_NEW, { name: kind.name });\n        }\n    }\n    static globalLogger() {\n        if (!_globalLogger) {\n            _globalLogger = new Logger(version);\n        }\n        return _globalLogger;\n    }\n    static setCensorship(censorship, permanent) {\n        if (!censorship && permanent) {\n            this.globalLogger().throwError(\"cannot permanently disable censorship\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"setCensorship\"\n            });\n        }\n        if (_permanentCensorErrors) {\n            if (!censorship) {\n                return;\n            }\n            this.globalLogger().throwError(\"error censorship permanent\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"setCensorship\"\n            });\n        }\n        _censorErrors = !!censorship;\n        _permanentCensorErrors = !!permanent;\n    }\n    static setLogLevel(logLevel) {\n        const level = LogLevels[logLevel.toLowerCase()];\n        if (level == null) {\n            Logger.globalLogger().warn(\"invalid log level - \" + logLevel);\n            return;\n        }\n        _logLevel = level;\n    }\n    static from(version) {\n        return new Logger(version);\n    }\n}\nLogger.errors = ErrorCode;\nLogger.levels = LogLevel;\n//# sourceMappingURL=index.js.map","export const version = \"properties/5.7.0\";\n//# sourceMappingURL=_version.js.map","\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nexport function defineReadOnly(object, name, value) {\n    Object.defineProperty(object, name, {\n        enumerable: true,\n        value: value,\n        writable: false,\n    });\n}\n// Crawl up the constructor chain to find a static method\nexport function getStatic(ctor, key) {\n    for (let i = 0; i < 32; i++) {\n        if (ctor[key]) {\n            return ctor[key];\n        }\n        if (!ctor.prototype || typeof (ctor.prototype) !== \"object\") {\n            break;\n        }\n        ctor = Object.getPrototypeOf(ctor.prototype).constructor;\n    }\n    return null;\n}\nexport function resolveProperties(object) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const promises = Object.keys(object).map((key) => {\n            const value = object[key];\n            return Promise.resolve(value).then((v) => ({ key: key, value: v }));\n        });\n        const results = yield Promise.all(promises);\n        return results.reduce((accum, result) => {\n            accum[(result.key)] = result.value;\n            return accum;\n        }, {});\n    });\n}\nexport function checkProperties(object, properties) {\n    if (!object || typeof (object) !== \"object\") {\n        logger.throwArgumentError(\"invalid object\", \"object\", object);\n    }\n    Object.keys(object).forEach((key) => {\n        if (!properties[key]) {\n            logger.throwArgumentError(\"invalid object key - \" + key, \"transaction:\" + key, object);\n        }\n    });\n}\nexport function shallowCopy(object) {\n    const result = {};\n    for (const key in object) {\n        result[key] = object[key];\n    }\n    return result;\n}\nconst opaque = { bigint: true, boolean: true, \"function\": true, number: true, string: true };\nfunction _isFrozen(object) {\n    // Opaque objects are not mutable, so safe to copy by assignment\n    if (object === undefined || object === null || opaque[typeof (object)]) {\n        return true;\n    }\n    if (Array.isArray(object) || typeof (object) === \"object\") {\n        if (!Object.isFrozen(object)) {\n            return false;\n        }\n        const keys = Object.keys(object);\n        for (let i = 0; i < keys.length; i++) {\n            let value = null;\n            try {\n                value = object[keys[i]];\n            }\n            catch (error) {\n                // If accessing a value triggers an error, it is a getter\n                // designed to do so (e.g. Result) and is therefore \"frozen\"\n                continue;\n            }\n            if (!_isFrozen(value)) {\n                return false;\n            }\n        }\n        return true;\n    }\n    return logger.throwArgumentError(`Cannot deepCopy ${typeof (object)}`, \"object\", object);\n}\n// Returns a new copy of object, such that no properties may be replaced.\n// New properties may be added only to objects.\nfunction _deepCopy(object) {\n    if (_isFrozen(object)) {\n        return object;\n    }\n    // Arrays are mutable, so we need to create a copy\n    if (Array.isArray(object)) {\n        return Object.freeze(object.map((item) => deepCopy(item)));\n    }\n    if (typeof (object) === \"object\") {\n        const result = {};\n        for (const key in object) {\n            const value = object[key];\n            if (value === undefined) {\n                continue;\n            }\n            defineReadOnly(result, key, deepCopy(value));\n        }\n        return result;\n    }\n    return logger.throwArgumentError(`Cannot deepCopy ${typeof (object)}`, \"object\", object);\n}\nexport function deepCopy(object) {\n    return _deepCopy(object);\n}\nexport class Description {\n    constructor(info) {\n        for (const key in info) {\n            this[key] = deepCopy(info[key]);\n        }\n    }\n}\n//# sourceMappingURL=index.js.map","import { JsonRpcRequest, JsonRpcResponse } from './internal-types';\n\n/** Maximum size of a batch on the rpc provider. */\nconst DEFAULT_MAX_REQUEST_BATCH_SIZE = 100;\n\n/** Timeout interval before the pending batch is sent. */\nconst DEFAULT_REQUEST_BATCH_DELAY_MS = 10;\n\n/**\n * Internal class to enqueue requests and automatically send/process batches.\n *\n * The underlying batching mechanism is loosely based on ethers.js's\n * `JsonRpcBatchProvider`.\n *\n * @internal\n */\nexport class RequestBatcher {\n  /** Timeout timer that periodically sends the pending batch. */\n  private pendingBatchTimer: NodeJS.Timer | undefined;\n\n  /**\n   * Array of enqueued requests along with the constructed promise handlers for\n   * each request.\n   */\n  private pendingBatch: Array<BatchRequest> = [];\n\n  constructor(\n    private readonly sendBatchFn: SendBatchFn,\n    private readonly maxBatchSize = DEFAULT_MAX_REQUEST_BATCH_SIZE\n  ) {}\n\n  /**\n   * Enqueues the provided request. The batch is immediately sent if the maximum\n   * batch size is reached. Otherwise, the request is enqueued onto a batch that\n   * is sent after 10ms.\n   *\n   * Returns a promise that resolves with the result of the request.\n   */\n  async enqueueRequest(request: JsonRpcRequest): Promise<any> {\n    const inflightRequest: BatchRequest = {\n      request,\n      resolve: undefined,\n      reject: undefined\n    };\n\n    const promise = new Promise((resolve, reject) => {\n      inflightRequest.resolve = resolve;\n      inflightRequest.reject = reject;\n    });\n\n    this.pendingBatch.push(inflightRequest);\n\n    if (this.pendingBatch.length === this.maxBatchSize) {\n      // Send batch immediately if we are at the maximum batch size.\n      void this.sendBatchRequest();\n    } else if (!this.pendingBatchTimer) {\n      // Schedule batch for next event loop + short duration\n      this.pendingBatchTimer = setTimeout(\n        () => this.sendBatchRequest(),\n        DEFAULT_REQUEST_BATCH_DELAY_MS\n      );\n    }\n\n    return promise;\n  }\n\n  /**\n   * Sends the currently queued batches and resets the batch and timer. Processes\n   * the batched response results back to the original promises.\n   */\n  private async sendBatchRequest(): Promise<void> {\n    // Get the current batch and clear it, so new requests\n    // go into the next batch\n    const batch = this.pendingBatch;\n    this.pendingBatch = [];\n    if (this.pendingBatchTimer) {\n      clearTimeout(this.pendingBatchTimer);\n      this.pendingBatchTimer = undefined;\n    }\n\n    // Get the request as an array of requests\n    const request = batch.map(inflight => inflight.request);\n\n    return this.sendBatchFn(request).then(\n      result => {\n        // For each result, feed it to the correct Promise, depending\n        // on whether it was a success or error\n        batch.forEach((inflightRequest, index) => {\n          const payload = result[index];\n          if (payload.error) {\n            const error = new Error(payload.error.message);\n            (error as any).code = payload.error.code;\n            (error as any).data = payload.error.data;\n            inflightRequest.reject!(error);\n          } else {\n            inflightRequest.resolve!(payload.result);\n          }\n        });\n      },\n      error => {\n        batch.forEach(inflightRequest => {\n          inflightRequest.reject!(error);\n        });\n      }\n    );\n  }\n}\n\n/** Function type to match the `fetchJson` function in ethers. */\ntype SendBatchFn = (reqs: JsonRpcRequest[]) => Promise<JsonRpcResponse[]>;\n\n/**\n * Internal interface to represent a request on a batch along with the promises to resolve it.\n */\ninterface BatchRequest {\n  request: JsonRpcRequest;\n  resolve?: (result: any) => void;\n  reject?: (error: Error) => void;\n}\n","import {\n  Network as NetworkFromEthers,\n  Networkish,\n  getNetwork as getNetworkFromEthers\n} from '@ethersproject/networks';\nimport { deepCopy } from '@ethersproject/properties';\nimport {\n  CommunityResourcable,\n  JsonRpcProvider\n} from '@ethersproject/providers';\nimport { ConnectionInfo, fetchJson } from '@ethersproject/web';\n\nimport { JsonRpcRequest, JsonRpcResponse } from '../internal/internal-types';\nimport { RequestBatcher } from '../internal/request-batcher';\nimport { Network } from '../types/types';\nimport {\n  CustomNetworks,\n  DEFAULT_ALCHEMY_API_KEY,\n  DEFAULT_NETWORK,\n  EthersNetwork,\n  getAlchemyHttpUrl,\n  getAlchemyWsUrl\n} from '../util/const';\nimport { logWarn } from '../util/logger';\nimport { IS_BROWSER } from '../util/util';\nimport { VERSION } from '../version';\nimport { AlchemyConfig } from './alchemy-config';\n\n/**\n * SDK's custom implementation of ethers.js's 'AlchemyProvider'.\n *\n * Do not call this constructor directly. Instead, instantiate an instance of\n * {@link Alchemy} and call {@link Alchemy.config.getProvider()}.\n *\n * @public\n */\nexport class AlchemyProvider\n  extends JsonRpcProvider\n  implements CommunityResourcable\n{\n  readonly apiKey: string;\n  readonly maxRetries: number;\n  readonly batchRequests: boolean;\n\n  /**\n   * VISIBLE ONLY FOR TESTING\n   *@internal\n   */\n  readonly batcher: RequestBatcher;\n\n  /** @internal */\n  constructor(config: AlchemyConfig) {\n    // Normalize the API Key to a string.\n    const apiKey = AlchemyProvider.getApiKey(config.apiKey);\n\n    // Generate our own connection info with the correct endpoint URLs.\n    const alchemyNetwork = AlchemyProvider.getAlchemyNetwork(config.network);\n    const connection = AlchemyProvider.getAlchemyConnectionInfo(\n      alchemyNetwork,\n      apiKey,\n      'http'\n    );\n\n    // If a hardcoded url was specified in the config, use that instead of the\n    // provided apiKey or network.\n    if (config.url !== undefined) {\n      connection.url = config.url;\n    }\n\n    connection.throttleLimit = config.maxRetries;\n\n    // Normalize the Alchemy named network input to the network names used by\n    // ethers. This allows the parent super constructor in JsonRpcProvider to\n    // correctly set the network.\n    const ethersNetwork = EthersNetwork[alchemyNetwork];\n    super(connection, ethersNetwork);\n\n    this.apiKey = config.apiKey;\n    this.maxRetries = config.maxRetries;\n    this.batchRequests = config.batchRequests;\n\n    // TODO: support individual headers when calling batch\n    const batcherConnection = { ...this.connection };\n    batcherConnection.headers!['Alchemy-Ethers-Sdk-Method'] = 'batchSend';\n    const sendBatchFn = (\n      requests: JsonRpcRequest[]\n    ): Promise<JsonRpcResponse[]> => {\n      return fetchJson(batcherConnection, JSON.stringify(requests));\n    };\n    this.batcher = new RequestBatcher(sendBatchFn);\n  }\n\n  /**\n   * Overrides the `UrlJsonRpcProvider.getApiKey` method as implemented by\n   * ethers.js. Returns the API key for an Alchemy provider.\n   *\n   * @internal\n   * @override\n   */\n  static getApiKey(apiKey: any): string {\n    if (apiKey == null) {\n      return DEFAULT_ALCHEMY_API_KEY;\n    }\n    if (apiKey && typeof apiKey !== 'string') {\n      throw new Error(\n        `Invalid apiKey '${apiKey}' provided. apiKey must be a string.`\n      );\n    }\n    return apiKey;\n  }\n\n  /**\n   * Overrides the `BaseProvider.getNetwork` method as implemented by ethers.js.\n   *\n   * This override allows the SDK to set the provider's network to values not\n   * yet supported by ethers.js.\n   *\n   * @internal\n   * @override\n   */\n  static getNetwork(network: Networkish): NetworkFromEthers {\n    if (typeof network === 'string' && network in CustomNetworks) {\n      return CustomNetworks[network];\n    }\n\n    // Call the standard ethers.js getNetwork method for other networks.\n    return getNetworkFromEthers(network);\n  }\n\n  /**\n   * Converts the `Networkish` input to the network enum used by Alchemy.\n   *\n   * @internal\n   */\n  static getAlchemyNetwork(network?: Networkish): Network {\n    if (network === undefined) {\n      return DEFAULT_NETWORK;\n    }\n\n    if (typeof network === 'number') {\n      throw new Error(\n        `Invalid network '${network}' provided. Network must be a string.`\n      );\n    }\n\n    // Guaranteed that `typeof network === 'string`.\n    const isValidNetwork = Object.values(Network).includes(network as Network);\n    if (!isValidNetwork) {\n      throw new Error(\n        `Invalid network '${network}' provided. Network must be one of: ` +\n          `${Object.values(Network).join(', ')}.`\n      );\n    }\n    return network as Network;\n  }\n\n  /**\n   * Returns a {@link ConnectionInfo} object compatible with ethers that contains\n   * the correct URLs for Alchemy.\n   *\n   * @internal\n   */\n  static getAlchemyConnectionInfo(\n    network: Network,\n    apiKey: string,\n    type: 'wss' | 'http'\n  ): ConnectionInfo {\n    const url =\n      type === 'http'\n        ? getAlchemyHttpUrl(network, apiKey)\n        : getAlchemyWsUrl(network, apiKey);\n    return {\n      headers: IS_BROWSER\n        ? {\n            'Alchemy-Ethers-Sdk-Version': VERSION\n          }\n        : {\n            'Alchemy-Ethers-Sdk-Version': VERSION,\n            'Accept-Encoding': 'gzip'\n          },\n      allowGzip: true,\n      url\n    };\n  }\n\n  /**\n   * Overrides the method in ethers.js's `StaticJsonRpcProvider` class. This\n   * method is called when calling methods on the parent class `BaseProvider`.\n   *\n   * @override\n   */\n  async detectNetwork(): Promise<NetworkFromEthers> {\n    let network = this.network;\n    if (network == null) {\n      network = await super.detectNetwork();\n\n      if (!network) {\n        throw new Error('No network detected');\n      }\n    }\n    return network;\n  }\n\n  _startPending(): void {\n    logWarn('WARNING: Alchemy Provider does not support pending filters');\n  }\n\n  /**\n   * Overrides the ether's `isCommunityResource()` method. Returns true if the\n   * current api key is the default key.\n   *\n   * @override\n   */\n  isCommunityResource(): boolean {\n    return this.apiKey === DEFAULT_ALCHEMY_API_KEY;\n  }\n\n  /**\n   * Overrides the base {@link JsonRpcProvider.send} method to implement custom\n   * logic for sending requests to Alchemy.\n   *\n   * @param method The method name to use for the request.\n   * @param params The parameters to use for the request.\n   * @override\n   * @public\n   */\n  // TODO: Add headers for `perform()` override.\n  send(method: string, params: Array<any>): Promise<any> {\n    return this._send(method, params, 'send');\n  }\n\n  /**\n   * DO NOT MODIFY.\n   *\n   * Original code copied over from ether.js's `JsonRpcProvider.send()`.\n   *\n   * This method is copied over directly in order to implement custom headers\n   *\n   * @internal\n   */\n  _send(\n    method: string,\n    params: Array<any>,\n    methodName: string,\n    forceBatch = false\n  ): Promise<any> {\n    const request = {\n      method,\n      params,\n      id: this._nextId++,\n      jsonrpc: '2.0'\n    };\n\n    // START MODIFIED CODE\n    const connection = { ...this.connection };\n    connection.headers!['Alchemy-Ethers-Sdk-Method'] = methodName;\n\n    if (this.batchRequests || forceBatch) {\n      return this.batcher.enqueueRequest(request as JsonRpcRequest);\n    }\n    // END MODIFIED CODE\n\n    this.emit('debug', {\n      action: 'request',\n      request: deepCopy(request),\n      provider: this\n    });\n\n    // We can expand this in the future to any call, but for now these\n    // are the biggest wins and do not require any serializing parameters.\n    const cache = ['eth_chainId', 'eth_blockNumber'].indexOf(method) >= 0;\n    if (cache && this._cache[method]) {\n      return this._cache[method];\n    }\n\n    const result = fetchJson(\n      this.connection,\n      JSON.stringify(request),\n      getResult\n    ).then(\n      result => {\n        this.emit('debug', {\n          action: 'response',\n          request,\n          response: result,\n          provider: this\n        });\n\n        return result;\n      },\n      error => {\n        this.emit('debug', {\n          action: 'response',\n          error,\n          request,\n          provider: this\n        });\n\n        throw error;\n      }\n    );\n\n    // Cache the fetch, but clear it on the next event loop\n    if (cache) {\n      this._cache[method] = result;\n      setTimeout(() => {\n        // @ts-ignore - This is done by ethers.\n        this._cache[method] = null;\n      }, 0);\n    }\n\n    return result;\n  }\n}\n\n/**\n * DO NOT MODIFY.\n *\n * Original code copied over from ether.js's\n * `@ethersproject/web/src.ts/index.ts`. Used to support\n * {@link AlchemyProvider._send}, which is also copied over.\n */\nfunction getResult(payload: {\n  error?: { code?: number; data?: any; message?: string };\n  result?: any;\n}): any {\n  if (payload.error) {\n    const error: any = new Error(payload.error.message);\n    error.code = payload.error.code;\n    error.data = payload.error.data;\n    throw error;\n  }\n\n  return payload.result;\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}